var search_data = {"index":{"searchIndex":["file","solargraph","apimap","bundlermethods","cache","sourcetoyard","store","bundle","bundlenotfounderror","complextype","typemethods","uniquetype","complextypeerror","convention","base","gemfile","gemspec","rspec","corefills","diagnostics","base","requirenotfound","rubocop","rubocophelpers","severities","typecheck","updateerrors","diagnosticserror","documentor","domaindirective","environ","filenotfounderror","invalidoffseterror","languageserver","completionitemkinds","errorcodes","host","cataloger","diagnoser","dispatch","sources","message","base","cancelrequest","client","registercapability","completionitem","resolve","exitnotification","extended","checkgemversion","document","documentgems","downloadcore","environment","search","initialize","initialized","methodnotfound","methodnotimplemented","shutdown","textdocument","base","codeaction","completion","definition","didchange","didclose","didopen","didsave","documentsymbol","foldingrange","formatting","hover","ontypeformatting","preparerename","references","rename","signaturehelp","workspace","didchangeconfiguration","didchangewatchedfiles","didchangeworkspacefolders","workspacesymbol","messagetypes","request","symbolkinds","transport","adapter","datareader","urihelpers","library","location","logging","page","binder","pin","attribute","base","basemethod","basevariable","block","classvariable","closure","common","constant","conversions","documenting","duckmethod","globalvariable","instancevariable","keyword","keywordparam","localvariable","localized","method","methodalias","namespace","parameter","proxytype","reference","extend","include","override","require","superclass","singleton","symbol","yardpin","constant","method","namespace","yardmixin","position","range","servermethods","shell","source","chain","blockvariable","call","classvariable","constant","globalvariable","head","instancevariable","link","literal","or","variable","change","cursor","encodingfixes","flawedbuilder","nodechainer","nodemethods","deepinference","sourcechainer","updater","sourcemap","clip","completion","mapper","nodeprocessor","aliasnode","argsnode","base","beginnode","blocknode","casgnnode","cvasgnnode","defnode","defsnode","gvasgnnode","ivasgnnode","lvasgnnode","namespacenode","orasgnnode","resbodynode","sclassnode","sendnode","symnode","region","sourcenotavailableerror","typechecker","paramdef","problem","workspace","config","workspacetoolargeerror","yardmap","cache","coredocs","coregen","mapper","rdoctoyard","yard","tags","==()","==()","==()","==()","==()","==()","==()","[]()","_locate_pin()","add_folders()","add_gem_dependencies()","all?()","all_instance_variables()","allow?()","allow_registration()","anonymous()","api_map()","arg_to_duck()","arg_type()","argument?()","arguments_match()","associated_comments()","async_update()","at()","attach()","attached?()","available()","available()","available_cores()","available_port()","base()","base_name()","best_download()","best_match()","binder()","binder()","binder()","binder()","binder()","block()","block_passed?()","block_pin()","block_pins()","bundle()","bundle()","bundled?()","cache()","cache()","cache_dir()","calculated()","call()","can_register?()","cancel()","cancel?()","catalog()","catalog()","catalog()","cataloger()","chain()","chain()","chain()","chain()","chain()","change()","change()","check_hash_params()","check_param_tags()","check_return_type()","check_send_args()","clear()","clear()","clear()","clear()","clear()","clear()","client_capabilities()","clip()","clip_at()","close()","close()","close()","closing()","closure_at()","closure_pin()","code()","code_for()","code_for()","code_location()","code_object_at()","code_object_map()","code_object_paths()","collect_macros()","combine_ranges()","comment?()","comment_at?()","comment_ranges()","commentary()","comments()","comments()","comments()","comments()","comments_for()","comments_for()","commit()","compare_directives()","compare_docstring_tags()","compare_tags()","complete()","complete_keyword_parameters()","completion_item()","completion_item_kind()","completion_item_kind()","completion_item_kind()","completion_item_kind()","completion_item_kind()","completion_item_kind()","completion_item_kind()","completions_at()","completions_at()","config()","config()","config_data()","configure()","configured_require_paths()","confirm_return_type()","const_from()","constant?()","constant?()","contain?()","contain?()","context()","context()","context()","context()","context_pin()","core_pins()","crawl_gates()","create()","create()","create_from_disk()","cursor_at()","cursor_at()","cursor_at()","default_config()","default_configuration()","define()","define()","defined?()","defined?()","definitions_at()","definitions_at()","delete()","delete()","deprecated?()","deprecated?()","detach()","detail()","diagnose()","diagnose()","diagnose()","diagnose()","diagnose()","diagnose()","diagnose()","diagnoser()","directives()","directives()","docstring()","document()","document()","document()","document()","document_symbols()","document_symbols()","document_symbols()","document_symbols()","documentation()","documentation()","documentation()","domains()","domains()","domains()","download()","download_core()","drill_signature()","duck_type?()","dynamic_capability_options()","dynamic_registration_for?()","each()","empty?()","empty_result()","end_of_phrase()","end_of_word()","end_word_pattern()","environ()","environ()","environ()","environ()","environ()","error_ranges()","excluded()","excluded_directories()","explicit_library_for()","extend_references()","extra_return_type()","extract_first_line()","fetched?()","file_to_uri()","filename()","filename()","filename()","filename()","filenames()","find()","find_context()","find_directive_line_number()","find_file()","find_rubocop_file()","finish_synchronize()","first()","first_char_offset()","first_pin()","fix_drive_letter()","fixed_parameters?()","fixed_phrase()","fixed_position()","flush()","foldable_comment_block_ranges()","folders()","folding_ranges()","folding_ranges()","folding_ranges()","for()","format()","fqns_pins()","from()","from_comment()","from_expr()","from_node()","from_offset()","from_to()","from_to()","full_context()","full_context()","fuzzy_string_match()","gates()","gates()","gates()","gemspec?()","gemspecs()","generate_complex_type()","generate_complex_type()","generate_docs()","generate_gzip()","generate_link()","generate_links()","generate_options()","generate_pins()","generate_require_paths()","generate_updater()","generic_library()","generic_library_for()","get_class_variable_pins()","get_class_variables()","get_complex_type_methods()","get_constants()","get_constants()","get_constants()","get_extends()","get_global_variable_pins()","get_includes()","get_instance_variable_pins()","get_instance_variables()","get_method_stack()","get_methods()","get_methods()","get_methods()","get_namespace_type()","get_node_end_position()","get_node_location()","get_node_start_position()","get_offset()","get_parameters()","get_path_pins()","get_path_pins()","get_path_pins()","get_path_pins()","get_path_suggestions()","get_qualified_namespace()","get_receiver_definition()","get_return_nodes()","get_return_nodes_from_children()","get_return_nodes_only()","get_signature_data_at()","get_superclass()","get_symbols()","get_symbols()","glob_is_directory?()","glob_to_directory()","global_config_path()","gzip()","has_file?()","hash_parameters?()","htmlify()","identity()","implicit()","implicit_library_for()","include?()","include?()","include_references()","included()","index()","index()","index()","infer()","infer()","infer()","infer_first_defined()","infer_from_return_nodes()","infer_literal_node_type()","inferred_pins()","inner_folding_ranges()","inner_get_constants()","inner_get_methods()","inner_node_references()","inner_process_macro()","inner_qualify()","inner_tree_at()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","install_archive()","join_docs()","key_types()","keywords()","last_character()","length()","libraries()","library_for()","line_char_to_offset()","link_documentation()","list_cores()","list_parameters?()","literal?()","load()","load()","load()","load()","load()","load_sources()","load_string()","load_string()","load_string()","load_string()","load_yardoc()","local_path_hash()","locals()","locals_at()","locate()","locate_block_pin()","locate_named_path_pin()","locate_pins()","locate_pins()","locate_pins()","locate_pins()","locate_ref()","location()","location()","logger()","logger()","macros()","make_array()","map()","map()","map()","map()","map()","map()","markup_content()","match?()","match?()","match?()","match?()","max_files()","maybe_directives?()","merge()","merge()","merge()","merge()","method_args()","method_body_node()","method_map()","method_missing()","method_pins()","method_return()","more_signature?()","mutex()","mutex()","name()","name()","named_macro()","named_macros()","named_path_pin()","namespace()","namespace()","namespace()","namespace()","namespace_children()","namespace_exists?()","namespace_exists?()","namespace_map()","namespace_pins()","namespace_type()","namespaces()","namespaces()","nearly?()","nearly?()","nearly?()","nearly?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","nil_assignment?()","nil_type?()","node_at()","node_position()","normalize()","normalize()","normalize_indentation()","normalize_separators()","object_location()","offense_ending_position()","offense_range()","offense_start_position()","offense_to_diagnostic()","offset()","offset()","open()","open()","open?()","open?()","open_from_disk()","open_from_disk()","open_source_hash()","opening()","options()","overloads()","pack_name()","package_completions()","param_tag()","param_tags_from()","param_type_problems()","parameter_names()","parameter_names()","parameter_names()","parameters()","parameters()","parameters()","parameters?()","parse()","parse()","parse_comments()","parse_docstring()","parse_message_from_buffer()","parse_with_comments()","parsed?()","parser()","path()","path()","path()","path()","path()","path()","path()","path_macros()","path_pin()","path_pin_hash()","path_pins()","pending_requests()","phrase()","pin_description()","pins()","pins()","pins()","post_initialize()","post_initialize()","prefer_non_nil_variables()","prepare()","prepare_folders()","prepare_rename?()","prepare_to_parse_message()","probe()","probe()","probe()","probe()","probe()","probed?()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process_alias_method()","process_attribute()","process_children()","process_comment()","process_comment_directives()","process_directive()","process_directive()","process_exclusions()","process_extend()","process_globs()","process_include()","process_macro()","process_module_function()","process_private_class_method()","process_private_constant()","process_require()","process_requires()","process_stdlib()","process_yardoc()","proxied?()","proxy()","qualify()","qualify()","qualify()","qualify_lower()","query_symbols()","query_symbols()","query_symbols()","query_symbols()","queue()","queue()","rake_yard()","range()","rdoc()","read()","read_config()","read_text()","read_text()","realize()","rebind()","rebind_block()","rebound?()","receive()","receive()","receiver()","receiver_defined?()","receiving()","recipient()","recipient_node()","recurse_namespace_object()","redirect_stdout()","reduce_class()","reduce_to_value_nodes()","references()","references()","references_from()","references_from()","register()","register()","register()","register()","register_capabilities()","register_from_options()","registered?()","remember_or_probe()","remove()","remove()","remove_folders()","remove_folders()","remove_inline_comment_hashes()","remove_odd_spaces()","render()","repair()","repair()","repaired?()","report_location?()","reporter()","reporter_hash()","reporters()","reporters()","reporters()","requests()","require_error()","require_from_bundle()","require_location()","require_minimum()","require_paths()","require_paths()","require_reference()","require_reference_at()","required()","requires()","reset_conversions()","reset_require_from_bundle()","resolve()","resolve()","resolve()","resolve()","resolve()","resolve()","resolve()","resolve()","resolve()","resolve()","resolve()","resolve_completion_item()","resolve_method_alias()","resolve_method_aliases()","resolve_node_signature()","resolve_reference()","resolve_reference()","respond_to_missing?()","return_type()","return_type()","return_type()","return_type()","return_type()","return_type()","return_type()","return_type_problems()","returns_from()","root_code_object()","rooted?()","ruby_to_html()","run()","scan()","schedule()","scope()","scope()","scope()","search()","search()","search()","see_reference()","see_reference()","select()","select()","select_template()","self_to()","self_to()","selfy?()","selfy?()","send_notification()","send_request()","send_response()","send_response()","sending()","set_constants()","set_error()","set_message_handler()","set_methods()","set_path_pins()","set_qualified_namespace()","set_receiver_definition()","set_result()","show_message()","show_message_request()","shutdown()","signature()","signature_data()","signature_help()","signatures_at()","signatures_at()","signify()","skippable_block_receivers()","socket()","source()","source_hash()","source_map()","source_map()","source_map_hash()","source_maps()","sources()","sources()","sources()","spec_for_require()","specs_from_bundle()","start()","start()","start()","start()","start_of_constant?()","start_of_word()","start_synchronize()","start_word_pattern()","static_code_action()","static_completion()","static_definitions()","static_document_formatting()","static_document_symbols()","static_folding_range()","static_hover()","static_on_type_formatting()","static_references()","static_rename()","static_signature_help()","static_workspace_symbols()","stdio()","stop()","stop()","stop()","stop()","stopped?()","stopped?()","stopped?()","stopped?()","store()","strict_type_problems()","string?()","string?()","string_at?()","string_nodes()","string_nodes_in()","string_value()","stringified_comments()","stringify_comment_array()","super_and_sub?()","super_pins()","superclass_references()","support_workspace_folders?()","symbol_kind()","symbol_kind()","symbol_kind()","symbol_kind()","symbol_kind()","symbol_kind()","symbols()","synchronize()","synchronize!()","synchronized?()","synchronized?()","synchronizing?()","tick()","tick()","tick()","to_hash()","to_hash()","to_hash()","to_offset()","to_s()","to_s()","to_s()","tree_at()","try_merge!()","try_merge!()","try_merge!()","try_merge!()","try_merge!()","try_merge!()","try_merge!()","try_parse()","typecheck()","typify()","typify()","typify()","typify()","typify_block_param()","typify_from_super()","typify_method_param()","uncache()","undefined?()","undefined?()","undefined?()","unmap()","unpack_name()","unregister_capabilities()","unresolved_requires()","update()","update()","update()","update_libraries()","uri_to_file()","valid?()","value_types()","variable?()","variable?()","version()","versions()","visibility()","visibility()","visible_at?()","visible_from?()","void?()","with_block?()","with_dependencies?()","word()","word()","word()","workspace_config_path()","workspace_filenames()","workspaced?()","would_merge?()","would_require?()","write()","write()","yard_map()","yardoc_file()","yardoc_file_for_spec()","yardoc_stdlib_file()","yardocs()","yielded_self_pins()"],"longSearchIndex":["file","solargraph","solargraph::apimap","solargraph::apimap::bundlermethods","solargraph::apimap::cache","solargraph::apimap::sourcetoyard","solargraph::apimap::store","solargraph::bundle","solargraph::bundlenotfounderror","solargraph::complextype","solargraph::complextype::typemethods","solargraph::complextype::uniquetype","solargraph::complextypeerror","solargraph::convention","solargraph::convention::base","solargraph::convention::gemfile","solargraph::convention::gemspec","solargraph::convention::rspec","solargraph::corefills","solargraph::diagnostics","solargraph::diagnostics::base","solargraph::diagnostics::requirenotfound","solargraph::diagnostics::rubocop","solargraph::diagnostics::rubocophelpers","solargraph::diagnostics::severities","solargraph::diagnostics::typecheck","solargraph::diagnostics::updateerrors","solargraph::diagnosticserror","solargraph::documentor","solargraph::domaindirective","solargraph::environ","solargraph::filenotfounderror","solargraph::invalidoffseterror","solargraph::languageserver","solargraph::languageserver::completionitemkinds","solargraph::languageserver::errorcodes","solargraph::languageserver::host","solargraph::languageserver::host::cataloger","solargraph::languageserver::host::diagnoser","solargraph::languageserver::host::dispatch","solargraph::languageserver::host::sources","solargraph::languageserver::message","solargraph::languageserver::message::base","solargraph::languageserver::message::cancelrequest","solargraph::languageserver::message::client","solargraph::languageserver::message::client::registercapability","solargraph::languageserver::message::completionitem","solargraph::languageserver::message::completionitem::resolve","solargraph::languageserver::message::exitnotification","solargraph::languageserver::message::extended","solargraph::languageserver::message::extended::checkgemversion","solargraph::languageserver::message::extended::document","solargraph::languageserver::message::extended::documentgems","solargraph::languageserver::message::extended::downloadcore","solargraph::languageserver::message::extended::environment","solargraph::languageserver::message::extended::search","solargraph::languageserver::message::initialize","solargraph::languageserver::message::initialized","solargraph::languageserver::message::methodnotfound","solargraph::languageserver::message::methodnotimplemented","solargraph::languageserver::message::shutdown","solargraph::languageserver::message::textdocument","solargraph::languageserver::message::textdocument::base","solargraph::languageserver::message::textdocument::codeaction","solargraph::languageserver::message::textdocument::completion","solargraph::languageserver::message::textdocument::definition","solargraph::languageserver::message::textdocument::didchange","solargraph::languageserver::message::textdocument::didclose","solargraph::languageserver::message::textdocument::didopen","solargraph::languageserver::message::textdocument::didsave","solargraph::languageserver::message::textdocument::documentsymbol","solargraph::languageserver::message::textdocument::foldingrange","solargraph::languageserver::message::textdocument::formatting","solargraph::languageserver::message::textdocument::hover","solargraph::languageserver::message::textdocument::ontypeformatting","solargraph::languageserver::message::textdocument::preparerename","solargraph::languageserver::message::textdocument::references","solargraph::languageserver::message::textdocument::rename","solargraph::languageserver::message::textdocument::signaturehelp","solargraph::languageserver::message::workspace","solargraph::languageserver::message::workspace::didchangeconfiguration","solargraph::languageserver::message::workspace::didchangewatchedfiles","solargraph::languageserver::message::workspace::didchangeworkspacefolders","solargraph::languageserver::message::workspace::workspacesymbol","solargraph::languageserver::messagetypes","solargraph::languageserver::request","solargraph::languageserver::symbolkinds","solargraph::languageserver::transport","solargraph::languageserver::transport::adapter","solargraph::languageserver::transport::datareader","solargraph::languageserver::urihelpers","solargraph::library","solargraph::location","solargraph::logging","solargraph::page","solargraph::page::binder","solargraph::pin","solargraph::pin::attribute","solargraph::pin::base","solargraph::pin::basemethod","solargraph::pin::basevariable","solargraph::pin::block","solargraph::pin::classvariable","solargraph::pin::closure","solargraph::pin::common","solargraph::pin::constant","solargraph::pin::conversions","solargraph::pin::documenting","solargraph::pin::duckmethod","solargraph::pin::globalvariable","solargraph::pin::instancevariable","solargraph::pin::keyword","solargraph::pin::keywordparam","solargraph::pin::localvariable","solargraph::pin::localized","solargraph::pin::method","solargraph::pin::methodalias","solargraph::pin::namespace","solargraph::pin::parameter","solargraph::pin::proxytype","solargraph::pin::reference","solargraph::pin::reference::extend","solargraph::pin::reference::include","solargraph::pin::reference::override","solargraph::pin::reference::require","solargraph::pin::reference::superclass","solargraph::pin::singleton","solargraph::pin::symbol","solargraph::pin::yardpin","solargraph::pin::yardpin::constant","solargraph::pin::yardpin::method","solargraph::pin::yardpin::namespace","solargraph::pin::yardpin::yardmixin","solargraph::position","solargraph::range","solargraph::servermethods","solargraph::shell","solargraph::source","solargraph::source::chain","solargraph::source::chain::blockvariable","solargraph::source::chain::call","solargraph::source::chain::classvariable","solargraph::source::chain::constant","solargraph::source::chain::globalvariable","solargraph::source::chain::head","solargraph::source::chain::instancevariable","solargraph::source::chain::link","solargraph::source::chain::literal","solargraph::source::chain::or","solargraph::source::chain::variable","solargraph::source::change","solargraph::source::cursor","solargraph::source::encodingfixes","solargraph::source::flawedbuilder","solargraph::source::nodechainer","solargraph::source::nodemethods","solargraph::source::nodemethods::deepinference","solargraph::source::sourcechainer","solargraph::source::updater","solargraph::sourcemap","solargraph::sourcemap::clip","solargraph::sourcemap::completion","solargraph::sourcemap::mapper","solargraph::sourcemap::nodeprocessor","solargraph::sourcemap::nodeprocessor::aliasnode","solargraph::sourcemap::nodeprocessor::argsnode","solargraph::sourcemap::nodeprocessor::base","solargraph::sourcemap::nodeprocessor::beginnode","solargraph::sourcemap::nodeprocessor::blocknode","solargraph::sourcemap::nodeprocessor::casgnnode","solargraph::sourcemap::nodeprocessor::cvasgnnode","solargraph::sourcemap::nodeprocessor::defnode","solargraph::sourcemap::nodeprocessor::defsnode","solargraph::sourcemap::nodeprocessor::gvasgnnode","solargraph::sourcemap::nodeprocessor::ivasgnnode","solargraph::sourcemap::nodeprocessor::lvasgnnode","solargraph::sourcemap::nodeprocessor::namespacenode","solargraph::sourcemap::nodeprocessor::orasgnnode","solargraph::sourcemap::nodeprocessor::resbodynode","solargraph::sourcemap::nodeprocessor::sclassnode","solargraph::sourcemap::nodeprocessor::sendnode","solargraph::sourcemap::nodeprocessor::symnode","solargraph::sourcemap::region","solargraph::sourcenotavailableerror","solargraph::typechecker","solargraph::typechecker::paramdef","solargraph::typechecker::problem","solargraph::workspace","solargraph::workspace::config","solargraph::workspacetoolargeerror","solargraph::yardmap","solargraph::yardmap::cache","solargraph::yardmap::coredocs","solargraph::yardmap::coregen","solargraph::yardmap::mapper","solargraph::yardmap::rdoctoyard","yard","yard::tags","solargraph::complextype::typemethods#==()","solargraph::location#==()","solargraph::pin::base#==()","solargraph::pin::basevariable#==()","solargraph::position#==()","solargraph::range#==()","solargraph::source::chain::link#==()","solargraph::complextype#[]()","solargraph::sourcemap#_locate_pin()","solargraph::languageserver::message::workspace::didchangeworkspacefolders#add_folders()","solargraph::yardmap#add_gem_dependencies()","solargraph::complextype#all?()","solargraph::apimap::store#all_instance_variables()","solargraph::workspace::config#allow?()","solargraph::languageserver::host#allow_registration()","solargraph::pin::proxytype::anonymous()","solargraph::library#api_map()","solargraph::typechecker#arg_to_duck()","solargraph::typechecker::paramdef::arg_type()","solargraph::source::cursor#argument?()","solargraph::source::chain::call#arguments_match()","solargraph::source#associated_comments()","solargraph::languageserver::host::sources#async_update()","solargraph::source#at()","solargraph::library#attach()","solargraph::library#attached?()","solargraph::languageserver::message::extended::checkgemversion#available()","solargraph::yardmap::coredocs::available()","solargraph::shell#available_cores()","solargraph::servermethods#available_port()","solargraph::source::chain#base()","solargraph::yardmap::rdoctoyard::base_name()","solargraph::yardmap::coredocs::best_download()","solargraph::yardmap::coredocs::best_match()","solargraph::pin::block#binder()","solargraph::pin::closure#binder()","solargraph::pin::common#binder()","solargraph::pin::instancevariable#binder()","solargraph::pin::namespace#binder()","solargraph::sourcemap::clip#block()","solargraph::source::nodechainer#block_passed?()","solargraph::sourcemap::nodeprocessor::base#block_pin()","solargraph::apimap::store#block_pins()","solargraph::library#bundle()","solargraph::shell#bundle()","solargraph::apimap#bundled?()","solargraph::apimap#cache()","solargraph::yardmap#cache()","solargraph::yardmap::coredocs::cache_dir()","solargraph::workspace::config#calculated()","solargraph::domaindirective#call()","solargraph::languageserver::host#can_register?()","solargraph::languageserver::host#cancel()","solargraph::languageserver::host#cancel?()","solargraph::apimap#catalog()","solargraph::languageserver::host#catalog()","solargraph::library#catalog()","solargraph::languageserver::host#cataloger()","solargraph::source::cursor#chain()","solargraph::source::nodechainer#chain()","solargraph::source::nodechainer::chain()","solargraph::source::sourcechainer::chain()","solargraph::source::sourcechainer#chain()","solargraph::languageserver::host#change()","solargraph::yardmap#change()","solargraph::typechecker#check_hash_params()","solargraph::typechecker#check_param_tags()","solargraph::typechecker#check_return_type()","solargraph::typechecker#check_send_args()","solargraph::apimap::cache#clear()","solargraph::environ#clear()","solargraph::languageserver::host#clear()","solargraph::languageserver::host::sources#clear()","solargraph::shell#clear()","solargraph::yardmap::coredocs::clear()","solargraph::languageserver::host#client_capabilities()","solargraph::apimap#clip()","solargraph::apimap#clip_at()","solargraph::languageserver::host#close()","solargraph::languageserver::host::sources#close()","solargraph::library#close()","solargraph::languageserver::transport::adapter#closing()","solargraph::sourcemap::mapper#closure_at()","solargraph::sourcemap::nodeprocessor::base#closure_pin()","solargraph::sourcemap#code()","solargraph::source#code_for()","solargraph::sourcemap::region#code_for()","solargraph::languageserver::message::textdocument::definition#code_location()","solargraph::apimap::sourcetoyard#code_object_at()","solargraph::apimap::sourcetoyard#code_object_map()","solargraph::apimap::sourcetoyard#code_object_paths()","solargraph::pin::base#collect_macros()","solargraph::diagnostics::updateerrors#combine_ranges()","solargraph::source::cursor#comment?()","solargraph::source#comment_at?()","solargraph::source#comment_ranges()","solargraph::yardmap::rdoctoyard::commentary()","solargraph::pin::base#comments()","solargraph::pin::common#comments()","solargraph::pin::symbol#comments()","solargraph::pin::yardpin::yardmixin#comments()","solargraph::source#comments_for()","solargraph::sourcemap::nodeprocessor::base#comments_for()","solargraph::source::change#commit()","solargraph::pin::base#compare_directives()","solargraph::pin::base#compare_docstring_tags()","solargraph::pin::base#compare_tags()","solargraph::sourcemap::clip#complete()","solargraph::sourcemap::clip#complete_keyword_parameters()","solargraph::pin::conversions#completion_item()","solargraph::pin::attribute#completion_item_kind()","solargraph::pin::base#completion_item_kind()","solargraph::pin::basevariable#completion_item_kind()","solargraph::pin::constant#completion_item_kind()","solargraph::pin::method#completion_item_kind()","solargraph::pin::namespace#completion_item_kind()","solargraph::pin::symbol#completion_item_kind()","solargraph::languageserver::host#completions_at()","solargraph::library#completions_at()","solargraph::shell#config()","solargraph::workspace#config()","solargraph::workspace::config#config_data()","solargraph::languageserver::host#configure()","solargraph::workspace#configured_require_paths()","solargraph::typechecker#confirm_return_type()","solargraph::source::nodemethods#const_from()","solargraph::source::chain#constant?()","solargraph::source::chain::link#constant?()","solargraph::library#contain?()","solargraph::range#contain?()","solargraph::pin::closure#context()","solargraph::pin::common#context()","solargraph::pin::instancevariable#context()","solargraph::pin::proxytype#context()","solargraph::sourcemap::clip#context_pin()","solargraph::yardmap#core_pins()","solargraph::source::chain::constant#crawl_gates()","solargraph::languageserver::host#create()","solargraph::library#create()","solargraph::library#create_from_disk()","solargraph::apimap#cursor_at()","solargraph::source#cursor_at()","solargraph::sourcemap#cursor_at()","solargraph::workspace::config#default_config()","solargraph::languageserver::host#default_configuration()","solargraph::source::chain#define()","solargraph::sourcemap::clip#define()","solargraph::complextype::typemethods#defined?()","solargraph::source::chain#defined?()","solargraph::languageserver::host#definitions_at()","solargraph::library#definitions_at()","solargraph::languageserver::host#delete()","solargraph::library#delete()","solargraph::pin::base#deprecated?()","solargraph::pin::symbol#deprecated?()","solargraph::library#detach()","solargraph::pin::conversions#detail()","solargraph::diagnostics::base#diagnose()","solargraph::diagnostics::requirenotfound#diagnose()","solargraph::diagnostics::rubocop#diagnose()","solargraph::diagnostics::typecheck#diagnose()","solargraph::diagnostics::updateerrors#diagnose()","solargraph::languageserver::host#diagnose()","solargraph::library#diagnose()","solargraph::languageserver::host#diagnoser()","solargraph::pin::base#directives()","solargraph::pin::symbol#directives()","solargraph::pin::base#docstring()","solargraph::apimap#document()","solargraph::documentor#document()","solargraph::languageserver::host#document()","solargraph::library#document()","solargraph::apimap#document_symbols()","solargraph::languageserver::host#document_symbols()","solargraph::library#document_symbols()","solargraph::sourcemap#document_symbols()","solargraph::pin::documenting#documentation()","solargraph::pin::method#documentation()","solargraph::pin::parameter#documentation()","solargraph::apimap::store#domains()","solargraph::pin::namespace#domains()","solargraph::workspace::config#domains()","solargraph::yardmap::coredocs::download()","solargraph::shell#download_core()","solargraph::source::nodemethods#drill_signature()","solargraph::complextype::typemethods#duck_type?()","solargraph::languageserver::host#dynamic_capability_options()","solargraph::languageserver::message::initialize#dynamic_registration_for?()","solargraph::complextype#each()","solargraph::apimap::cache#empty?()","solargraph::languageserver::message::textdocument::completion#empty_result()","solargraph::source::sourcechainer#end_of_phrase()","solargraph::source::cursor#end_of_word()","solargraph::source::cursor#end_word_pattern()","solargraph::convention::base#environ()","solargraph::convention::gemfile#environ()","solargraph::convention::gemspec#environ()","solargraph::convention::rspec#environ()","solargraph::sourcemap#environ()","solargraph::source#error_ranges()","solargraph::workspace::config#excluded()","solargraph::workspace::config#excluded_directories()","solargraph::languageserver::host::dispatch#explicit_library_for()","solargraph::apimap::store#extend_references()","solargraph::source::chain::call#extra_return_type()","solargraph::diagnostics::typecheck#extract_first_line()","solargraph::languageserver::message::extended::checkgemversion#fetched?()","solargraph::languageserver::urihelpers#file_to_uri()","solargraph::pin::base#filename()","solargraph::source::cursor#filename()","solargraph::sourcemap#filename()","solargraph::sourcemap::region#filename()","solargraph::workspace#filenames()","solargraph::languageserver::host::sources#find()","solargraph::pin::common#find_context()","solargraph::sourcemap::mapper#find_directive_line_number()","solargraph::yardmap::rdoctoyard::find_file()","solargraph::diagnostics::rubocophelpers#find_rubocop_file()","solargraph::source#finish_synchronize()","solargraph::complextype#first()","solargraph::source::cursor#first_char_offset()","solargraph::sourcemap#first_pin()","solargraph::diagnostics::rubocophelpers#fix_drive_letter()","solargraph::complextype::typemethods#fixed_parameters?()","solargraph::source::sourcechainer#fixed_phrase()","solargraph::source::sourcechainer#fixed_position()","solargraph::languageserver::host#flush()","solargraph::source#foldable_comment_block_ranges()","solargraph::languageserver::host#folders()","solargraph::languageserver::host#folding_ranges()","solargraph::library#folding_ranges()","solargraph::source#folding_ranges()","solargraph::convention::for()","solargraph::languageserver::message::textdocument::formatting#format()","solargraph::apimap::store#fqns_pins()","solargraph::typechecker::paramdef::from()","solargraph::pin::reference::override::from_comment()","solargraph::range::from_expr()","solargraph::range::from_node()","solargraph::position::from_offset()","solargraph::range::from_to()","solargraph::source#from_to()","solargraph::pin::common#full_context()","solargraph::pin::namespace#full_context()","solargraph::sourcemap#fuzzy_string_match()","solargraph::pin::closure#gates()","solargraph::pin::namespace#gates()","solargraph::sourcemap::clip#gates()","solargraph::workspace#gemspec?()","solargraph::workspace#gemspecs()","solargraph::pin::basemethod#generate_complex_type()","solargraph::pin::basevariable#generate_complex_type()","solargraph::yardmap::coregen::generate_docs()","solargraph::yardmap::coregen::generate_gzip()","solargraph::pin::conversions#generate_link()","solargraph::source::nodechainer#generate_links()","solargraph::diagnostics::rubocophelpers#generate_options()","solargraph::yardmap::mapper#generate_pins()","solargraph::workspace#generate_require_paths()","solargraph::languageserver::host#generate_updater()","solargraph::languageserver::host::dispatch#generic_library()","solargraph::languageserver::host::dispatch#generic_library_for()","solargraph::apimap#get_class_variable_pins()","solargraph::apimap::store#get_class_variables()","solargraph::apimap#get_complex_type_methods()","solargraph::apimap#get_constants()","solargraph::apimap::cache#get_constants()","solargraph::apimap::store#get_constants()","solargraph::apimap::store#get_extends()","solargraph::apimap#get_global_variable_pins()","solargraph::apimap::store#get_includes()","solargraph::apimap#get_instance_variable_pins()","solargraph::apimap::store#get_instance_variables()","solargraph::apimap#get_method_stack()","solargraph::apimap#get_methods()","solargraph::apimap::cache#get_methods()","solargraph::apimap::store#get_methods()","solargraph::apimap#get_namespace_type()","solargraph::source::nodemethods#get_node_end_position()","solargraph::sourcemap::nodeprocessor::base#get_node_location()","solargraph::source::nodemethods#get_node_start_position()","solargraph::source::sourcechainer#get_offset()","solargraph::pin::yardpin::method#get_parameters()","solargraph::apimap#get_path_pins()","solargraph::apimap::store#get_path_pins()","solargraph::library#get_path_pins()","solargraph::yardmap::cache#get_path_pins()","solargraph::apimap#get_path_suggestions()","solargraph::apimap::cache#get_qualified_namespace()","solargraph::apimap::cache#get_receiver_definition()","solargraph::source::nodemethods::deepinference::get_return_nodes()","solargraph::source::nodemethods::deepinference::get_return_nodes_from_children()","solargraph::source::nodemethods::deepinference::get_return_nodes_only()","solargraph::source::sourcechainer#get_signature_data_at()","solargraph::apimap::store#get_superclass()","solargraph::apimap#get_symbols()","solargraph::apimap::store#get_symbols()","solargraph::workspace::config#glob_is_directory?()","solargraph::workspace::config#glob_to_directory()","solargraph::workspace::config#global_config_path()","solargraph::yardmap::coregen::gzip()","solargraph::workspace#has_file?()","solargraph::complextype::typemethods#hash_parameters?()","solargraph::page::binder#htmlify()","solargraph::pin::base#identity()","solargraph::apimap#implicit()","solargraph::languageserver::host::dispatch#implicit_library_for()","solargraph::languageserver::host::sources#include?()","solargraph::range#include?()","solargraph::apimap::store#include_references()","solargraph::workspace::config#included()","solargraph::apimap#index()","solargraph::apimap::store#index()","solargraph::pin::parameter#index()","solargraph::pin::base#infer()","solargraph::source::chain#infer()","solargraph::sourcemap::clip#infer()","solargraph::source::chain#infer_first_defined()","solargraph::pin::method#infer_from_return_nodes()","solargraph::source::nodemethods#infer_literal_node_type()","solargraph::source::chain::call#inferred_pins()","solargraph::source#inner_folding_ranges()","solargraph::apimap#inner_get_constants()","solargraph::apimap#inner_get_methods()","solargraph::source#inner_node_references()","solargraph::source::chain::call#inner_process_macro()","solargraph::apimap#inner_qualify()","solargraph::source#inner_tree_at()","solargraph::apimap::store#inspect()","solargraph::library#inspect()","solargraph::location#inspect()","solargraph::pin::base#inspect()","solargraph::position#inspect()","solargraph::range#inspect()","solargraph::yardmap::coredocs::install_archive()","solargraph::languageserver::message::completionitem::resolve#join_docs()","solargraph::complextype::typemethods#key_types()","solargraph::apimap::keywords()","solargraph::diagnostics::typecheck#last_character()","solargraph::complextype#length()","solargraph::languageserver::host::dispatch#libraries()","solargraph::languageserver::host::dispatch#library_for()","solargraph::position::line_char_to_offset()","solargraph::pin::conversions#link_documentation()","solargraph::shell#list_cores()","solargraph::complextype::typemethods#list_parameters?()","solargraph::source::chain#literal?()","solargraph::apimap::load()","solargraph::library::load()","solargraph::source::load()","solargraph::sourcemap::load()","solargraph::typechecker::load()","solargraph::workspace#load_sources()","solargraph::source::load_string()","solargraph::source::nodechainer::load_string()","solargraph::sourcemap::load_string()","solargraph::typechecker::load_string()","solargraph::yardmap#load_yardoc()","solargraph::apimap#local_path_hash()","solargraph::sourcemap::clip#locals()","solargraph::sourcemap#locals_at()","solargraph::yardmap::rdoctoyard::locate()","solargraph::sourcemap#locate_block_pin()","solargraph::sourcemap#locate_named_path_pin()","solargraph::apimap#locate_pins()","solargraph::languageserver::host#locate_pins()","solargraph::library#locate_pins()","solargraph::sourcemap#locate_pins()","solargraph::library#locate_ref()","solargraph::pin::yardpin::yardmixin#location()","solargraph::source#location()","solargraph::logger()","solargraph::logging#logger()","solargraph::pin::base#macros()","solargraph::diagnostics::rubocop#make_array()","solargraph::apimap#map()","solargraph::complextype#map()","solargraph::sourcemap::map()","solargraph::sourcemap::mapper::map()","solargraph::sourcemap::mapper#map()","solargraph::yardmap::mapper#map()","solargraph::languageserver::message::completionitem::resolve#markup_content()","solargraph::convention::base#match?()","solargraph::convention::gemfile#match?()","solargraph::convention::gemspec#match?()","solargraph::convention::rspec#match?()","solargraph::workspace::config#max_files()","solargraph::pin::base#maybe_directives?()","solargraph::environ#merge()","solargraph::languageserver::message::completionitem::resolve#merge()","solargraph::library#merge()","solargraph::workspace#merge()","solargraph::sourcemap::nodeprocessor::base#method_args()","solargraph::pin::method#method_body_node()","solargraph::languageserver::message::method_map()","solargraph::complextype#method_missing()","solargraph::apimap::store#method_pins()","solargraph::pin::reference::override::method_return()","solargraph::typechecker#more_signature?()","solargraph::languageserver::host::sources#mutex()","solargraph::library#mutex()","solargraph::pin::common#name()","solargraph::pin::keyword#name()","solargraph::apimap#named_macro()","solargraph::apimap::store#named_macros()","solargraph::sourcemap::nodeprocessor::base#named_path_pin()","solargraph::complextype::typemethods#namespace()","solargraph::pin::common#namespace()","solargraph::pin::namespace#namespace()","solargraph::pin::symbol#namespace()","solargraph::apimap::store#namespace_children()","solargraph::apimap#namespace_exists?()","solargraph::apimap::store#namespace_exists?()","solargraph::apimap::store#namespace_map()","solargraph::apimap::store#namespace_pins()","solargraph::pin::yardpin::namespace#namespace_type()","solargraph::apimap#namespaces()","solargraph::apimap::store#namespaces()","solargraph::pin::base#nearly?()","solargraph::pin::block#nearly?()","solargraph::pin::instancevariable#nearly?()","solargraph::pin::method#nearly?()","solargraph::apimap::new()","solargraph::apimap::cache::new()","solargraph::apimap::store::new()","solargraph::bundle::new()","solargraph::complextype::new()","solargraph::complextype::uniquetype::new()","solargraph::diagnostics::base::new()","solargraph::documentor::new()","solargraph::environ::new()","solargraph::languageserver::host::new()","solargraph::languageserver::host::cataloger::new()","solargraph::languageserver::host::diagnoser::new()","solargraph::languageserver::host::sources::new()","solargraph::languageserver::message::base::new()","solargraph::languageserver::message::extended::checkgemversion::new()","solargraph::languageserver::request::new()","solargraph::languageserver::transport::datareader::new()","solargraph::library::new()","solargraph::location::new()","solargraph::page::new()","solargraph::page::binder::new()","solargraph::pin::attribute::new()","solargraph::pin::base::new()","solargraph::pin::basemethod::new()","solargraph::pin::basevariable::new()","solargraph::pin::block::new()","solargraph::pin::closure::new()","solargraph::pin::constant::new()","solargraph::pin::keyword::new()","solargraph::pin::localvariable::new()","solargraph::pin::method::new()","solargraph::pin::methodalias::new()","solargraph::pin::namespace::new()","solargraph::pin::proxytype::new()","solargraph::pin::reference::override::new()","solargraph::pin::reference::require::new()","solargraph::pin::singleton::new()","solargraph::pin::symbol::new()","solargraph::pin::yardpin::constant::new()","solargraph::pin::yardpin::method::new()","solargraph::pin::yardpin::namespace::new()","solargraph::position::new()","solargraph::range::new()","solargraph::source::new()","solargraph::source::chain::new()","solargraph::source::chain::call::new()","solargraph::source::chain::constant::new()","solargraph::source::chain::link::new()","solargraph::source::chain::literal::new()","solargraph::source::chain::or::new()","solargraph::source::change::new()","solargraph::source::cursor::new()","solargraph::source::nodechainer::new()","solargraph::source::sourcechainer::new()","solargraph::source::updater::new()","solargraph::sourcemap::new()","solargraph::sourcemap::clip::new()","solargraph::sourcemap::completion::new()","solargraph::sourcemap::nodeprocessor::base::new()","solargraph::sourcemap::region::new()","solargraph::typechecker::new()","solargraph::typechecker::paramdef::new()","solargraph::typechecker::problem::new()","solargraph::workspace::new()","solargraph::workspace::config::new()","solargraph::yardmap::new()","solargraph::yardmap::cache::new()","solargraph::yardmap::mapper::new()","solargraph::pin::basevariable#nil_assignment?()","solargraph::complextype::typemethods#nil_type?()","solargraph::source#node_at()","solargraph::source::cursor#node_position()","solargraph::position::normalize()","solargraph::source::encodingfixes#normalize()","solargraph::pin::documenting#normalize_indentation()","solargraph::languageserver::host#normalize_separators()","solargraph::pin::yardpin::yardmixin#object_location()","solargraph::diagnostics::rubocop#offense_ending_position()","solargraph::diagnostics::rubocop#offense_range()","solargraph::diagnostics::rubocop#offense_start_position()","solargraph::diagnostics::rubocop#offense_to_diagnostic()","solargraph::source::cursor#offset()","solargraph::source::sourcechainer#offset()","solargraph::languageserver::host#open()","solargraph::languageserver::host::sources#open()","solargraph::languageserver::host#open?()","solargraph::library#open?()","solargraph::languageserver::host#open_from_disk()","solargraph::languageserver::host::sources#open_from_disk()","solargraph::languageserver::host::sources#open_source_hash()","solargraph::languageserver::transport::adapter#opening()","solargraph::languageserver::host#options()","solargraph::pin::method#overloads()","solargraph::source::nodemethods#pack_name()","solargraph::sourcemap::clip#package_completions()","solargraph::pin::parameter#param_tag()","solargraph::typechecker#param_tags_from()","solargraph::typechecker#param_type_problems()","solargraph::pin::basemethod#parameter_names()","solargraph::pin::block#parameter_names()","solargraph::pin::method#parameter_names()","solargraph::pin::basemethod#parameters()","solargraph::pin::block#parameters()","solargraph::pin::yardpin::method#parameters()","solargraph::complextype::typemethods#parameters?()","solargraph::complextype::parse()","solargraph::source::parse()","solargraph::pin::base#parse_comments()","solargraph::source::parse_docstring()","solargraph::languageserver::transport::datareader#parse_message_from_buffer()","solargraph::source::parse_with_comments()","solargraph::source#parsed?()","solargraph::source::parser()","solargraph::pin::attribute#path()","solargraph::pin::basemethod#path()","solargraph::pin::common#path()","solargraph::pin::constant#path()","solargraph::pin::methodalias#path()","solargraph::pin::namespace#path()","solargraph::pin::symbol#path()","solargraph::apimap#path_macros()","solargraph::yardmap#path_pin()","solargraph::apimap::store#path_pin_hash()","solargraph::library#path_pins()","solargraph::languageserver::host#pending_requests()","solargraph::source::sourcechainer#phrase()","solargraph::shell#pin_description()","solargraph::apimap#pins()","solargraph::sourcemap::mapper#pins()","solargraph::yardmap#pins()","solargraph::languageserver::message::base#post_initialize()","solargraph::languageserver::message::textdocument::base#post_initialize()","solargraph::apimap#prefer_non_nil_variables()","solargraph::languageserver::host#prepare()","solargraph::languageserver::host#prepare_folders()","solargraph::languageserver::host#prepare_rename?()","solargraph::languageserver::transport::datareader#prepare_to_parse_message()","solargraph::pin::attribute#probe()","solargraph::pin::base#probe()","solargraph::pin::basevariable#probe()","solargraph::pin::method#probe()","solargraph::pin::parameter#probe()","solargraph::pin::base#probed?()","solargraph::convention::base#process()","solargraph::languageserver::message::base#process()","solargraph::languageserver::message::cancelrequest#process()","solargraph::languageserver::message::client::registercapability#process()","solargraph::languageserver::message::completionitem::resolve#process()","solargraph::languageserver::message::exitnotification#process()","solargraph::languageserver::message::extended::checkgemversion#process()","solargraph::languageserver::message::extended::document#process()","solargraph::languageserver::message::extended::documentgems#process()","solargraph::languageserver::message::extended::downloadcore#process()","solargraph::languageserver::message::extended::environment#process()","solargraph::languageserver::message::extended::search#process()","solargraph::languageserver::message::initialize#process()","solargraph::languageserver::message::initialized#process()","solargraph::languageserver::message::methodnotfound#process()","solargraph::languageserver::message::methodnotimplemented#process()","solargraph::languageserver::message::shutdown#process()","solargraph::languageserver::message::textdocument::codeaction#process()","solargraph::languageserver::message::textdocument::completion#process()","solargraph::languageserver::message::textdocument::definition#process()","solargraph::languageserver::message::textdocument::didchange#process()","solargraph::languageserver::message::textdocument::didclose#process()","solargraph::languageserver::message::textdocument::didopen#process()","solargraph::languageserver::message::textdocument::didsave#process()","solargraph::languageserver::message::textdocument::documentsymbol#process()","solargraph::languageserver::message::textdocument::foldingrange#process()","solargraph::languageserver::message::textdocument::formatting#process()","solargraph::languageserver::message::textdocument::hover#process()","solargraph::languageserver::message::textdocument::ontypeformatting#process()","solargraph::languageserver::message::textdocument::preparerename#process()","solargraph::languageserver::message::textdocument::references#process()","solargraph::languageserver::message::textdocument::rename#process()","solargraph::languageserver::message::textdocument::signaturehelp#process()","solargraph::languageserver::message::workspace::didchangeconfiguration#process()","solargraph::languageserver::message::workspace::didchangewatchedfiles#process()","solargraph::languageserver::message::workspace::didchangeworkspacefolders#process()","solargraph::languageserver::message::workspace::workspacesymbol#process()","solargraph::languageserver::request#process()","solargraph::languageserver::transport::adapter#process()","solargraph::sourcemap::nodeprocessor::process()","solargraph::sourcemap::nodeprocessor::aliasnode#process()","solargraph::sourcemap::nodeprocessor::argsnode#process()","solargraph::sourcemap::nodeprocessor::base#process()","solargraph::sourcemap::nodeprocessor::beginnode#process()","solargraph::sourcemap::nodeprocessor::blocknode#process()","solargraph::sourcemap::nodeprocessor::casgnnode#process()","solargraph::sourcemap::nodeprocessor::cvasgnnode#process()","solargraph::sourcemap::nodeprocessor::defnode#process()","solargraph::sourcemap::nodeprocessor::defsnode#process()","solargraph::sourcemap::nodeprocessor::gvasgnnode#process()","solargraph::sourcemap::nodeprocessor::ivasgnnode#process()","solargraph::sourcemap::nodeprocessor::lvasgnnode#process()","solargraph::sourcemap::nodeprocessor::namespacenode#process()","solargraph::sourcemap::nodeprocessor::orasgnnode#process()","solargraph::sourcemap::nodeprocessor::resbodynode#process()","solargraph::sourcemap::nodeprocessor::sclassnode#process()","solargraph::sourcemap::nodeprocessor::sendnode#process()","solargraph::sourcemap::nodeprocessor::symnode#process()","solargraph::sourcemap::nodeprocessor::sendnode#process_alias_method()","solargraph::sourcemap::nodeprocessor::sendnode#process_attribute()","solargraph::sourcemap::nodeprocessor::base#process_children()","solargraph::sourcemap::mapper#process_comment()","solargraph::sourcemap::mapper#process_comment_directives()","solargraph::source::chain::call#process_directive()","solargraph::sourcemap::mapper#process_directive()","solargraph::workspace::config#process_exclusions()","solargraph::sourcemap::nodeprocessor::sendnode#process_extend()","solargraph::workspace::config#process_globs()","solargraph::sourcemap::nodeprocessor::sendnode#process_include()","solargraph::source::chain::call#process_macro()","solargraph::sourcemap::nodeprocessor::sendnode#process_module_function()","solargraph::sourcemap::nodeprocessor::sendnode#process_private_class_method()","solargraph::sourcemap::nodeprocessor::sendnode#process_private_constant()","solargraph::sourcemap::nodeprocessor::sendnode#process_require()","solargraph::yardmap#process_requires()","solargraph::yardmap#process_stdlib()","solargraph::yardmap#process_yardoc()","solargraph::pin::base#proxied?()","solargraph::pin::base#proxy()","solargraph::apimap#qualify()","solargraph::complextype#qualify()","solargraph::complextype::typemethods#qualify()","solargraph::apimap#qualify_lower()","solargraph::apimap#query_symbols()","solargraph::languageserver::host#query_symbols()","solargraph::library#query_symbols()","solargraph::sourcemap#query_symbols()","solargraph::languageserver::host#queue()","solargraph::languageserver::host::sources#queue()","solargraph::apimap::sourcetoyard#rake_yard()","solargraph::source::cursor#range()","solargraph::shell#rdoc()","solargraph::library#read()","solargraph::workspace::config#read_config()","solargraph::languageserver::host#read_text()","solargraph::library#read_text()","solargraph::pin::base#realize()","solargraph::pin::block#rebind()","solargraph::source::chain#rebind_block()","solargraph::pin::block#rebound?()","solargraph::languageserver::host#receive()","solargraph::languageserver::transport::datareader#receive()","solargraph::source::cursor#receiver()","solargraph::apimap::cache#receiver_defined?()","solargraph::languageserver::transport::adapter#receiving()","solargraph::source::cursor#recipient()","solargraph::source::cursor#recipient_node()","solargraph::yardmap#recurse_namespace_object()","solargraph::diagnostics::rubocop#redirect_stdout()","solargraph::complextype#reduce_class()","solargraph::source::nodemethods::deepinference::reduce_to_value_nodes()","solargraph::source#references()","solargraph::sourcemap#references()","solargraph::languageserver::host#references_from()","solargraph::library#references_from()","solargraph::convention::register()","solargraph::diagnostics::register()","solargraph::languageserver::message::register()","solargraph::sourcemap::nodeprocessor::register()","solargraph::languageserver::host#register_capabilities()","solargraph::languageserver::message::workspace::didchangeconfiguration#register_from_options()","solargraph::languageserver::host#registered?()","solargraph::source::chain#remember_or_probe()","solargraph::languageserver::host#remove()","solargraph::workspace#remove()","solargraph::languageserver::host#remove_folders()","solargraph::languageserver::message::workspace::didchangeworkspacefolders#remove_folders()","solargraph::sourcemap::mapper#remove_inline_comment_hashes()","solargraph::pin::documenting#remove_odd_spaces()","solargraph::page#render()","solargraph::source::change#repair()","solargraph::source::updater#repair()","solargraph::source#repaired?()","solargraph::typechecker#report_location?()","solargraph::diagnostics::reporter()","solargraph::diagnostics::reporter_hash()","solargraph::diagnostics::reporters()","solargraph::shell#reporters()","solargraph::workspace::config#reporters()","solargraph::languageserver::host#requests()","solargraph::diagnostics::requirenotfound#require_error()","solargraph::apimap::bundlermethods#require_from_bundle()","solargraph::languageserver::message::textdocument::definition#require_location()","solargraph::yardmap::coredocs::require_minimum()","solargraph::workspace#require_paths()","solargraph::workspace::config#require_paths()","solargraph::yardmap#require_reference()","solargraph::apimap#require_reference_at()","solargraph::workspace::config#required()","solargraph::sourcemap#requires()","solargraph::pin::conversions#reset_conversions()","solargraph::apimap::bundlermethods#reset_require_from_bundle()","solargraph::source::chain::blockvariable#resolve()","solargraph::source::chain::call#resolve()","solargraph::source::chain::classvariable#resolve()","solargraph::source::chain::constant#resolve()","solargraph::source::chain::globalvariable#resolve()","solargraph::source::chain::head#resolve()","solargraph::source::chain::instancevariable#resolve()","solargraph::source::chain::link#resolve()","solargraph::source::chain::literal#resolve()","solargraph::source::chain::or#resolve()","solargraph::source::chain::variable#resolve()","solargraph::pin::conversions#resolve_completion_item()","solargraph::apimap#resolve_method_alias()","solargraph::apimap#resolve_method_aliases()","solargraph::source::nodemethods#resolve_node_signature()","solargraph::pin::basemethod#resolve_reference()","solargraph::pin::parameter#resolve_reference()","solargraph::complextype#respond_to_missing?()","solargraph::pin::base#return_type()","solargraph::pin::basemethod#return_type()","solargraph::pin::basevariable#return_type()","solargraph::pin::common#return_type()","solargraph::pin::namespace#return_type()","solargraph::pin::parameter#return_type()","solargraph::pin::symbol#return_type()","solargraph::typechecker#return_type_problems()","solargraph::source::nodemethods#returns_from()","solargraph::apimap::sourcetoyard#root_code_object()","solargraph::complextype::typemethods#rooted?()","solargraph::page::binder#ruby_to_html()","solargraph::yardmap::rdoctoyard::run()","solargraph::shell#scan()","solargraph::languageserver::host::diagnoser#schedule()","solargraph::complextype::typemethods#scope()","solargraph::pin::instancevariable#scope()","solargraph::pin::namespace#scope()","solargraph::apimap#search()","solargraph::languageserver::host#search()","solargraph::library#search()","solargraph::pin::basemethod#see_reference()","solargraph::pin::parameter#see_reference()","solargraph::complextype#select()","solargraph::languageserver::message::select()","solargraph::page::select_template()","solargraph::complextype#self_to()","solargraph::complextype::uniquetype#self_to()","solargraph::complextype#selfy?()","solargraph::complextype::uniquetype#selfy?()","solargraph::languageserver::host#send_notification()","solargraph::languageserver::host#send_request()","solargraph::languageserver::message::base#send_response()","solargraph::languageserver::request#send_response()","solargraph::languageserver::transport::adapter#sending()","solargraph::apimap::cache#set_constants()","solargraph::languageserver::message::base#set_error()","solargraph::languageserver::transport::datareader#set_message_handler()","solargraph::apimap::cache#set_methods()","solargraph::yardmap::cache#set_path_pins()","solargraph::apimap::cache#set_qualified_namespace()","solargraph::apimap::cache#set_receiver_definition()","solargraph::languageserver::message::base#set_result()","solargraph::languageserver::host#show_message()","solargraph::languageserver::host#show_message_request()","solargraph::languageserver::transport::adapter#shutdown()","solargraph::pin::basevariable#signature()","solargraph::source::sourcechainer#signature_data()","solargraph::pin::conversions#signature_help()","solargraph::languageserver::host#signatures_at()","solargraph::library#signatures_at()","solargraph::sourcemap::clip#signify()","solargraph::source::chain#skippable_block_receivers()","solargraph::shell#socket()","solargraph::workspace#source()","solargraph::workspace#source_hash()","solargraph::apimap#source_map()","solargraph::sourcemap::clip#source_map()","solargraph::apimap#source_map_hash()","solargraph::apimap#source_maps()","solargraph::bundle#sources()","solargraph::languageserver::host::dispatch#sources()","solargraph::workspace#sources()","solargraph::yardmap#spec_for_require()","solargraph::documentor::specs_from_bundle()","solargraph::languageserver::host#start()","solargraph::languageserver::host::cataloger#start()","solargraph::languageserver::host::diagnoser#start()","solargraph::languageserver::host::sources#start()","solargraph::source::cursor#start_of_constant?()","solargraph::source::cursor#start_of_word()","solargraph::source#start_synchronize()","solargraph::source::cursor#start_word_pattern()","solargraph::languageserver::message::initialize#static_code_action()","solargraph::languageserver::message::initialize#static_completion()","solargraph::languageserver::message::initialize#static_definitions()","solargraph::languageserver::message::initialize#static_document_formatting()","solargraph::languageserver::message::initialize#static_document_symbols()","solargraph::languageserver::message::initialize#static_folding_range()","solargraph::languageserver::message::initialize#static_hover()","solargraph::languageserver::message::initialize#static_on_type_formatting()","solargraph::languageserver::message::initialize#static_references()","solargraph::languageserver::message::initialize#static_rename()","solargraph::languageserver::message::initialize#static_signature_help()","solargraph::languageserver::message::initialize#static_workspace_symbols()","solargraph::shell#stdio()","solargraph::languageserver::host#stop()","solargraph::languageserver::host::cataloger#stop()","solargraph::languageserver::host::diagnoser#stop()","solargraph::languageserver::host::sources#stop()","solargraph::languageserver::host#stopped?()","solargraph::languageserver::host::cataloger#stopped?()","solargraph::languageserver::host::diagnoser#stopped?()","solargraph::languageserver::host::sources#stopped?()","solargraph::apimap#store()","solargraph::typechecker#strict_type_problems()","solargraph::source::cursor#string?()","solargraph::source::sourcechainer#string?()","solargraph::source#string_at?()","solargraph::source#string_nodes()","solargraph::source#string_nodes_in()","solargraph::source::flawedbuilder#string_value()","solargraph::source#stringified_comments()","solargraph::source#stringify_comment_array()","solargraph::apimap#super_and_sub?()","solargraph::source::chain::head#super_pins()","solargraph::apimap::store#superclass_references()","solargraph::languageserver::message::initialize#support_workspace_folders?()","solargraph::pin::attribute#symbol_kind()","solargraph::pin::base#symbol_kind()","solargraph::pin::basevariable#symbol_kind()","solargraph::pin::constant#symbol_kind()","solargraph::pin::method#symbol_kind()","solargraph::pin::namespace#symbol_kind()","solargraph::apimap::store#symbols()","solargraph::source#synchronize()","solargraph::workspace#synchronize!()","solargraph::library#synchronized?()","solargraph::source#synchronized?()","solargraph::languageserver::host#synchronizing?()","solargraph::languageserver::host::cataloger#tick()","solargraph::languageserver::host::diagnoser#tick()","solargraph::languageserver::host::sources#tick()","solargraph::location#to_hash()","solargraph::position#to_hash()","solargraph::range#to_hash()","solargraph::position::to_offset()","solargraph::complextype#to_s()","solargraph::complextype::uniquetype#to_s()","solargraph::pin::base#to_s()","solargraph::source#tree_at()","solargraph::pin::base#try_merge!()","solargraph::pin::basevariable#try_merge!()","solargraph::pin::instancevariable#try_merge!()","solargraph::pin::localvariable#try_merge!()","solargraph::pin::method#try_merge!()","solargraph::pin::parameter#try_merge!()","solargraph::sourcemap#try_merge!()","solargraph::complextype::try_parse()","solargraph::shell#typecheck()","solargraph::pin::base#typify()","solargraph::pin::basemethod#typify()","solargraph::pin::namespace#typify()","solargraph::pin::parameter#typify()","solargraph::pin::parameter#typify_block_param()","solargraph::pin::basemethod#typify_from_super()","solargraph::pin::parameter#typify_method_param()","solargraph::shell#uncache()","solargraph::complextype::typemethods#undefined?()","solargraph::source::chain#undefined?()","solargraph::source::chain::link#undefined?()","solargraph::sourcemap::mapper#unmap()","solargraph::source::nodemethods#unpack_name()","solargraph::languageserver::host#unregister_capabilities()","solargraph::yardmap#unresolved_requires()","solargraph::languageserver::host::sources#update()","solargraph::languageserver::transport::adapter#update()","solargraph::sourcemap::region#update()","solargraph::languageserver::host::dispatch#update_libraries()","solargraph::languageserver::urihelpers#uri_to_file()","solargraph::yardmap::coredocs::valid?()","solargraph::complextype::typemethods#value_types()","solargraph::pin::base#variable?()","solargraph::pin::basevariable#variable?()","solargraph::shell#version()","solargraph::yardmap::coredocs::versions()","solargraph::pin::methodalias#visibility()","solargraph::pin::symbol#visibility()","solargraph::pin::localized#visible_at?()","solargraph::pin::localized#visible_from?()","solargraph::complextype::typemethods#void?()","solargraph::source::chain::call#with_block?()","solargraph::yardmap#with_dependencies?()","solargraph::source::chain::literal#word()","solargraph::source::chain::or#word()","solargraph::source::cursor#word()","solargraph::workspace::config#workspace_config_path()","solargraph::apimap#workspace_filenames()","solargraph::apimap#workspaced?()","solargraph::workspace#would_merge?()","solargraph::workspace#would_require?()","solargraph::source::change#write()","solargraph::source::updater#write()","solargraph::apimap#yard_map()","solargraph::yardmap::coredocs::yardoc_file()","solargraph::yardmap#yardoc_file_for_spec()","solargraph::yardmap::coredocs::yardoc_stdlib_file()","solargraph::yardmap#yardocs()","solargraph::sourcemap::clip#yielded_self_pins()"],"info":[["File","","File.html","",""],["Solargraph","","Solargraph.html","","<p>The top-level namespace for the Solargraph code mapping, documentation,\nstatic analysis, and language …\n"],["Solargraph::ApiMap","","Solargraph/ApiMap.html","","<p>An aggregate provider for information about workspaces, sources, gems, and\nthe Ruby core.\n"],["Solargraph::ApiMap::BundlerMethods","","Solargraph/ApiMap/BundlerMethods.html","",""],["Solargraph::ApiMap::Cache","","Solargraph/ApiMap/Cache.html","",""],["Solargraph::ApiMap::SourceToYard","","Solargraph/ApiMap/SourceToYard.html","",""],["Solargraph::ApiMap::Store","","Solargraph/ApiMap/Store.html","",""],["Solargraph::Bundle","","Solargraph/Bundle.html","","<p>An aggregation of a workspace and additional sources to be cataloged in an\nApiMap.\n"],["Solargraph::BundleNotFoundError","","Solargraph/BundleNotFoundError.html","",""],["Solargraph::ComplexType","","Solargraph/ComplexType.html","","<p>A container for type data based on YARD type tags.\n"],["Solargraph::ComplexType::TypeMethods","","Solargraph/ComplexType/TypeMethods.html","","<p>Methods for accessing type data.\n"],["Solargraph::ComplexType::UniqueType","","Solargraph/ComplexType/UniqueType.html","","<p>An individual type signature. A complex type can consist of multiple unique\ntypes.\n"],["Solargraph::ComplexTypeError","","Solargraph/ComplexTypeError.html","",""],["Solargraph::Convention","","Solargraph/Convention.html","","<p>Conventions provide a way to modify an ApiMap based on expectations about\none of its sources.\n"],["Solargraph::Convention::Base","","Solargraph/Convention/Base.html","",""],["Solargraph::Convention::Gemfile","","Solargraph/Convention/Gemfile.html","",""],["Solargraph::Convention::Gemspec","","Solargraph/Convention/Gemspec.html","",""],["Solargraph::Convention::Rspec","","Solargraph/Convention/Rspec.html","",""],["Solargraph::CoreFills","","Solargraph/CoreFills.html","",""],["Solargraph::Diagnostics","","Solargraph/Diagnostics.html","","<p>The Diagnostics library provides reporters for analyzing problems in code\nand providing the results to …\n"],["Solargraph::Diagnostics::Base","","Solargraph/Diagnostics/Base.html","","<p>The base class for diagnostics reporters.\n"],["Solargraph::Diagnostics::RequireNotFound","","Solargraph/Diagnostics/RequireNotFound.html","","<p>RequireNotFound reports required paths that could not be resolved to either\na file in the workspace or …\n"],["Solargraph::Diagnostics::Rubocop","","Solargraph/Diagnostics/Rubocop.html","","<p>This reporter provides linting through RuboCop.\n"],["Solargraph::Diagnostics::RubocopHelpers","","Solargraph/Diagnostics/RubocopHelpers.html","","<p>Utility methods for the RuboCop diagnostics reporter.\n"],["Solargraph::Diagnostics::Severities","","Solargraph/Diagnostics/Severities.html","","<p>These severity constants match the DiagnosticSeverity constants in the\nlanguage server protocol.\n"],["Solargraph::Diagnostics::TypeCheck","","Solargraph/Diagnostics/TypeCheck.html","","<p>TypeCheck reports methods with undefined return types, untagged parameters,\nand invalid param tags.\n"],["Solargraph::Diagnostics::UpdateErrors","","Solargraph/Diagnostics/UpdateErrors.html","",""],["Solargraph::DiagnosticsError","","Solargraph/DiagnosticsError.html","",""],["Solargraph::Documentor","","Solargraph/Documentor.html","",""],["Solargraph::DomainDirective","","Solargraph/DomainDirective.html","","<p>A placeholder for the @!domain directive. It doesn&#39;t need to do\nanything for yardocs. It&#39;s only …\n"],["Solargraph::Environ","","Solargraph/Environ.html","",""],["Solargraph::FileNotFoundError","","Solargraph/FileNotFoundError.html","",""],["Solargraph::InvalidOffsetError","","Solargraph/InvalidOffsetError.html","",""],["Solargraph::LanguageServer","","Solargraph/LanguageServer.html","","<p>The LanguageServer namespace contains the classes and modules that compose\nconcrete implementations of …\n"],["Solargraph::LanguageServer::CompletionItemKinds","","Solargraph/LanguageServer/CompletionItemKinds.html","","<p>The CompletionItemKind constants for the language server protocol.\n"],["Solargraph::LanguageServer::ErrorCodes","","Solargraph/LanguageServer/ErrorCodes.html","","<p>The ErrorCode constants for the language server protocol.\n"],["Solargraph::LanguageServer::Host","","Solargraph/LanguageServer/Host.html","","<p>The language server protocol&#39;s data provider. Hosts are responsible for\nquerying the library and …\n"],["Solargraph::LanguageServer::Host::Cataloger","","Solargraph/LanguageServer/Host/Cataloger.html","","<p>An asynchronous library cataloging handler.\n"],["Solargraph::LanguageServer::Host::Diagnoser","","Solargraph/LanguageServer/Host/Diagnoser.html","","<p>An asynchronous diagnosis reporter.\n"],["Solargraph::LanguageServer::Host::Dispatch","","Solargraph/LanguageServer/Host/Dispatch.html","","<p>Methods for associating sources with libraries via URIs.\n"],["Solargraph::LanguageServer::Host::Sources","","Solargraph/LanguageServer/Host/Sources.html","","<p>A Host class for managing sources.\n"],["Solargraph::LanguageServer::Message","","Solargraph/LanguageServer/Message.html","","<p>The Message namespace contains classes that implement language server\nprotocol methods.\n"],["Solargraph::LanguageServer::Message::Base","","Solargraph/LanguageServer/Message/Base.html","",""],["Solargraph::LanguageServer::Message::CancelRequest","","Solargraph/LanguageServer/Message/CancelRequest.html","",""],["Solargraph::LanguageServer::Message::Client","","Solargraph/LanguageServer/Message/Client.html","",""],["Solargraph::LanguageServer::Message::Client::RegisterCapability","","Solargraph/LanguageServer/Message/Client/RegisterCapability.html","",""],["Solargraph::LanguageServer::Message::CompletionItem","","Solargraph/LanguageServer/Message/CompletionItem.html","",""],["Solargraph::LanguageServer::Message::CompletionItem::Resolve","","Solargraph/LanguageServer/Message/CompletionItem/Resolve.html","","<p>completionItem/resolve message handler\n"],["Solargraph::LanguageServer::Message::ExitNotification","","Solargraph/LanguageServer/Message/ExitNotification.html","",""],["Solargraph::LanguageServer::Message::Extended","","Solargraph/LanguageServer/Message/Extended.html","","<p>Messages in the Extended module are custom to the Solargraph implementation\nof the language server.  …\n"],["Solargraph::LanguageServer::Message::Extended::CheckGemVersion","","Solargraph/LanguageServer/Message/Extended/CheckGemVersion.html","","<p>Check if a more recent version of the Solargraph gem is available. Notify\nthe client when an update exists. …\n"],["Solargraph::LanguageServer::Message::Extended::Document","","Solargraph/LanguageServer/Message/Extended/Document.html","",""],["Solargraph::LanguageServer::Message::Extended::DocumentGems","","Solargraph/LanguageServer/Message/Extended/DocumentGems.html","","<p>Update YARD documentation for installed gems. If the `rebuild` parameter is\ntrue, rebuild existing yardocs. …\n"],["Solargraph::LanguageServer::Message::Extended::DownloadCore","","Solargraph/LanguageServer/Message/Extended/DownloadCore.html","","<p>Update core Ruby documentation.\n"],["Solargraph::LanguageServer::Message::Extended::Environment","","Solargraph/LanguageServer/Message/Extended/Environment.html","","<p>Update YARD documentation for installed gems. If the `rebuild` parameter is\ntrue, rebuild existing yardocs. …\n"],["Solargraph::LanguageServer::Message::Extended::Search","","Solargraph/LanguageServer/Message/Extended/Search.html","",""],["Solargraph::LanguageServer::Message::Initialize","","Solargraph/LanguageServer/Message/Initialize.html","",""],["Solargraph::LanguageServer::Message::Initialized","","Solargraph/LanguageServer/Message/Initialized.html","",""],["Solargraph::LanguageServer::Message::MethodNotFound","","Solargraph/LanguageServer/Message/MethodNotFound.html","",""],["Solargraph::LanguageServer::Message::MethodNotImplemented","","Solargraph/LanguageServer/Message/MethodNotImplemented.html","",""],["Solargraph::LanguageServer::Message::Shutdown","","Solargraph/LanguageServer/Message/Shutdown.html","",""],["Solargraph::LanguageServer::Message::TextDocument","","Solargraph/LanguageServer/Message/TextDocument.html","",""],["Solargraph::LanguageServer::Message::TextDocument::Base","","Solargraph/LanguageServer/Message/TextDocument/Base.html","",""],["Solargraph::LanguageServer::Message::TextDocument::CodeAction","","Solargraph/LanguageServer/Message/TextDocument/CodeAction.html","",""],["Solargraph::LanguageServer::Message::TextDocument::Completion","","Solargraph/LanguageServer/Message/TextDocument/Completion.html","",""],["Solargraph::LanguageServer::Message::TextDocument::Definition","","Solargraph/LanguageServer/Message/TextDocument/Definition.html","",""],["Solargraph::LanguageServer::Message::TextDocument::DidChange","","Solargraph/LanguageServer/Message/TextDocument/DidChange.html","",""],["Solargraph::LanguageServer::Message::TextDocument::DidClose","","Solargraph/LanguageServer/Message/TextDocument/DidClose.html","",""],["Solargraph::LanguageServer::Message::TextDocument::DidOpen","","Solargraph/LanguageServer/Message/TextDocument/DidOpen.html","",""],["Solargraph::LanguageServer::Message::TextDocument::DidSave","","Solargraph/LanguageServer/Message/TextDocument/DidSave.html","",""],["Solargraph::LanguageServer::Message::TextDocument::DocumentSymbol","","Solargraph/LanguageServer/Message/TextDocument/DocumentSymbol.html","",""],["Solargraph::LanguageServer::Message::TextDocument::FoldingRange","","Solargraph/LanguageServer/Message/TextDocument/FoldingRange.html","",""],["Solargraph::LanguageServer::Message::TextDocument::Formatting","","Solargraph/LanguageServer/Message/TextDocument/Formatting.html","",""],["Solargraph::LanguageServer::Message::TextDocument::Hover","","Solargraph/LanguageServer/Message/TextDocument/Hover.html","",""],["Solargraph::LanguageServer::Message::TextDocument::OnTypeFormatting","","Solargraph/LanguageServer/Message/TextDocument/OnTypeFormatting.html","",""],["Solargraph::LanguageServer::Message::TextDocument::PrepareRename","","Solargraph/LanguageServer/Message/TextDocument/PrepareRename.html","",""],["Solargraph::LanguageServer::Message::TextDocument::References","","Solargraph/LanguageServer/Message/TextDocument/References.html","",""],["Solargraph::LanguageServer::Message::TextDocument::Rename","","Solargraph/LanguageServer/Message/TextDocument/Rename.html","",""],["Solargraph::LanguageServer::Message::TextDocument::SignatureHelp","","Solargraph/LanguageServer/Message/TextDocument/SignatureHelp.html","",""],["Solargraph::LanguageServer::Message::Workspace","","Solargraph/LanguageServer/Message/Workspace.html","",""],["Solargraph::LanguageServer::Message::Workspace::DidChangeConfiguration","","Solargraph/LanguageServer/Message/Workspace/DidChangeConfiguration.html","",""],["Solargraph::LanguageServer::Message::Workspace::DidChangeWatchedFiles","","Solargraph/LanguageServer/Message/Workspace/DidChangeWatchedFiles.html","",""],["Solargraph::LanguageServer::Message::Workspace::DidChangeWorkspaceFolders","","Solargraph/LanguageServer/Message/Workspace/DidChangeWorkspaceFolders.html","",""],["Solargraph::LanguageServer::Message::Workspace::WorkspaceSymbol","","Solargraph/LanguageServer/Message/Workspace/WorkspaceSymbol.html","",""],["Solargraph::LanguageServer::MessageTypes","","Solargraph/LanguageServer/MessageTypes.html","","<p>The MessageType constants from the language server specification.\n"],["Solargraph::LanguageServer::Request","","Solargraph/LanguageServer/Request.html","",""],["Solargraph::LanguageServer::SymbolKinds","","Solargraph/LanguageServer/SymbolKinds.html","","<p>The SymbolKind constants for the language server protocol.\n"],["Solargraph::LanguageServer::Transport","","Solargraph/LanguageServer/Transport.html","","<p>The Transport namespace contains concrete implementations of communication\nprotocols for language servers. …\n"],["Solargraph::LanguageServer::Transport::Adapter","","Solargraph/LanguageServer/Transport/Adapter.html","","<p>A common module for running language servers in Backport.\n"],["Solargraph::LanguageServer::Transport::DataReader","","Solargraph/LanguageServer/Transport/DataReader.html","",""],["Solargraph::LanguageServer::UriHelpers","","Solargraph/LanguageServer/UriHelpers.html","","<p>Methods to handle conversions between file URIs and paths.\n"],["Solargraph::Library","","Solargraph/Library.html","","<p>A Library handles coordination between a Workspace and an ApiMap.\n"],["Solargraph::Location","","Solargraph/Location.html","","<p>A section of text identified by its filename and range.\n"],["Solargraph::Logging","","Solargraph/Logging.html","",""],["Solargraph::Page","","Solargraph/Page.html","",""],["Solargraph::Page::Binder","","Solargraph/Page/Binder.html","",""],["Solargraph::Pin","","Solargraph/Pin.html","","<p>The namespace for pins used in maps.\n"],["Solargraph::Pin::Attribute","","Solargraph/Pin/Attribute.html","",""],["Solargraph::Pin::Base","","Solargraph/Pin/Base.html","","<p>The base class for map pins.\n"],["Solargraph::Pin::BaseMethod","","Solargraph/Pin/BaseMethod.html","","<p>The base class for method and attribute pins.\n"],["Solargraph::Pin::BaseVariable","","Solargraph/Pin/BaseVariable.html","",""],["Solargraph::Pin::Block","","Solargraph/Pin/Block.html","",""],["Solargraph::Pin::ClassVariable","","Solargraph/Pin/ClassVariable.html","",""],["Solargraph::Pin::Closure","","Solargraph/Pin/Closure.html","",""],["Solargraph::Pin::Common","","Solargraph/Pin/Common.html","",""],["Solargraph::Pin::Constant","","Solargraph/Pin/Constant.html","",""],["Solargraph::Pin::Conversions","","Solargraph/Pin/Conversions.html","","<p>@todo Move this stuff. It should be the responsibility of the language\nserver.\n"],["Solargraph::Pin::Documenting","","Solargraph/Pin/Documenting.html","","<p>A module to add the Pin::Base#documentation method.\n"],["Solargraph::Pin::DuckMethod","","Solargraph/Pin/DuckMethod.html","","<p>DuckMethod pins are used to add completion items for type tags that use\nduck typing, e.g., `@param file …\n"],["Solargraph::Pin::GlobalVariable","","Solargraph/Pin/GlobalVariable.html","",""],["Solargraph::Pin::InstanceVariable","","Solargraph/Pin/InstanceVariable.html","",""],["Solargraph::Pin::Keyword","","Solargraph/Pin/Keyword.html","",""],["Solargraph::Pin::KeywordParam","","Solargraph/Pin/KeywordParam.html","",""],["Solargraph::Pin::LocalVariable","","Solargraph/Pin/LocalVariable.html","",""],["Solargraph::Pin::Localized","","Solargraph/Pin/Localized.html","",""],["Solargraph::Pin::Method","","Solargraph/Pin/Method.html","",""],["Solargraph::Pin::MethodAlias","","Solargraph/Pin/MethodAlias.html","","<p>Use this class to track method aliases for later remapping. Common examples\nthat defer mapping are aliases …\n"],["Solargraph::Pin::Namespace","","Solargraph/Pin/Namespace.html","",""],["Solargraph::Pin::Parameter","","Solargraph/Pin/Parameter.html","",""],["Solargraph::Pin::ProxyType","","Solargraph/Pin/ProxyType.html","",""],["Solargraph::Pin::Reference","","Solargraph/Pin/Reference.html","",""],["Solargraph::Pin::Reference::Extend","","Solargraph/Pin/Reference/Extend.html","",""],["Solargraph::Pin::Reference::Include","","Solargraph/Pin/Reference/Include.html","",""],["Solargraph::Pin::Reference::Override","","Solargraph/Pin/Reference/Override.html","",""],["Solargraph::Pin::Reference::Require","","Solargraph/Pin/Reference/Require.html","",""],["Solargraph::Pin::Reference::Superclass","","Solargraph/Pin/Reference/Superclass.html","",""],["Solargraph::Pin::Singleton","","Solargraph/Pin/Singleton.html","",""],["Solargraph::Pin::Symbol","","Solargraph/Pin/Symbol.html","",""],["Solargraph::Pin::YardPin","","Solargraph/Pin/YardPin.html","",""],["Solargraph::Pin::YardPin::Constant","","Solargraph/Pin/YardPin/Constant.html","",""],["Solargraph::Pin::YardPin::Method","","Solargraph/Pin/YardPin/Method.html","",""],["Solargraph::Pin::YardPin::Namespace","","Solargraph/Pin/YardPin/Namespace.html","",""],["Solargraph::Pin::YardPin::YardMixin","","Solargraph/Pin/YardPin/YardMixin.html","",""],["Solargraph::Position","","Solargraph/Position.html","","<p>The zero-based line and column numbers of a position in a string.\n"],["Solargraph::Range","","Solargraph/Range.html","","<p>A pair of positions that compose a section of text.\n"],["Solargraph::ServerMethods","","Solargraph/ServerMethods.html","",""],["Solargraph::Shell","","Solargraph/Shell.html","",""],["Solargraph::Source","","Solargraph/Source.html","","<p>A Ruby file that has been parsed into an AST.\n"],["Solargraph::Source::Chain","","Solargraph/Source/Chain.html","","<p>A chain of constants, variables, and method calls for inferring types of\nvalues.\n"],["Solargraph::Source::Chain::BlockVariable","","Solargraph/Source/Chain/BlockVariable.html","",""],["Solargraph::Source::Chain::Call","","Solargraph/Source/Chain/Call.html","",""],["Solargraph::Source::Chain::ClassVariable","","Solargraph/Source/Chain/ClassVariable.html","",""],["Solargraph::Source::Chain::Constant","","Solargraph/Source/Chain/Constant.html","",""],["Solargraph::Source::Chain::GlobalVariable","","Solargraph/Source/Chain/GlobalVariable.html","",""],["Solargraph::Source::Chain::Head","","Solargraph/Source/Chain/Head.html","","<p>Chain::Head is a link for ambiguous words, e.g.; `String` can refer to\neither a class (`String`) or a …\n"],["Solargraph::Source::Chain::InstanceVariable","","Solargraph/Source/Chain/InstanceVariable.html","",""],["Solargraph::Source::Chain::Link","","Solargraph/Source/Chain/Link.html","",""],["Solargraph::Source::Chain::Literal","","Solargraph/Source/Chain/Literal.html","",""],["Solargraph::Source::Chain::Or","","Solargraph/Source/Chain/Or.html","",""],["Solargraph::Source::Chain::Variable","","Solargraph/Source/Chain/Variable.html","",""],["Solargraph::Source::Change","","Solargraph/Source/Change.html","","<p>A change to be applied to text.\n"],["Solargraph::Source::Cursor","","Solargraph/Source/Cursor.html","","<p>Information about a position in a source, including the word located there.\n"],["Solargraph::Source::EncodingFixes","","Solargraph/Source/EncodingFixes.html","",""],["Solargraph::Source::FlawedBuilder","","Solargraph/Source/FlawedBuilder.html","","<p>A custom builder for source parsers that ignores character encoding issues\nin literal strings.\n"],["Solargraph::Source::NodeChainer","","Solargraph/Source/NodeChainer.html","","<p>A factory for generating chains from nodes.\n"],["Solargraph::Source::NodeMethods","","Solargraph/Source/NodeMethods.html","",""],["Solargraph::Source::NodeMethods::DeepInference","","Solargraph/Source/NodeMethods/DeepInference.html","",""],["Solargraph::Source::SourceChainer","","Solargraph/Source/SourceChainer.html","","<p>Information about a location in a source, including the location&#39;s word\nand signature, literal values …\n"],["Solargraph::Source::Updater","","Solargraph/Source/Updater.html","","<p>Updaters contain changes to be applied to a source. The source applies the\nupdate via the Source#synchronize …\n"],["Solargraph::SourceMap","","Solargraph/SourceMap.html","","<p>An index of pins and other ApiMap-related data for a Source.\n"],["Solargraph::SourceMap::Clip","","Solargraph/SourceMap/Clip.html","","<p>A static analysis tool for obtaining definitions, completions, signatures,\nand type inferences from a …\n"],["Solargraph::SourceMap::Completion","","Solargraph/SourceMap/Completion.html","","<p>The result of a completion request containing the pins that describe\ncompletion options and the range …\n"],["Solargraph::SourceMap::Mapper","","Solargraph/SourceMap/Mapper.html","","<p>The Mapper generates pins and other data for SourceMaps.\n<p>This class is used internally by the SourceMap …\n"],["Solargraph::SourceMap::NodeProcessor","","Solargraph/SourceMap/NodeProcessor.html","","<p>The processor classes used by SourceMap::Mapper to generate pins from\nparser nodes.\n"],["Solargraph::SourceMap::NodeProcessor::AliasNode","","Solargraph/SourceMap/NodeProcessor/AliasNode.html","",""],["Solargraph::SourceMap::NodeProcessor::ArgsNode","","Solargraph/SourceMap/NodeProcessor/ArgsNode.html","",""],["Solargraph::SourceMap::NodeProcessor::Base","","Solargraph/SourceMap/NodeProcessor/Base.html","",""],["Solargraph::SourceMap::NodeProcessor::BeginNode","","Solargraph/SourceMap/NodeProcessor/BeginNode.html","",""],["Solargraph::SourceMap::NodeProcessor::BlockNode","","Solargraph/SourceMap/NodeProcessor/BlockNode.html","",""],["Solargraph::SourceMap::NodeProcessor::CasgnNode","","Solargraph/SourceMap/NodeProcessor/CasgnNode.html","",""],["Solargraph::SourceMap::NodeProcessor::CvasgnNode","","Solargraph/SourceMap/NodeProcessor/CvasgnNode.html","",""],["Solargraph::SourceMap::NodeProcessor::DefNode","","Solargraph/SourceMap/NodeProcessor/DefNode.html","",""],["Solargraph::SourceMap::NodeProcessor::DefsNode","","Solargraph/SourceMap/NodeProcessor/DefsNode.html","",""],["Solargraph::SourceMap::NodeProcessor::GvasgnNode","","Solargraph/SourceMap/NodeProcessor/GvasgnNode.html","",""],["Solargraph::SourceMap::NodeProcessor::IvasgnNode","","Solargraph/SourceMap/NodeProcessor/IvasgnNode.html","",""],["Solargraph::SourceMap::NodeProcessor::LvasgnNode","","Solargraph/SourceMap/NodeProcessor/LvasgnNode.html","",""],["Solargraph::SourceMap::NodeProcessor::NamespaceNode","","Solargraph/SourceMap/NodeProcessor/NamespaceNode.html","",""],["Solargraph::SourceMap::NodeProcessor::OrasgnNode","","Solargraph/SourceMap/NodeProcessor/OrasgnNode.html","",""],["Solargraph::SourceMap::NodeProcessor::ResbodyNode","","Solargraph/SourceMap/NodeProcessor/ResbodyNode.html","",""],["Solargraph::SourceMap::NodeProcessor::SclassNode","","Solargraph/SourceMap/NodeProcessor/SclassNode.html","",""],["Solargraph::SourceMap::NodeProcessor::SendNode","","Solargraph/SourceMap/NodeProcessor/SendNode.html","",""],["Solargraph::SourceMap::NodeProcessor::SymNode","","Solargraph/SourceMap/NodeProcessor/SymNode.html","",""],["Solargraph::SourceMap::Region","","Solargraph/SourceMap/Region.html","","<p>Data used by the NodeProcessor library to track context at various\nlocations in a source.\n"],["Solargraph::SourceNotAvailableError","","Solargraph/SourceNotAvailableError.html","",""],["Solargraph::TypeChecker","","Solargraph/TypeChecker.html","","<p>A static analysis tool for validating data types.\n"],["Solargraph::TypeChecker::ParamDef","","Solargraph/TypeChecker/ParamDef.html","","<p>Data about a method parameter definition. This is the information from the\nargs list in the def call, …\n"],["Solargraph::TypeChecker::Problem","","Solargraph/TypeChecker/Problem.html","","<p>A problem reported by TypeChecker.\n"],["Solargraph::Workspace","","Solargraph/Workspace.html","","<p>A workspace consists of the files in a project&#39;s directory and the\nproject&#39;s configuration.  …\n"],["Solargraph::Workspace::Config","","Solargraph/Workspace/Config.html","","<p>Configuration data for a workspace.\n"],["Solargraph::WorkspaceTooLargeError","","Solargraph/WorkspaceTooLargeError.html","",""],["Solargraph::YardMap","","Solargraph/YardMap.html","","<p>The YardMap provides access to YARD documentation for the Ruby core, the\nstdlib, and gems.\n"],["Solargraph::YardMap::Cache","","Solargraph/YardMap/Cache.html","",""],["Solargraph::YardMap::CoreDocs","","Solargraph/YardMap/CoreDocs.html","","<p>Tools for managing core documentation.\n"],["Solargraph::YardMap::CoreGen","","Solargraph/YardMap/CoreGen.html","","<p>Tools for generating core documentation.\n"],["Solargraph::YardMap::Mapper","","Solargraph/YardMap/Mapper.html","",""],["Solargraph::YardMap::RdocToYard","","Solargraph/YardMap/RdocToYard.html","",""],["YARD","","YARD.html","",""],["YARD::Tags","","YARD/Tags.html","",""],["==","Solargraph::ComplexType::TypeMethods","Solargraph/ComplexType/TypeMethods.html#method-i-3D-3D","(other)",""],["==","Solargraph::Location","Solargraph/Location.html#method-i-3D-3D","(other)",""],["==","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-3D-3D","(other)","<p>Pin equality is determined using the #nearly? method and also requiring\nboth pins to have the same location. …\n"],["==","Solargraph::Pin::BaseVariable","Solargraph/Pin/BaseVariable.html#method-i-3D-3D","(other)",""],["==","Solargraph::Position","Solargraph/Position.html#method-i-3D-3D","(other)",""],["==","Solargraph::Range","Solargraph/Range.html#method-i-3D-3D","(other)",""],["==","Solargraph::Source::Chain::Link","Solargraph/Source/Chain/Link.html#method-i-3D-3D","(other)",""],["[]","Solargraph::ComplexType","Solargraph/ComplexType.html#method-i-5B-5D","(index)",""],["_locate_pin","Solargraph::SourceMap","Solargraph/SourceMap.html#method-i-_locate_pin","(line, character, *klasses)","<p>@param line [Integer] @param character [Integer] @param klasses\n[Array&lt;Class&gt;] @return [Pin::Base] …\n"],["add_folders","Solargraph::LanguageServer::Message::Workspace::DidChangeWorkspaceFolders","Solargraph/LanguageServer/Message/Workspace/DidChangeWorkspaceFolders.html#method-i-add_folders","()",""],["add_gem_dependencies","Solargraph::YardMap","Solargraph/YardMap.html#method-i-add_gem_dependencies","(spec)","<p>@param spec [Gem::Specification] @return [void]\n"],["all?","Solargraph::ComplexType","Solargraph/ComplexType.html#method-i-all-3F","(&block)",""],["all_instance_variables","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-all_instance_variables","()",""],["allow?","Solargraph::Workspace::Config","Solargraph/Workspace/Config.html#method-i-allow-3F","(filename)",""],["allow_registration","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-allow_registration","(method)","<p>Flag a method as available for dynamic registration.\n<p>@param method [String] The method name, e.g.,\n&#39;textDocument/completion&#39; …\n"],["anonymous","Solargraph::Pin::ProxyType","Solargraph/Pin/ProxyType.html#method-c-anonymous","(return_type)","<p>@param return_type [ComplexType] @return [ProxyType]\n"],["api_map","Solargraph::Library","Solargraph/Library.html#method-i-api_map","()","<p>@return [ApiMap]\n"],["arg_to_duck","Solargraph::TypeChecker","Solargraph/TypeChecker.html#method-i-arg_to_duck","(arg, par)",""],["arg_type","Solargraph::TypeChecker::ParamDef","Solargraph/TypeChecker/ParamDef.html#method-c-arg_type","(string)","<p>@param string [String] @return [Symbol]\n"],["argument?","Solargraph::Source::Cursor","Solargraph/Source/Cursor.html#method-i-argument-3F","()","<p>True if the statement at the cursor is an argument to a previous method.\n<p>Given the code `process(foo)`, …\n"],["arguments_match","Solargraph::Source::Chain::Call","Solargraph/Source/Chain/Call.html#method-i-arguments_match","(arguments, parameters)",""],["associated_comments","Solargraph::Source","Solargraph/Source.html#method-i-associated_comments","()","<p>Get a hash of comments grouped by the line numbers of the associated code.\n<p>@return [Hash{Integer =&gt; …\n"],["async_update","Solargraph::LanguageServer::Host::Sources","Solargraph/LanguageServer/Host/Sources.html#method-i-async_update","(uri, updater)","<p>@param uri [String] @param updater [Source::Updater] @return [void]\n"],["at","Solargraph::Source","Solargraph/Source.html#method-i-at","(range)","<p>@param range [Solargraph::Range] @return [String]\n"],["attach","Solargraph::Library","Solargraph/Library.html#method-i-attach","(source)","<p>Attach a source to the library.\n<p>The attached source does not need to be a part of the workspace. The\nlibrary …\n"],["attached?","Solargraph::Library","Solargraph/Library.html#method-i-attached-3F","(filename)","<p>True if the specified file is currently attached.\n<p>@param filename [String] @return [Boolean]\n"],["available","Solargraph::LanguageServer::Message::Extended::CheckGemVersion","Solargraph/LanguageServer/Message/Extended/CheckGemVersion.html#method-i-available","()","<p>@return [Gem::Version]\n"],["available","Solargraph::YardMap::CoreDocs","Solargraph/YardMap/CoreDocs.html#method-c-available","()","<p>Get a list of core documentation versions that are available for download.\n<p>@return [Array&lt;String&gt;] …\n"],["available_cores","Solargraph::Shell","Solargraph/Shell.html#method-i-available_cores","()",""],["available_port","Solargraph::ServerMethods","Solargraph/ServerMethods.html#method-i-available_port","()","<p>@return [Integer]\n"],["base","Solargraph::Source::Chain","Solargraph/Source/Chain.html#method-i-base","()","<p>@return [Chain]\n"],["base_name","Solargraph::YardMap::RdocToYard","Solargraph/YardMap/RdocToYard.html#method-c-base_name","(mod)",""],["best_download","Solargraph::YardMap::CoreDocs","Solargraph/YardMap/CoreDocs.html#method-c-best_download","(current = RUBY_VERSION)","<p>Get the version number of core documentation available for download that is\nthe closest match for the …\n"],["best_match","Solargraph::YardMap::CoreDocs","Solargraph/YardMap/CoreDocs.html#method-c-best_match","()","<p>Get the version number of the installed core documentation that is the\nclosest match for the current …\n"],["binder","Solargraph::Pin::Block","Solargraph/Pin/Block.html#method-i-binder","()",""],["binder","Solargraph::Pin::Closure","Solargraph/Pin/Closure.html#method-i-binder","()",""],["binder","Solargraph::Pin::Common","Solargraph/Pin/Common.html#method-i-binder","()","<p>@return [ComplexType]\n"],["binder","Solargraph::Pin::InstanceVariable","Solargraph/Pin/InstanceVariable.html#method-i-binder","()",""],["binder","Solargraph::Pin::Namespace","Solargraph/Pin/Namespace.html#method-i-binder","()",""],["block","Solargraph::SourceMap::Clip","Solargraph/SourceMap/Clip.html#method-i-block","()","<p>@return [Solargraph::Pin::Base]\n"],["block_passed?","Solargraph::Source::NodeChainer","Solargraph/Source/NodeChainer.html#method-i-block_passed-3F","(node)",""],["block_pin","Solargraph::SourceMap::NodeProcessor::Base","Solargraph/SourceMap/NodeProcessor/Base.html#method-i-block_pin","(position)","<p>@todo Candidate for deprecation\n"],["block_pins","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-block_pins","()","<p>@return [Array&lt;Pin::Block&gt;]\n"],["bundle","Solargraph::Library","Solargraph/Library.html#method-i-bundle","()","<p>@return [Bundle]\n"],["bundle","Solargraph::Shell","Solargraph/Shell.html#method-i-bundle","()",""],["bundled?","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-bundled-3F","(filename)","<p>True if the specified file was included in a bundle, i.e., it&#39;s either\nincluded in a workspace or …\n"],["cache","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-cache","()","<p>@return [Solargraph::ApiMap::Cache]\n"],["cache","Solargraph::YardMap","Solargraph/YardMap.html#method-i-cache","()","<p>@return [YardMap::Cache]\n"],["cache_dir","Solargraph::YardMap::CoreDocs","Solargraph/YardMap/CoreDocs.html#method-c-cache_dir","()","<p>The directory where core documentation is installed.\n<p>@return [String]\n"],["calculated","Solargraph::Workspace::Config","Solargraph/Workspace/Config.html#method-i-calculated","()","<p>The calculated array of (included - excluded) files in the workspace.\n<p>@return [Array&lt;String&gt;]\n"],["call","Solargraph::DomainDirective","Solargraph/DomainDirective.html#method-i-call","()",""],["can_register?","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-can_register-3F","(method)","<p>True if the specified LSP method can be dynamically registered.\n<p>@param method [String] @return [Boolean] …\n"],["cancel","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-cancel","(id)","<p>Cancel the method with the specified ID.\n<p>@param id [Integer] @return [void]\n"],["cancel?","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-cancel-3F","(id)","<p>True if the host received a request to cancel the method with the specified\nID.\n<p>@param id [Integer] @return …\n"],["catalog","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-catalog","(bundle)","<p>Catalog a bundle.\n<p>@param bundle [Bundle] @return [self]\n"],["catalog","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-catalog","()","<p>@return [void]\n"],["catalog","Solargraph::Library","Solargraph/Library.html#method-i-catalog","()","<p>Update the ApiMap from the library&#39;s workspace and open files.\n<p>@return [void]\n"],["cataloger","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-cataloger","()","<p>@return [Cataloger]\n"],["chain","Solargraph::Source::Cursor","Solargraph/Source/Cursor.html#method-i-chain","()","<p>@return [Chain]\n"],["chain","Solargraph::Source::NodeChainer","Solargraph/Source/NodeChainer.html#method-i-chain","()","<p>@return [Source::Chain]\n"],["chain","Solargraph::Source::NodeChainer","Solargraph/Source/NodeChainer.html#method-c-chain","(node, filename = nil, in_block = false)","<p>@param node [Parser::AST::Node] @param filename [String] @return [Chain]\n"],["chain","Solargraph::Source::SourceChainer","Solargraph/Source/SourceChainer.html#method-c-chain","(source, position)","<p>@param source [Source] @param position [Position] @return [Source::Chain]\n"],["chain","Solargraph::Source::SourceChainer","Solargraph/Source/SourceChainer.html#method-i-chain","()","<p>@return [Source::Chain]\n"],["change","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-change","(params)","<p>Update a document from the parameters of a textDocument/didChange method.\n<p>@param params [Hash] @return …\n"],["change","Solargraph::YardMap","Solargraph/YardMap.html#method-i-change","(new_requires, new_gemset)","<p>@param new_requires [Array&lt;String&gt;] @return [Boolean]\n"],["check_hash_params","Solargraph::TypeChecker","Solargraph/TypeChecker.html#method-i-check_hash_params","(arg, params)",""],["check_param_tags","Solargraph::TypeChecker","Solargraph/TypeChecker.html#method-i-check_param_tags","(pin)","<p>@param pin [Pin::BaseMethod] @return [Array&lt;Problem&gt;]\n"],["check_return_type","Solargraph::TypeChecker","Solargraph/TypeChecker.html#method-i-check_return_type","(pin)","<p>@param pin [Pin::BaseMethod] @return [Array&lt;Problem&gt;]\n"],["check_send_args","Solargraph::TypeChecker","Solargraph/TypeChecker.html#method-i-check_send_args","(node, skip_send = false)","<p>@param node [Parser::AST::Node] @param skip_send [Boolean] @return\n[Array&lt;Problem&gt;]\n"],["clear","Solargraph::ApiMap::Cache","Solargraph/ApiMap/Cache.html#method-i-clear","()","<p>@return [void]\n"],["clear","Solargraph::Environ","Solargraph/Environ.html#method-i-clear","()","<p>@return [self]\n"],["clear","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-clear","(id)","<p>Delete the specified ID from the list of cancelled IDs if it exists.\n<p>@param id [Integer] @return [void] …\n"],["clear","Solargraph::LanguageServer::Host::Sources","Solargraph/LanguageServer/Host/Sources.html#method-i-clear","()","<p>@return [void]\n"],["clear","Solargraph::Shell","Solargraph/Shell.html#method-i-clear","()",""],["clear","Solargraph::YardMap::CoreDocs","Solargraph/YardMap/CoreDocs.html#method-c-clear","()","<p>Reset the core documentation cache to the minimum requirement.\n<p>@return [void]\n"],["client_capabilities","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-client_capabilities","()",""],["clip","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-clip","(cursor)","<p>@raise [FileNotFoundError] if the cursor&#39;s file is not in the ApiMap\n@param cursor [Source::Cursor] …\n"],["clip_at","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-clip_at","(filename, position)","<p>Get a clip by filename and position.\n<p>@param filename [String] @param position [Position, Array(Integer, …\n"],["close","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-close","(uri)","<p>Close the file specified by the URI.\n<p>@param uri [String] @return [void]\n"],["close","Solargraph::LanguageServer::Host::Sources","Solargraph/LanguageServer/Host/Sources.html#method-i-close","(uri)","<p>Close the source with the given URI.\n<p>@param uri [String] @return [void]\n"],["close","Solargraph::Library","Solargraph/Library.html#method-i-close","(filename)","<p>Close a file in the library. Closing a file will make it unavailable for\ncheckout although it may still …\n"],["closing","Solargraph::LanguageServer::Transport::Adapter","Solargraph/LanguageServer/Transport/Adapter.html#method-i-closing","()",""],["closure_at","Solargraph::SourceMap::Mapper","Solargraph/SourceMap/Mapper.html#method-i-closure_at","(position)",""],["closure_pin","Solargraph::SourceMap::NodeProcessor::Base","Solargraph/SourceMap/NodeProcessor/Base.html#method-i-closure_pin","(position)","<p>@todo Candidate for deprecation\n"],["code","Solargraph::SourceMap","Solargraph/SourceMap.html#method-i-code","()","<p>@return [String]\n"],["code_for","Solargraph::Source","Solargraph/Source.html#method-i-code_for","(node)","<p>@param node [Parser::AST::Node] @return [String]\n"],["code_for","Solargraph::SourceMap::Region","Solargraph/SourceMap/Region.html#method-i-code_for","(node)","<p>@param node [Parser::AST::Node] @return [String]\n"],["code_location","Solargraph::LanguageServer::Message::TextDocument::Definition","Solargraph/LanguageServer/Message/TextDocument/Definition.html#method-i-code_location","()",""],["code_object_at","Solargraph::ApiMap::SourceToYard","Solargraph/ApiMap/SourceToYard.html#method-i-code_object_at","(path)","<p>Get the YARD CodeObject at the specified path.\n<p>@param path [String] @return [YARD::CodeObjects::Base] …\n"],["code_object_map","Solargraph::ApiMap::SourceToYard","Solargraph/ApiMap/SourceToYard.html#method-i-code_object_map","()","<p>@return [Hash{String =&gt; YARD::CodeObjects::Base}]\n"],["code_object_paths","Solargraph::ApiMap::SourceToYard","Solargraph/ApiMap/SourceToYard.html#method-i-code_object_paths","()","<p>@return [Array&lt;String&gt;]\n"],["collect_macros","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-collect_macros","()","<p>@return [Array&lt;YARD::Tags::Handlers::Directive&gt;]\n"],["combine_ranges","Solargraph::Diagnostics::UpdateErrors","Solargraph/Diagnostics/UpdateErrors.html#method-i-combine_ranges","(code, ranges)","<p>Combine an array of ranges by their starting lines.\n<p>@param code [String] @param ranges [Array&lt;Range&gt;] …\n"],["comment?","Solargraph::Source::Cursor","Solargraph/Source/Cursor.html#method-i-comment-3F","()","<p>@return [Boolean]\n"],["comment_at?","Solargraph::Source","Solargraph/Source.html#method-i-comment_at-3F","(position)","<p>@param position [Position] @return [Boolean]\n"],["comment_ranges","Solargraph::Source","Solargraph/Source.html#method-i-comment_ranges","()","<p>@return [Array&lt;Range&gt;]\n"],["commentary","Solargraph::YardMap::RdocToYard","Solargraph/YardMap/RdocToYard.html#method-c-commentary","(cmnt)",""],["comments","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-comments","()","<p>@return [String]\n"],["comments","Solargraph::Pin::Common","Solargraph/Pin/Common.html#method-i-comments","()",""],["comments","Solargraph::Pin::Symbol","Solargraph/Pin/Symbol.html#method-i-comments","()",""],["comments","Solargraph::Pin::YardPin::YardMixin","Solargraph/Pin/YardPin/YardMixin.html#method-i-comments","()",""],["comments_for","Solargraph::Source","Solargraph/Source.html#method-i-comments_for","(node)","<p>@param node [Parser::AST::Node] @return [String]\n"],["comments_for","Solargraph::SourceMap::NodeProcessor::Base","Solargraph/SourceMap/NodeProcessor/Base.html#method-i-comments_for","(node)",""],["commit","Solargraph::Source::Change","Solargraph/Source/Change.html#method-i-commit","(text, insert)",""],["compare_directives","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-compare_directives","(dir1, dir2)","<p>@param dir1 [Array&lt;YARD::Tags::Directive&gt;] @param dir2\n[Array&lt;YARD::Tags::Directive&gt;] @return …\n"],["compare_docstring_tags","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-compare_docstring_tags","(d1, d2)","<p>True if two docstrings have the same tags, regardless of any other\ndifferences.\n<p>@param d1 [YARD::Docstring] …\n"],["compare_tags","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-compare_tags","(tag1, tag2)","<p>@param tag1 [YARD::Tags::Tag] @param tag2 [YARD::Tags::Tag] @return\n[Boolean]\n"],["complete","Solargraph::SourceMap::Clip","Solargraph/SourceMap/Clip.html#method-i-complete","()","<p>@return [Completion]\n"],["complete_keyword_parameters","Solargraph::SourceMap::Clip","Solargraph/SourceMap/Clip.html#method-i-complete_keyword_parameters","()","<p>@return [Array&lt;Pin::KeywordParam]\n"],["completion_item","Solargraph::Pin::Conversions","Solargraph/Pin/Conversions.html#method-i-completion_item","()","<p>@return [Hash]\n"],["completion_item_kind","Solargraph::Pin::Attribute","Solargraph/Pin/Attribute.html#method-i-completion_item_kind","()",""],["completion_item_kind","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-completion_item_kind","()","<p>@return [Integer]\n"],["completion_item_kind","Solargraph::Pin::BaseVariable","Solargraph/Pin/BaseVariable.html#method-i-completion_item_kind","()",""],["completion_item_kind","Solargraph::Pin::Constant","Solargraph/Pin/Constant.html#method-i-completion_item_kind","()",""],["completion_item_kind","Solargraph::Pin::Method","Solargraph/Pin/Method.html#method-i-completion_item_kind","()",""],["completion_item_kind","Solargraph::Pin::Namespace","Solargraph/Pin/Namespace.html#method-i-completion_item_kind","()",""],["completion_item_kind","Solargraph::Pin::Symbol","Solargraph/Pin/Symbol.html#method-i-completion_item_kind","()",""],["completions_at","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-completions_at","(uri, line, column)","<p>@param uri [String] @param line [Integer] @param column [Integer] @return\n[Solargraph::SourceMap::Completion] …\n"],["completions_at","Solargraph::Library","Solargraph/Library.html#method-i-completions_at","(filename, line, column)","<p>Get completion suggestions at the specified file and location.\n<p>@param filename [String] The file to analyze …\n"],["config","Solargraph::Shell","Solargraph/Shell.html#method-i-config","(directory = '.')",""],["config","Solargraph::Workspace","Solargraph/Workspace.html#method-i-config","()","<p>@return [Solargraph::Workspace::Config]\n"],["config_data","Solargraph::Workspace::Config","Solargraph/Workspace/Config.html#method-i-config_data","()","<p>@return [Hash]\n"],["configure","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-configure","(update)","<p>Update the configuration options with the provided hash.\n<p>@param update [Hash] @return [void]\n"],["configured_require_paths","Solargraph::Workspace","Solargraph/Workspace.html#method-i-configured_require_paths","()","<p>Get additional require paths defined in the configuration.\n<p>@return [Array&lt;String&gt;]\n"],["confirm_return_type","Solargraph::TypeChecker","Solargraph/TypeChecker.html#method-i-confirm_return_type","(pin)","<p>@param pin [Solargraph::Pin::Base] @return [Array&lt;Problem&gt;]\n"],["const_from","Solargraph::Source::NodeMethods","Solargraph/Source/NodeMethods.html#method-i-const_from","(node)","<p>@param node [Parser::AST::Node] @return [String]\n"],["constant?","Solargraph::Source::Chain","Solargraph/Source/Chain.html#method-i-constant-3F","()","<p>@return [Boolean]\n"],["constant?","Solargraph::Source::Chain::Link","Solargraph/Source/Chain/Link.html#method-i-constant-3F","()",""],["contain?","Solargraph::Library","Solargraph/Library.html#method-i-contain-3F","(filename)","<p>True if the specified file is included in the workspace (but not\nnecessarily open).\n<p>@param filename [String] …\n"],["contain?","Solargraph::Range","Solargraph/Range.html#method-i-contain-3F","(position)","<p>True if the specified position is inside the range.\n<p>@param position [Position, Array(Integer, Integer …\n"],["context","Solargraph::Pin::Closure","Solargraph/Pin/Closure.html#method-i-context","()",""],["context","Solargraph::Pin::Common","Solargraph/Pin/Common.html#method-i-context","()","<p>@return [ComplexType]\n"],["context","Solargraph::Pin::InstanceVariable","Solargraph/Pin/InstanceVariable.html#method-i-context","()",""],["context","Solargraph::Pin::ProxyType","Solargraph/Pin/ProxyType.html#method-i-context","()",""],["context_pin","Solargraph::SourceMap::Clip","Solargraph/SourceMap/Clip.html#method-i-context_pin","()","<p>The context at the current position.\n<p>@return [Pin::Base]\n"],["core_pins","Solargraph::YardMap","Solargraph/YardMap.html#method-i-core_pins","()","<p>@return [Array&lt;Solargraph::Pin::Base&gt;]\n"],["crawl_gates","Solargraph::Source::Chain::Constant","Solargraph/Source/Chain/Constant.html#method-i-crawl_gates","(pin)",""],["create","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-create","(uri)","<p>Respond to a notification that a file was created in the workspace. The\nlibraries will determine whether …\n"],["create","Solargraph::Library","Solargraph/Library.html#method-i-create","(filename, text)","<p>Create a source to be added to the workspace. The file is ignored if it is\nneither open in the library …\n"],["create_from_disk","Solargraph::Library","Solargraph/Library.html#method-i-create_from_disk","(filename)","<p>Create a file source from a file on disk. The file is ignored if it is\nneither open in the library nor …\n"],["cursor_at","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-cursor_at","(filename, position)","<p>@param filename [String] @param position [Position, Array(Integer,\nInteger)] @return [Source::Cursor] …\n"],["cursor_at","Solargraph::Source","Solargraph/Source.html#method-i-cursor_at","(position)","<p>@param position [Position] @return [Source::Cursor]\n"],["cursor_at","Solargraph::SourceMap","Solargraph/SourceMap.html#method-i-cursor_at","(position)","<p>@param position [Position] @return [Source::Cursor]\n"],["default_config","Solargraph::Workspace::Config","Solargraph/Workspace/Config.html#method-i-default_config","()","<p>@return [Hash]\n"],["default_configuration","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-default_configuration","()","<p>@return [Hash{String =&gt; Object}]\n"],["define","Solargraph::Source::Chain","Solargraph/Source/Chain.html#method-i-define","(api_map, name_pin, locals)","<p>@param api_map [ApiMap] @param name_pin [Pin::Base] @param locals\n[Array&lt;Pin::Base&gt;] @return [Array&lt;Pin::Base&gt;] …\n"],["define","Solargraph::SourceMap::Clip","Solargraph/SourceMap/Clip.html#method-i-define","()","<p>@return [Array&lt;Pin::Base&gt;]\n"],["defined?","Solargraph::ComplexType::TypeMethods","Solargraph/ComplexType/TypeMethods.html#method-i-defined-3F","()",""],["defined?","Solargraph::Source::Chain","Solargraph/Source/Chain.html#method-i-defined-3F","()",""],["definitions_at","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-definitions_at","(uri, line, column)","<p>@param uri [String] @param line [Integer] @param column [Integer] @return\n[Array&lt;Solargraph::Pin::Base&gt;] …\n"],["definitions_at","Solargraph::Library","Solargraph/Library.html#method-i-definitions_at","(filename, line, column)","<p>Get definition suggestions for the expression at the specified file and\nlocation.\n<p>@param filename [String] …\n"],["delete","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-delete","(uri)","<p>Delete the specified file from the library.\n<p>@param uri [String] The file uri. @return [void]\n"],["delete","Solargraph::Library","Solargraph/Library.html#method-i-delete","(filename)","<p>Delete a file from the library. Deleting a file will make it unavailable\nfor checkout and optionally …\n"],["deprecated?","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-deprecated-3F","()","<p>@return [Boolean]\n"],["deprecated?","Solargraph::Pin::Symbol","Solargraph/Pin/Symbol.html#method-i-deprecated-3F","()",""],["detach","Solargraph::Library","Solargraph/Library.html#method-i-detach","(filename)","<p>Detach the specified file if it is currently attached to the library.\n<p>@param filename [String] @return …\n"],["detail","Solargraph::Pin::Conversions","Solargraph/Pin/Conversions.html#method-i-detail","()","<p>@return [String]\n"],["diagnose","Solargraph::Diagnostics::Base","Solargraph/Diagnostics/Base.html#method-i-diagnose","(source, api_map)","<p>Perform a diagnosis on a Source within the context of an ApiMap. The result\nis an array of hash objects …\n"],["diagnose","Solargraph::Diagnostics::RequireNotFound","Solargraph/Diagnostics/RequireNotFound.html#method-i-diagnose","(source, api_map)",""],["diagnose","Solargraph::Diagnostics::Rubocop","Solargraph/Diagnostics/Rubocop.html#method-i-diagnose","(source, _api_map)","<p>@param source [Solargraph::Source] @param _api_map [Solargraph::ApiMap]\n@return [Array&lt;Hash&gt;]\n"],["diagnose","Solargraph::Diagnostics::TypeCheck","Solargraph/Diagnostics/TypeCheck.html#method-i-diagnose","(source, api_map)",""],["diagnose","Solargraph::Diagnostics::UpdateErrors","Solargraph/Diagnostics/UpdateErrors.html#method-i-diagnose","(source, api_map)",""],["diagnose","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-diagnose","(uri)","<p>@param uri [String] @return [void]\n"],["diagnose","Solargraph::Library","Solargraph/Library.html#method-i-diagnose","(filename)","<p>Get diagnostics about a file.\n<p>@param filename [String] @return [Array&lt;Hash&gt;]\n"],["diagnoser","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-diagnoser","()","<p>@return [Diagnoser]\n"],["directives","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-directives","()","<p>@return [Array&lt;YARD::Tags::Directive&gt;]\n"],["directives","Solargraph::Pin::Symbol","Solargraph/Pin/Symbol.html#method-i-directives","()",""],["docstring","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-docstring","()","<p>@return [YARD::Docstring]\n"],["document","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-document","(path)","<p>Get YARD documentation for the specified path.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">api_map</span>.<span class=\"ruby-identifier\">document</span>(<span class=\"ruby-string\">&#39;String#split&#39;</span>)\n</pre>\n"],["document","Solargraph::Documentor","Solargraph/Documentor.html#method-i-document","()","<p>@return [Boolean] True if all specs were found and documented.\n"],["document","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-document","(query)","<p>@param query [String] @return [String]\n"],["document","Solargraph::Library","Solargraph/Library.html#method-i-document","(query)","<p>@param query [String] @return [Array&lt;YARD::CodeObject::Base&gt;]\n"],["document_symbols","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-document_symbols","(filename)","<p>Get an array of document symbols from a file.\n<p>@param filename [String] @return [Array&lt;Pin::Symbol&gt;] …\n"],["document_symbols","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-document_symbols","(uri)","<p>@param uri [String] @return [Array&lt;Solargraph::Pin::Base&gt;]\n"],["document_symbols","Solargraph::Library","Solargraph/Library.html#method-i-document_symbols","(filename)","<p>Get an array of document symbols.\n<p>Document symbols are composed of namespace, method, and constant pins. …\n"],["document_symbols","Solargraph::SourceMap","Solargraph/SourceMap.html#method-i-document_symbols","()","<p>@return [Array&lt;Pin::Base&gt;]\n"],["documentation","Solargraph::Pin::Documenting","Solargraph/Pin/Documenting.html#method-i-documentation","()","<p>@return [String]\n"],["documentation","Solargraph::Pin::Method","Solargraph/Pin/Method.html#method-i-documentation","()",""],["documentation","Solargraph::Pin::Parameter","Solargraph/Pin/Parameter.html#method-i-documentation","()",""],["domains","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-domains","(fqns)","<p>@param fqns [String] @return [Array&lt;String&gt;]\n"],["domains","Solargraph::Pin::Namespace","Solargraph/Pin/Namespace.html#method-i-domains","()",""],["domains","Solargraph::Workspace::Config","Solargraph/Workspace/Config.html#method-i-domains","()","<p>An array of domains configured for the workspace. A domain is a namespace\nthat the ApiMap should include …\n"],["download","Solargraph::YardMap::CoreDocs","Solargraph/YardMap/CoreDocs.html#method-c-download","(version)","<p>Download the specified version of core documentation.\n<p>@param version [String] @return [void]\n"],["download_core","Solargraph::Shell","Solargraph/Shell.html#method-i-download_core","(version = nil)",""],["drill_signature","Solargraph::Source::NodeMethods","Solargraph/Source/NodeMethods.html#method-i-drill_signature","(node, signature)",""],["duck_type?","Solargraph::ComplexType::TypeMethods","Solargraph/ComplexType/TypeMethods.html#method-i-duck_type-3F","()","<p>@return [Boolean]\n"],["dynamic_capability_options","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-dynamic_capability_options","()","<p>@return [Hash]\n"],["dynamic_registration_for?","Solargraph::LanguageServer::Message::Initialize","Solargraph/LanguageServer/Message/Initialize.html#method-i-dynamic_registration_for-3F","(section, capability)","<p>@param section [String] @param capability [String] @return [Boolean]\n"],["each","Solargraph::ComplexType","Solargraph/ComplexType.html#method-i-each","(&block)","<p>@yieldparam [UniqueType] @return [Array]\n"],["empty?","Solargraph::ApiMap::Cache","Solargraph/ApiMap/Cache.html#method-i-empty-3F","()","<p>@return [Boolean]\n"],["empty_result","Solargraph::LanguageServer::Message::TextDocument::Completion","Solargraph/LanguageServer/Message/TextDocument/Completion.html#method-i-empty_result","(incomplete = false)","<p>@param incomplete [Boolean] @return [Hash]\n"],["end_of_phrase","Solargraph::Source::SourceChainer","Solargraph/Source/SourceChainer.html#method-i-end_of_phrase","()","<p>@return [String]\n"],["end_of_word","Solargraph::Source::Cursor","Solargraph/Source/Cursor.html#method-i-end_of_word","()","<p>The part of the word after the current position. Given the text `foo.bar`,\nthe end_of_word at position …\n"],["end_word_pattern","Solargraph::Source::Cursor","Solargraph/Source/Cursor.html#method-i-end_word_pattern","()","<p>A regular expression to find the end of a word from an offset.\n<p>@return [Regexp]\n"],["environ","Solargraph::Convention::Base","Solargraph/Convention/Base.html#method-i-environ","()","<p>The Environ for this convention. Subclasses should override this method.\n<p>@return [Environ]\n"],["environ","Solargraph::Convention::Gemfile","Solargraph/Convention/Gemfile.html#method-i-environ","()",""],["environ","Solargraph::Convention::Gemspec","Solargraph/Convention/Gemspec.html#method-i-environ","()",""],["environ","Solargraph::Convention::Rspec","Solargraph/Convention/Rspec.html#method-i-environ","()",""],["environ","Solargraph::SourceMap","Solargraph/SourceMap.html#method-i-environ","()","<p>@return [Environ]\n"],["error_ranges","Solargraph::Source","Solargraph/Source.html#method-i-error_ranges","()","<p>@return [Array&lt;Range&gt;]\n"],["excluded","Solargraph::Workspace::Config","Solargraph/Workspace/Config.html#method-i-excluded","()","<p>An array of files excluded from the workspace.\n<p>@return [Array&lt;String&gt;]\n"],["excluded_directories","Solargraph::Workspace::Config","Solargraph/Workspace/Config.html#method-i-excluded_directories","()",""],["explicit_library_for","Solargraph::LanguageServer::Host::Dispatch","Solargraph/LanguageServer/Host/Dispatch.html#method-i-explicit_library_for","(uri)","<p>Find an explicit library match for the given URI. An explicit match means\nthe libary&#39;s workspace …\n"],["extend_references","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-extend_references","()",""],["extra_return_type","Solargraph::Source::Chain::Call","Solargraph/Source/Chain/Call.html#method-i-extra_return_type","(docstring, context)","<p>@param docstring [YARD::Docstring] @param context [ComplexType]\n"],["extract_first_line","Solargraph::Diagnostics::TypeCheck","Solargraph/Diagnostics/TypeCheck.html#method-i-extract_first_line","(location, source)","<p>@param location [Location] @param source [Source] @return [Hash]\n"],["fetched?","Solargraph::LanguageServer::Message::Extended::CheckGemVersion","Solargraph/LanguageServer/Message/Extended/CheckGemVersion.html#method-i-fetched-3F","()",""],["file_to_uri","Solargraph::LanguageServer::UriHelpers","Solargraph/LanguageServer/UriHelpers.html#method-i-file_to_uri","(file)","<p>Convert a file path to a URI.\n<p>@param file [String] @return [String]\n"],["filename","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-filename","()","<p>@return [String]\n"],["filename","Solargraph::Source::Cursor","Solargraph/Source/Cursor.html#method-i-filename","()","<p>@return [String]\n"],["filename","Solargraph::SourceMap","Solargraph/SourceMap.html#method-i-filename","()","<p>@return [String]\n"],["filename","Solargraph::SourceMap::Region","Solargraph/SourceMap/Region.html#method-i-filename","()","<p>@return [String]\n"],["filenames","Solargraph::Workspace","Solargraph/Workspace.html#method-i-filenames","()","<p>@return [Array&lt;String&gt;]\n"],["find","Solargraph::LanguageServer::Host::Sources","Solargraph/LanguageServer/Host/Sources.html#method-i-find","(uri)","<p>Find the source with the given URI.\n<p>@raise [FileNotFoundError] if the URI does not match an open source. …\n"],["find_context","Solargraph::Pin::Common","Solargraph/Pin/Common.html#method-i-find_context","()","<p>@return [ComplexType]\n"],["find_directive_line_number","Solargraph::SourceMap::Mapper","Solargraph/SourceMap/Mapper.html#method-i-find_directive_line_number","(comment, tag, start)",""],["find_file","Solargraph::YardMap::RdocToYard","Solargraph/YardMap/RdocToYard.html#method-c-find_file","(obj)",""],["find_rubocop_file","Solargraph::Diagnostics::RubocopHelpers","Solargraph/Diagnostics/RubocopHelpers.html#method-i-find_rubocop_file","(filename)","<p>Find a RuboCop configuration file in a file&#39;s directory tree.\n<p>@param filename [String] @return [String, …\n"],["finish_synchronize","Solargraph::Source","Solargraph/Source.html#method-i-finish_synchronize","()","<p>Finish synchronizing a source that was updated via #start_synchronize. This\nmethod returns self if the …\n"],["first","Solargraph::ComplexType","Solargraph/ComplexType.html#method-i-first","()",""],["first_char_offset","Solargraph::Source::Cursor","Solargraph/Source/Cursor.html#method-i-first_char_offset","()","<p>@return [Integer]\n"],["first_pin","Solargraph::SourceMap","Solargraph/SourceMap.html#method-i-first_pin","(path)","<p>@param path [String] @return [Pin::Base]\n"],["fix_drive_letter","Solargraph::Diagnostics::RubocopHelpers","Solargraph/Diagnostics/RubocopHelpers.html#method-i-fix_drive_letter","(path)","<p>RuboCop internally uses capitalized drive letters for Windows paths, so we\nneed to convert the paths …\n"],["fixed_parameters?","Solargraph::ComplexType::TypeMethods","Solargraph/ComplexType/TypeMethods.html#method-i-fixed_parameters-3F","()","<p>@return [Boolean]\n"],["fixed_phrase","Solargraph::Source::SourceChainer","Solargraph/Source/SourceChainer.html#method-i-fixed_phrase","()","<p>@return [String]\n"],["fixed_position","Solargraph::Source::SourceChainer","Solargraph/Source/SourceChainer.html#method-i-fixed_position","()","<p>@return [Position]\n"],["flush","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-flush","()","<p>Clear the message buffer and return the most recent data.\n<p>@return [String] The most recent data or an …\n"],["foldable_comment_block_ranges","Solargraph::Source","Solargraph/Source.html#method-i-foldable_comment_block_ranges","()","<p>Get an array of foldable comment block ranges. Blocks are excluded if they\nare less than 3 lines long. …\n"],["folders","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-folders","()","<p>@return [Array&lt;String&gt;]\n"],["folding_ranges","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-folding_ranges","(uri)","<p>@param uri [String] @return [Array&lt;Range&gt;]\n"],["folding_ranges","Solargraph::Library","Solargraph/Library.html#method-i-folding_ranges","(filename)","<p>Get an array of foldable ranges for the specified file.\n<p>@deprecated The library should not need to handle …\n"],["folding_ranges","Solargraph::Source","Solargraph/Source.html#method-i-folding_ranges","()","<p>Get an array of ranges that can be folded, e.g., the range of a class\ndefinition or an if condition. …\n"],["for","Solargraph::Convention","Solargraph/Convention.html#method-c-for","(source)","<p>@param source [Source] @return [Environ]\n"],["format","Solargraph::LanguageServer::Message::TextDocument::Formatting","Solargraph/LanguageServer/Message/TextDocument/Formatting.html#method-i-format","(original, result)",""],["fqns_pins","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-fqns_pins","(fqns)","<p>@param fqns [String] @return [Array&lt;Solargraph::Pin::Namespace&gt;]\n"],["from","Solargraph::TypeChecker::ParamDef","Solargraph/TypeChecker/ParamDef.html#method-c-from","(pin)","<p>Get an array of ParamDefs from a method pin.\n<p>@param pin [Solargraph::Pin::BaseMethod] @return [Array&lt;ParamDef&gt;] …\n"],["from_comment","Solargraph::Pin::Reference::Override","Solargraph/Pin/Reference/Override.html#method-c-from_comment","(name, comment)",""],["from_expr","Solargraph::Range","Solargraph/Range.html#method-c-from_expr","(expr)","<p>Get a range from a Parser range, usually found in\nParser::AST::Node#location#expression.\n<p>@param expr [Parser::Source::Range] …\n"],["from_node","Solargraph::Range","Solargraph/Range.html#method-c-from_node","(node)","<p>Get a range from a node.\n<p>@param node [Parser::AST::Node] @return [Range]\n"],["from_offset","Solargraph::Position","Solargraph/Position.html#method-c-from_offset","(text, offset)","<p>Get a position for the specified text and offset.\n<p>@param text [String] @param offset [Integer] @return …\n"],["from_to","Solargraph::Range","Solargraph/Range.html#method-c-from_to","(l1, c1, l2, c2)","<p>Create a range from a pair of lines and characters.\n<p>@param l1 [Integer] Starting line @param c1 [Integer] …\n"],["from_to","Solargraph::Source","Solargraph/Source.html#method-i-from_to","(l1, c1, l2, c2)","<p>@param l1 [Integer] @param c1 [Integer] @param l2 [Integer] @param c2\n[Integer] @return [String]\n"],["full_context","Solargraph::Pin::Common","Solargraph/Pin/Common.html#method-i-full_context","()",""],["full_context","Solargraph::Pin::Namespace","Solargraph/Pin/Namespace.html#method-i-full_context","()",""],["fuzzy_string_match","Solargraph::SourceMap","Solargraph/SourceMap.html#method-i-fuzzy_string_match","(str1, str2)","<p>@param str1 [String] @param str2 [String] @return [Boolean]\n"],["gates","Solargraph::Pin::Closure","Solargraph/Pin/Closure.html#method-i-gates","()","<p>@return [Array&lt;String&gt;]\n"],["gates","Solargraph::Pin::Namespace","Solargraph/Pin/Namespace.html#method-i-gates","()",""],["gates","Solargraph::SourceMap::Clip","Solargraph/SourceMap/Clip.html#method-i-gates","()",""],["gemspec?","Solargraph::Workspace","Solargraph/Workspace.html#method-i-gemspec-3F","()","<p>True if the workspace contains at least one gemspec file.\n<p>@return [Boolean]\n"],["gemspecs","Solargraph::Workspace","Solargraph/Workspace.html#method-i-gemspecs","()","<p>Get an array of all gemspec files in the workspace.\n<p>@return [Array&lt;String&gt;]\n"],["generate_complex_type","Solargraph::Pin::BaseMethod","Solargraph/Pin/BaseMethod.html#method-i-generate_complex_type","()","<p>@return [ComplexType]\n"],["generate_complex_type","Solargraph::Pin::BaseVariable","Solargraph/Pin/BaseVariable.html#method-i-generate_complex_type","()","<p>@return [ComplexType]\n"],["generate_docs","Solargraph::YardMap::CoreGen","Solargraph/YardMap/CoreGen.html#method-c-generate_docs","(ruby_dir, dest_dir)","<p>Generate documentation from the specified Ruby source directory.\n<p>@param ruby_dir [String] The Ruby source …\n"],["generate_gzip","Solargraph::YardMap::CoreGen","Solargraph/YardMap/CoreGen.html#method-c-generate_gzip","(ruby_dir, ver_name = nil, dest_dir = Dir.pwd)","<p>Generate a gzip of documentation from the specified Ruby source directory.\n<p>This method is designed to …\n"],["generate_link","Solargraph::Pin::Conversions","Solargraph/Pin/Conversions.html#method-i-generate_link","()",""],["generate_links","Solargraph::Source::NodeChainer","Solargraph/Source/NodeChainer.html#method-i-generate_links","(n)","<p>@param n [Parser::AST::Node] @return [Array&lt;Chain::Link&gt;]\n"],["generate_options","Solargraph::Diagnostics::RubocopHelpers","Solargraph/Diagnostics/RubocopHelpers.html#method-i-generate_options","(filename, code)","<p>Generate command-line options for the specified filename and code.\n<p>@param filename [String] @param code …\n"],["generate_pins","Solargraph::YardMap::Mapper","Solargraph/YardMap/Mapper.html#method-i-generate_pins","(code_object)","<p>@param code_object [YARD::CodeObjects::Base] @return\n[Array&lt;Pin::Base&gt;]\n"],["generate_require_paths","Solargraph::Workspace","Solargraph/Workspace.html#method-i-generate_require_paths","()","<p>Generate require paths from gemspecs if they exist or assume the default\nlib directory.\n<p>@return [Array&lt;String&gt;] …\n"],["generate_updater","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-generate_updater","(params)","<p>@param params [Hash] @return [Source::Updater]\n"],["generic_library","Solargraph::LanguageServer::Host::Dispatch","Solargraph/LanguageServer/Host/Dispatch.html#method-i-generic_library","()","<p>@return [Library]\n"],["generic_library_for","Solargraph::LanguageServer::Host::Dispatch","Solargraph/LanguageServer/Host/Dispatch.html#method-i-generic_library_for","(uri)","<p>Get a generic library for the given URI and attach the corresponding\nsource.\n<p>@raise [FileNotFoundError] …\n"],["get_class_variable_pins","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-get_class_variable_pins","(namespace)","<p>Get an array of class variable pins for a namespace.\n<p>@param namespace [String] A fully qualified namespace …\n"],["get_class_variables","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-get_class_variables","(fqns)","<p>@param fqns [String] @return [Array&lt;Solargraph::Pin::Base&gt;]\n"],["get_complex_type_methods","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-get_complex_type_methods","(type, context = '', internal = false)","<p>Get an array of method pins for a complex type.\n<p>The type&#39;s namespace and the context should be fully …\n"],["get_constants","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-get_constants","(namespace, *contexts)","<p>Get suggestions for constants in the specified namespace. The result may\ncontain both constant and namespace …\n"],["get_constants","Solargraph::ApiMap::Cache","Solargraph/ApiMap/Cache.html#method-i-get_constants","(namespace, context)",""],["get_constants","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-get_constants","(fqns, visibility = [:public])","<p>@param fqns [String] @param visibility [Array&lt;Symbol&gt;] @return\n[Array&lt;Solargraph::Pin::Base&gt;] …\n"],["get_extends","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-get_extends","(fqns)","<p>@param fqns [String] @return [Array&lt;String&gt;]\n"],["get_global_variable_pins","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-get_global_variable_pins","()","<p>@return [Array&lt;Solargraph::Pin::GlobalVariable&gt;]\n"],["get_includes","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-get_includes","(fqns)","<p>@param fqns [String] @return [Array&lt;String&gt;]\n"],["get_instance_variable_pins","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-get_instance_variable_pins","(namespace, scope = :instance)","<p>Get an array of instance variable pins defined in specified namespace and\nscope.\n<p>@param namespace [String] …\n"],["get_instance_variables","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-get_instance_variables","(fqns, scope = :instance)","<p>@param fqns [String] @param scope [Symbol] :class or :instance @return\n[Array&lt;Solargraph::Pin::Base&gt;] …\n"],["get_method_stack","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-get_method_stack","(fqns, name, scope: :instance)","<p>Get a stack of method pins for a method name in a namespace. The order of\nthe pins corresponds to the …\n"],["get_methods","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-get_methods","(fqns, scope: :instance, visibility: [:public], deep: true)","<p>Get an array of methods available in a particular context.\n<p>@param fqns [String] The fully qualified namespace …\n"],["get_methods","Solargraph::ApiMap::Cache","Solargraph/ApiMap/Cache.html#method-i-get_methods","(fqns, scope, visibility, deep)",""],["get_methods","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-get_methods","(fqns, scope: :instance, visibility: [:public])","<p>@param fqns [String] @param scope [Symbol] @param visibility\n[Array&lt;Symbol&gt;] @return [Array&lt;Solargraph::Pin::Base&gt;] …\n"],["get_namespace_type","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-get_namespace_type","(fqns)","<p>Get the namespace&#39;s type (Class or Module).\n<p>@param fqns [String] A fully qualified namespace @return …\n"],["get_node_end_position","Solargraph::Source::NodeMethods","Solargraph/Source/NodeMethods.html#method-i-get_node_end_position","(node)","<p>@param node [Parser::AST::Node] @return [Position]\n"],["get_node_location","Solargraph::SourceMap::NodeProcessor::Base","Solargraph/SourceMap/NodeProcessor/Base.html#method-i-get_node_location","(node)","<p>@param node [Parser::AST::Node] @return [Solargraph::Location]\n"],["get_node_start_position","Solargraph::Source::NodeMethods","Solargraph/Source/NodeMethods.html#method-i-get_node_start_position","(node)","<p>@param node [Parser::AST::Node] @return [Position]\n"],["get_offset","Solargraph::Source::SourceChainer","Solargraph/Source/SourceChainer.html#method-i-get_offset","(line, column)","<p>@param line [Integer] @param column [Integer] @return [Integer]\n"],["get_parameters","Solargraph::Pin::YardPin::Method","Solargraph/Pin/YardPin/Method.html#method-i-get_parameters","(code_object)",""],["get_path_pins","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-get_path_pins","(path)","<p>Get an array of pins that match the specified path.\n<p>@param path [String] @return [Array&lt;Pin::Base&gt;] …\n"],["get_path_pins","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-get_path_pins","(path)","<p>@param path [String] @return [Array&lt;Solargraph::Pin::Base&gt;]\n"],["get_path_pins","Solargraph::Library","Solargraph/Library.html#method-i-get_path_pins","(path)","<p>Get an array of pins that match a path.\n<p>@param path [String] @return [Array&lt;Solargraph::Pin::Base&gt;] …\n"],["get_path_pins","Solargraph::YardMap::Cache","Solargraph/YardMap/Cache.html#method-i-get_path_pins","(path)",""],["get_path_suggestions","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-get_path_suggestions","(path)","<p>Get an array of all suggestions that match the specified path.\n<p>@deprecated Use #get_path_pins instead. …\n"],["get_qualified_namespace","Solargraph::ApiMap::Cache","Solargraph/ApiMap/Cache.html#method-i-get_qualified_namespace","(name, context)",""],["get_receiver_definition","Solargraph::ApiMap::Cache","Solargraph/ApiMap/Cache.html#method-i-get_receiver_definition","(path)",""],["get_return_nodes","Solargraph::Source::NodeMethods::DeepInference","Solargraph/Source/NodeMethods/DeepInference.html#method-c-get_return_nodes","(node)","<p>@param node [Parser::AST::Node] @return [Array&lt;Parser::AST::Node&gt;]\n"],["get_return_nodes_from_children","Solargraph::Source::NodeMethods::DeepInference","Solargraph/Source/NodeMethods/DeepInference.html#method-c-get_return_nodes_from_children","(parent)",""],["get_return_nodes_only","Solargraph::Source::NodeMethods::DeepInference","Solargraph/Source/NodeMethods/DeepInference.html#method-c-get_return_nodes_only","(parent)",""],["get_signature_data_at","Solargraph::Source::SourceChainer","Solargraph/Source/SourceChainer.html#method-i-get_signature_data_at","(index)",""],["get_superclass","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-get_superclass","(fqns)","<p>@param fqns [String] @return [String]\n"],["get_symbols","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-get_symbols","()","<p>@return [Array&lt;Solargraph::Pin::Base&gt;]\n"],["get_symbols","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-get_symbols","()","<p>@return [Array&lt;Solargraph::Pin::Base&gt;]\n"],["glob_is_directory?","Solargraph::Workspace::Config","Solargraph/Workspace/Config.html#method-i-glob_is_directory-3F","(glob)","<p>True if the glob translates to a whole directory.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">glob_is_directory?</span>(<span class=\"ruby-string\">&#39;path/to/dir&#39;</span>)       <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["glob_to_directory","Solargraph::Workspace::Config","Solargraph/Workspace/Config.html#method-i-glob_to_directory","(glob)","<p>Translate a glob to a base directory if applicable\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">glob_to_directory</span>(<span class=\"ruby-string\">&#39;path/to/dir   /*&#39;</span>) <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["global_config_path","Solargraph::Workspace::Config","Solargraph/Workspace/Config.html#method-i-global_config_path","()","<p>@return [String]\n"],["gzip","Solargraph::YardMap::CoreGen","Solargraph/YardMap/CoreGen.html#method-c-gzip","(dir, dst)","<p>@param dir [String] The directory to compress @param dst [String] The\ndestination file\n"],["has_file?","Solargraph::Workspace","Solargraph/Workspace.html#method-i-has_file-3F","(filename)","<p>@param filename [String] @return [Boolean]\n"],["hash_parameters?","Solargraph::ComplexType::TypeMethods","Solargraph/ComplexType/TypeMethods.html#method-i-hash_parameters-3F","()","<p>@return [Boolean]\n"],["htmlify","Solargraph::Page::Binder","Solargraph/Page/Binder.html#method-i-htmlify","(text)","<p>@param text [String] @return [String]\n"],["identity","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-identity","()",""],["implicit","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-implicit","()","<p>@return [Environ]\n"],["implicit_library_for","Solargraph::LanguageServer::Host::Dispatch","Solargraph/LanguageServer/Host/Dispatch.html#method-i-implicit_library_for","(uri)","<p>Find an implicit library match for the given URI. An implicit match means\nthe file is located inside …\n"],["include?","Solargraph::LanguageServer::Host::Sources","Solargraph/LanguageServer/Host/Sources.html#method-i-include-3F","(uri)","<p>True if a source with given URI is currently open. @param uri [String]\n@return [Boolean]\n"],["include?","Solargraph::Range","Solargraph/Range.html#method-i-include-3F","(position)","<p>True if the range contains the specified position and the position does not\nprecede it.\n<p>@param position …\n"],["include_references","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-include_references","()",""],["included","Solargraph::Workspace::Config","Solargraph/Workspace/Config.html#method-i-included","()","<p>An array of files included in the workspace (before calculating excluded\nfiles).\n<p>@return [Array&lt;String&gt;] …\n"],["index","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-index","(pins)","<p>@param pins [Array&lt;Pin::Base&gt;] @return [self]\n"],["index","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-index","()","<p>@return [void]\n"],["index","Solargraph::Pin::Parameter","Solargraph/Pin/Parameter.html#method-i-index","()","<p>The parameter&#39;s zero-based location in the block&#39;s signature.\n<p>@return [Integer]\n"],["infer","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-infer","(api_map)","<p>@deprecated Use #typify and/or #probe instead @param api_map [ApiMap]\n@return [ComplexType]\n"],["infer","Solargraph::Source::Chain","Solargraph/Source/Chain.html#method-i-infer","(api_map, name_pin, locals)","<p>@param api_map [ApiMap] @param name_pin [Pin::Base] @param locals\n[Array&lt;Pin::Base&gt;] @return [ComplexType] …\n"],["infer","Solargraph::SourceMap::Clip","Solargraph/SourceMap/Clip.html#method-i-infer","()","<p>@return [ComplexType]\n"],["infer_first_defined","Solargraph::Source::Chain","Solargraph/Source/Chain.html#method-i-infer_first_defined","(pins, context, api_map)","<p>@param pins [Array&lt;Pin::Base&gt;] @param api_map [ApiMap] @return\n[ComplexType]\n"],["infer_from_return_nodes","Solargraph::Pin::Method","Solargraph/Pin/Method.html#method-i-infer_from_return_nodes","(api_map)","<p>@param api_map [ApiMap] @return [ComplexType]\n"],["infer_literal_node_type","Solargraph::Source::NodeMethods","Solargraph/Source/NodeMethods.html#method-i-infer_literal_node_type","(node)","<p>@param node [Parser::AST::Node] @return [String]\n"],["inferred_pins","Solargraph::Source::Chain::Call","Solargraph/Source/Chain/Call.html#method-i-inferred_pins","(pins, api_map, context, locals)","<p>@param pins [Array&lt;Pin::Base&gt;] @param api_map [ApiMap] @param context\n[ComplexType] @param locals …\n"],["inner_folding_ranges","Solargraph::Source","Solargraph/Source.html#method-i-inner_folding_ranges","(top, result = [])","<p>@param top [Parser::AST::Node] @param result [Array&lt;Range&gt;] @return\n[void]\n"],["inner_get_constants","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-inner_get_constants","(fqns, visibility, skip)","<p>@param fqns [String] @param visibility [Array&lt;Symbol&gt;] @param skip\n[Array&lt;String&gt;] @return …\n"],["inner_get_methods","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-inner_get_methods","(fqns, scope, visibility, deep, skip, no_core = false)","<p>@param fqns [String] A fully qualified namespace @param scope [Symbol]\n:class or :instance @param visibility …\n"],["inner_node_references","Solargraph::Source","Solargraph/Source.html#method-i-inner_node_references","(name, top)","<p>@param name [String] @param top [AST::Node] @return\n[Array&lt;AST::Node&gt;]\n"],["inner_process_macro","Solargraph::Source::Chain::Call","Solargraph/Source/Chain/Call.html#method-i-inner_process_macro","(pin, macro, api_map, context, locals)","<p>@param api_map [ApiMap] @param macro [YARD::Tags::MacroDirective]\n"],["inner_qualify","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-inner_qualify","(name, root, skip)","<p>@param name [String] @param root [String] @param skip [Array&lt;String&gt;]\n@return [String]\n"],["inner_tree_at","Solargraph::Source","Solargraph/Source.html#method-i-inner_tree_at","(node, position, stack)","<p>@param node [Parser::AST::Node] @param position [Position] @param stack\n[Array&lt;Parser::AST::Node&gt;] …\n"],["inspect","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-inspect","()",""],["inspect","Solargraph::Library","Solargraph/Library.html#method-i-inspect","()",""],["inspect","Solargraph::Location","Solargraph/Location.html#method-i-inspect","()",""],["inspect","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-inspect","()",""],["inspect","Solargraph::Position","Solargraph/Position.html#method-i-inspect","()",""],["inspect","Solargraph::Range","Solargraph/Range.html#method-i-inspect","()",""],["install_archive","Solargraph::YardMap::CoreDocs","Solargraph/YardMap/CoreDocs.html#method-c-install_archive","(filename)","<p>Extract the specified archive to the core cache directory.\n<p>@param filename [String] @return [void]\n"],["join_docs","Solargraph::LanguageServer::Message::CompletionItem::Resolve","Solargraph/LanguageServer/Message/CompletionItem/Resolve.html#method-i-join_docs","(pins)",""],["key_types","Solargraph::ComplexType::TypeMethods","Solargraph/ComplexType/TypeMethods.html#method-i-key_types","()","<p>@return [Array&lt;ComplexType&gt;]\n"],["keywords","Solargraph::ApiMap","Solargraph/ApiMap.html#method-c-keywords","()","<p>An array of pins based on Ruby keywords (`if`, `end`, etc.).\n<p>@return [Array&lt;Solargraph::Pin::Keyword&gt;] …\n"],["last_character","Solargraph::Diagnostics::TypeCheck","Solargraph/Diagnostics/TypeCheck.html#method-i-last_character","(position, source)","<p>@param position [Solargraph::Position] @param source [Solargraph::Source]\n@return [Integer]\n"],["length","Solargraph::ComplexType","Solargraph/ComplexType.html#method-i-length","()",""],["libraries","Solargraph::LanguageServer::Host::Dispatch","Solargraph/LanguageServer/Host/Dispatch.html#method-i-libraries","()","<p>@return [Array&lt;Library&gt;]\n"],["library_for","Solargraph::LanguageServer::Host::Dispatch","Solargraph/LanguageServer/Host/Dispatch.html#method-i-library_for","(uri)","<p>Find the best libary match for the given URI.\n<p>@param uri [String] @return [Library]\n"],["line_char_to_offset","Solargraph::Position","Solargraph/Position.html#method-c-line_char_to_offset","(text, line, character)","<p>Get a numeric offset for the specified text and a position identified by\nits line and character.\n<p>@param …\n"],["link_documentation","Solargraph::Pin::Conversions","Solargraph/Pin/Conversions.html#method-i-link_documentation","()","<p>Get a markdown-flavored link to a documentation page.\n<p>@return [String]\n"],["list_cores","Solargraph::Shell","Solargraph/Shell.html#method-i-list_cores","()",""],["list_parameters?","Solargraph::ComplexType::TypeMethods","Solargraph/ComplexType/TypeMethods.html#method-i-list_parameters-3F","()","<p>@return [Boolean]\n"],["literal?","Solargraph::Source::Chain","Solargraph/Source/Chain.html#method-i-literal-3F","()","<p>@return [Boolean]\n"],["load","Solargraph::ApiMap","Solargraph/ApiMap.html#method-c-load","(directory)","<p>Create an ApiMap with a workspace in the specified directory.\n<p>@param directory [String] @return [ApiMap] …\n"],["load","Solargraph::Library","Solargraph/Library.html#method-c-load","(directory = '', name = nil)","<p>Create a library from a directory.\n<p>@param directory [String] The path to be used for the workspace @param …\n"],["load","Solargraph::Source","Solargraph/Source.html#method-c-load","(filename)","<p>@param filename [String] @return [Solargraph::Source]\n"],["load","Solargraph::SourceMap","Solargraph/SourceMap.html#method-c-load","(filename)","<p>@param filename [String] @return [SourceMap]\n"],["load","Solargraph::TypeChecker","Solargraph/TypeChecker.html#method-c-load","(filename)","<p>@param filename [String] @return [self]\n"],["load_sources","Solargraph::Workspace","Solargraph/Workspace.html#method-i-load_sources","()","<p>@return [void]\n"],["load_string","Solargraph::Source","Solargraph/Source.html#method-c-load_string","(code, filename = nil, version = 0)","<p>@param code [String] @param filename [String] @param version [Integer]\n@return [Solargraph::Source]\n"],["load_string","Solargraph::Source::NodeChainer","Solargraph/Source/NodeChainer.html#method-c-load_string","(code)","<p>@param code [String] @return [Chain]\n"],["load_string","Solargraph::SourceMap","Solargraph/SourceMap.html#method-c-load_string","(code, filename = nil)","<p>@param code [String] @param filename [String, nil] @return [SourceMap]\n"],["load_string","Solargraph::TypeChecker","Solargraph/TypeChecker.html#method-c-load_string","(code, filename = nil)","<p>@param code [String] @param filename [String, nil] @return [self]\n"],["load_yardoc","Solargraph::YardMap","Solargraph/YardMap.html#method-i-load_yardoc","(y)","<p>@param y [String] @return [YARD::Registry]\n"],["local_path_hash","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-local_path_hash","()","<p>@return [Hash]\n"],["locals","Solargraph::SourceMap::Clip","Solargraph/SourceMap/Clip.html#method-i-locals","()","<p>Get an array of all the locals that are visible from the cursors&#39;s\nposition. Locals can be local …\n"],["locals_at","Solargraph::SourceMap","Solargraph/SourceMap.html#method-i-locals_at","(location)","<p>@param location [Location] @return [Array&lt;Pin::LocalVariable&gt;]\n"],["locate","Solargraph::YardMap::RdocToYard","Solargraph/YardMap/RdocToYard.html#method-c-locate","(obj)","<p>@param obj [RDoc::Context]\n"],["locate_block_pin","Solargraph::SourceMap","Solargraph/SourceMap.html#method-i-locate_block_pin","(line, character)",""],["locate_named_path_pin","Solargraph::SourceMap","Solargraph/SourceMap.html#method-i-locate_named_path_pin","(line, character)",""],["locate_pins","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-locate_pins","(location)","<p>@param location [Solargraph::Location] @return\n[Array&lt;Solargraph::Pin::Base&gt;]\n"],["locate_pins","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-locate_pins","(params)","<p>Locate multiple pins that match a completion item. The first match is based\non the corresponding location …\n"],["locate_pins","Solargraph::Library","Solargraph/Library.html#method-i-locate_pins","(location)","<p>Get the pin at the specified location or nil if the pin does not exist.\n<p>@param location [Location] @return …\n"],["locate_pins","Solargraph::SourceMap","Solargraph/SourceMap.html#method-i-locate_pins","(location)","<p>@param location [Solargraph::Location] @return\n[Array&lt;Solargraph::Pin::Base&gt;]\n"],["locate_ref","Solargraph::Library","Solargraph/Library.html#method-i-locate_ref","(location)",""],["location","Solargraph::Pin::YardPin::YardMixin","Solargraph/Pin/YardPin/YardMixin.html#method-i-location","()",""],["location","Solargraph::Source","Solargraph/Source.html#method-i-location","()","<p>A location representing the file in its entirety.\n<p>@return [Location]\n"],["logger","Solargraph","Solargraph.html#method-c-logger","()","<p>A convenience method for Solargraph::Logging.logger.\n<p>@return [Logger]\n"],["logger","Solargraph::Logging","Solargraph/Logging.html#method-i-logger","()","<p>@return [Logger]\n"],["macros","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-macros","()","<p>@return [Array&lt;YARD::Tags::MacroDirective&gt;]\n"],["make_array","Solargraph::Diagnostics::Rubocop","Solargraph/Diagnostics/Rubocop.html#method-i-make_array","(resp)","<p>@param resp [Hash] @return [Array&lt;Hash&gt;]\n"],["map","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-map","(source)","<p>Map a single source.\n<p>@param source [Source] @return [self]\n"],["map","Solargraph::ComplexType","Solargraph/ComplexType.html#method-i-map","(&block)",""],["map","Solargraph::SourceMap","Solargraph/SourceMap.html#method-c-map","(source)","<p>@param source [Source] @return [SourceMap]\n"],["map","Solargraph::SourceMap::Mapper","Solargraph/SourceMap/Mapper.html#method-c-map","(source)","<p>@param source [Source] @return [Array]\n"],["map","Solargraph::SourceMap::Mapper","Solargraph/SourceMap/Mapper.html#method-i-map","(source)","<p>Generate the data.\n<p>@param source [Source] @return [Array]\n"],["map","Solargraph::YardMap::Mapper","Solargraph/YardMap/Mapper.html#method-i-map","()","<p>@return [Array&lt;Pin::Base&gt;]\n"],["markup_content","Solargraph::LanguageServer::Message::CompletionItem::Resolve","Solargraph/LanguageServer/Message/CompletionItem/Resolve.html#method-i-markup_content","(text)","<p>@param text [String] @return [Hash{Symbol =&gt; String}]\n"],["match?","Solargraph::Convention::Base","Solargraph/Convention/Base.html#method-i-match-3F","(source)","<p>True if the source qualifies for this convention. Subclasses should\noverride this method.\n"],["match?","Solargraph::Convention::Gemfile","Solargraph/Convention/Gemfile.html#method-i-match-3F","(source)",""],["match?","Solargraph::Convention::Gemspec","Solargraph/Convention/Gemspec.html#method-i-match-3F","(source)",""],["match?","Solargraph::Convention::Rspec","Solargraph/Convention/Rspec.html#method-i-match-3F","(source)",""],["max_files","Solargraph::Workspace::Config","Solargraph/Workspace/Config.html#method-i-max_files","()","<p>The maximum number of files to parse from the workspace.\n<p>@return [Integer]\n"],["maybe_directives?","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-maybe_directives-3F","()","<p>Perform a quick check to see if this pin possibly includes YARD directives.\nThis method does not require …\n"],["merge","Solargraph::Environ","Solargraph/Environ.html#method-i-merge","(other)","<p>@param other [Environ] @return [self]\n"],["merge","Solargraph::LanguageServer::Message::CompletionItem::Resolve","Solargraph/LanguageServer/Message/CompletionItem/Resolve.html#method-i-merge","(pins)","<p>@param pins [Array&lt;Pin::Base&gt;] @return [Hash]\n"],["merge","Solargraph::Library","Solargraph/Library.html#method-i-merge","(source)","<p>Try to merge a source into the library&#39;s workspace. If the workspace is\nnot configured to include …\n"],["merge","Solargraph::Workspace","Solargraph/Workspace.html#method-i-merge","(source)","<p>Merge the source. A merge will update the existing source for the file or\nadd it to the sources if the …\n"],["method_args","Solargraph::SourceMap::NodeProcessor::Base","Solargraph/SourceMap/NodeProcessor/Base.html#method-i-method_args","()",""],["method_body_node","Solargraph::Pin::Method","Solargraph/Pin/Method.html#method-i-method_body_node","()","<p>@return [Parser::AST::Node, nil]\n"],["method_map","Solargraph::LanguageServer::Message","Solargraph/LanguageServer/Message.html#method-c-method_map","()","<p>@return [Hash{String =&gt; Class&lt;Message::Base&gt;}]\n"],["method_missing","Solargraph::ComplexType","Solargraph/ComplexType.html#method-i-method_missing","(name, *args, &block)",""],["method_pins","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-method_pins","()","<p>@return [Array&lt;Solargraph::Pin::Base&gt;]\n"],["method_return","Solargraph::Pin::Reference::Override","Solargraph/Pin/Reference/Override.html#method-c-method_return","(name, *tags, delete: [])",""],["more_signature?","Solargraph::TypeChecker","Solargraph/TypeChecker.html#method-i-more_signature-3F","(node)",""],["mutex","Solargraph::LanguageServer::Host::Sources","Solargraph/LanguageServer/Host/Sources.html#method-i-mutex","()","<p>@return [Mutex]\n"],["mutex","Solargraph::Library","Solargraph/Library.html#method-i-mutex","()","<p>@return [Mutex]\n"],["name","Solargraph::Pin::Common","Solargraph/Pin/Common.html#method-i-name","()","<p>@return [String]\n"],["name","Solargraph::Pin::Keyword","Solargraph/Pin/Keyword.html#method-i-name","()",""],["named_macro","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-named_macro","(name)","<p>@param name [String] @return [YARD::Tags::MacroDirective, nil]\n"],["named_macros","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-named_macros","()","<p>@return [Hash]\n"],["named_path_pin","Solargraph::SourceMap::NodeProcessor::Base","Solargraph/SourceMap/NodeProcessor/Base.html#method-i-named_path_pin","(position)",""],["namespace","Solargraph::ComplexType::TypeMethods","Solargraph/ComplexType/TypeMethods.html#method-i-namespace","()","<p>@return [String]\n"],["namespace","Solargraph::Pin::Common","Solargraph/Pin/Common.html#method-i-namespace","()",""],["namespace","Solargraph::Pin::Namespace","Solargraph/Pin/Namespace.html#method-i-namespace","()",""],["namespace","Solargraph::Pin::Symbol","Solargraph/Pin/Symbol.html#method-i-namespace","()",""],["namespace_children","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-namespace_children","(name)","<p>@param name [String] @return [Array&lt;Solargraph::Pin::Base&gt;]\n"],["namespace_exists?","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-namespace_exists-3F","(name, context = '')","<p>True if the namespace exists.\n<p>@param name [String] The namespace to match @param context [String] The …\n"],["namespace_exists?","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-namespace_exists-3F","(fqns)","<p>@param fqns [String] @return [Boolean]\n"],["namespace_map","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-namespace_map","()","<p>@return [Hash]\n"],["namespace_pins","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-namespace_pins","()","<p>@return [Array&lt;Solargraph::Pin::Base&gt;]\n"],["namespace_type","Solargraph::Pin::YardPin::Namespace","Solargraph/Pin/YardPin/Namespace.html#method-i-namespace_type","()",""],["namespaces","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-namespaces","()","<p>An array of namespace names defined in the ApiMap.\n<p>@return [Array&lt;String&gt;]\n"],["namespaces","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-namespaces","()","<p>@return [Set&lt;String&gt;]\n"],["nearly?","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-nearly-3F","(other)","<p>True if the specified pin is a near match to this one. A near match\nindicates that the pins contain mostly …\n"],["nearly?","Solargraph::Pin::Block","Solargraph/Pin/Block.html#method-i-nearly-3F","(other)",""],["nearly?","Solargraph::Pin::InstanceVariable","Solargraph/Pin/InstanceVariable.html#method-i-nearly-3F","(other)",""],["nearly?","Solargraph::Pin::Method","Solargraph/Pin/Method.html#method-i-nearly-3F","(other)",""],["new","Solargraph::ApiMap","Solargraph/ApiMap.html#method-c-new","(pins: [])","<p>@param pins [Array&lt;Solargraph::Pin::Base&gt;]\n"],["new","Solargraph::ApiMap::Cache","Solargraph/ApiMap/Cache.html#method-c-new","()",""],["new","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-c-new","(pins = [])","<p>@param pins [Array&lt;Solargraph::Pin::Base&gt;]\n"],["new","Solargraph::Bundle","Solargraph/Bundle.html#method-c-new","(workspace: Workspace.new, opened: [])","<p>@param workspace [Workspace] @param opened [Array&lt;Source&gt;]\n"],["new","Solargraph::ComplexType","Solargraph/ComplexType.html#method-c-new","(types = [UniqueType::UNDEFINED])","<p>@param types [Array&lt;UniqueType&gt;]\n"],["new","Solargraph::ComplexType::UniqueType","Solargraph/ComplexType/UniqueType.html#method-c-new","(name, substring = '')","<p>Create a UniqueType with the specified name and an optional substring. The\nsubstring is the parameter …\n"],["new","Solargraph::Diagnostics::Base","Solargraph/Diagnostics/Base.html#method-c-new","(*args)",""],["new","Solargraph::Documentor","Solargraph/Documentor.html#method-c-new","(directory, rebuild: false, out: File.new(File::NULL, 'w'))",""],["new","Solargraph::Environ","Solargraph/Environ.html#method-c-new","(requires: [], domains: [], overrides: [])","<p>@param requires [Array&lt;String&gt;] @param domains [Array&lt;String&gt;]\n@param overrides [Array&lt;Pin::Reference::Override&gt;] …\n"],["new","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-c-new","()",""],["new","Solargraph::LanguageServer::Host::Cataloger","Solargraph/LanguageServer/Host/Cataloger.html#method-c-new","(host)",""],["new","Solargraph::LanguageServer::Host::Diagnoser","Solargraph/LanguageServer/Host/Diagnoser.html#method-c-new","(host)","<p>@param host [Host]\n"],["new","Solargraph::LanguageServer::Host::Sources","Solargraph/LanguageServer/Host/Sources.html#method-c-new","()",""],["new","Solargraph::LanguageServer::Message::Base","Solargraph/LanguageServer/Message/Base.html#method-c-new","(host, request)","<p>@param host [Solargraph::LanguageServer::Host] @param request [Hash]\n"],["new","Solargraph::LanguageServer::Message::Extended::CheckGemVersion","Solargraph/LanguageServer/Message/Extended/CheckGemVersion.html#method-c-new","(host, request, current: Gem::Version.new(Solargraph::VERSION), available: nil)",""],["new","Solargraph::LanguageServer::Request","Solargraph/LanguageServer/Request.html#method-c-new","(id, &block)","<p>@param id [Integer] @param &amp;block The block that processes the\nclient&#39;s response\n"],["new","Solargraph::LanguageServer::Transport::DataReader","Solargraph/LanguageServer/Transport/DataReader.html#method-c-new","()",""],["new","Solargraph::Library","Solargraph/Library.html#method-c-new","(workspace = Solargraph::Workspace.new, name = nil)","<p>@param workspace [Solargraph::Workspace] @param name [String, nil]\n"],["new","Solargraph::Location","Solargraph/Location.html#method-c-new","(filename, range)","<p>@param filename [String] @param range [Solargraph::Range]\n"],["new","Solargraph::Page","Solargraph/Page.html#method-c-new","(directory = VIEWS_PATH)","<p>@param directory [String]\n"],["new","Solargraph::Page::Binder","Solargraph/Page/Binder.html#method-c-new","(locals, render_method)","<p>@param locals [Hash] @param render_method [Proc]\n"],["new","Solargraph::Pin::Attribute","Solargraph/Pin/Attribute.html#method-c-new","(access: :reader, **splat)","<p>@param access [::Symbol] :reader or :writer\n"],["new","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-c-new","(location: nil, closure: nil, name: '', comments: '')","<p>@param location [Solargraph::Location] @param kind [Integer] @param closure\n[String] @param name [String] …\n"],["new","Solargraph::Pin::BaseMethod","Solargraph/Pin/BaseMethod.html#method-c-new","(visibility: :public, **splat)","<p>@param visibility [::Symbol] :public, :protected, or :private\n"],["new","Solargraph::Pin::BaseVariable","Solargraph/Pin/BaseVariable.html#method-c-new","(assignment: nil, **splat)","<p>@param assignment [Parser::AST::Node, nil]\n"],["new","Solargraph::Pin::Block","Solargraph/Pin/Block.html#method-c-new","(receiver: nil, args: [], **splat)",""],["new","Solargraph::Pin::Closure","Solargraph/Pin/Closure.html#method-c-new","(scope: :class, **splat)",""],["new","Solargraph::Pin::Constant","Solargraph/Pin/Constant.html#method-c-new","(visibility: :public, **splat)",""],["new","Solargraph::Pin::Keyword","Solargraph/Pin/Keyword.html#method-c-new","(name)",""],["new","Solargraph::Pin::LocalVariable","Solargraph/Pin/LocalVariable.html#method-c-new","(assignment: nil, presence: nil, **splat)",""],["new","Solargraph::Pin::Method","Solargraph/Pin/Method.html#method-c-new","(args: [], node: nil, **splat)","<p>@param args [Array&lt;String&gt;] @param node [Parser::AST::Node, nil]\n"],["new","Solargraph::Pin::MethodAlias","Solargraph/Pin/MethodAlias.html#method-c-new","(scope: :instance, original: nil, **splat)",""],["new","Solargraph::Pin::Namespace","Solargraph/Pin/Namespace.html#method-c-new","(type: :class, visibility: :public, gates: [''], **splat)","<p>@param type [Symbol] :class or :module @param visibility [Symbol] :public\nor :private @param gates [Array&lt;String&gt;] …\n"],["new","Solargraph::Pin::ProxyType","Solargraph/Pin/ProxyType.html#method-c-new","(return_type: ComplexType::UNDEFINED, **splat)","<p>@param return_type [ComplexType]\n"],["new","Solargraph::Pin::Reference::Override","Solargraph/Pin/Reference/Override.html#method-c-new","(location, name, tags, delete = [])",""],["new","Solargraph::Pin::Reference::Require","Solargraph/Pin/Reference/Require.html#method-c-new","(location, name)",""],["new","Solargraph::Pin::Singleton","Solargraph/Pin/Singleton.html#method-c-new","(name: '', location: nil, closure: nil)",""],["new","Solargraph::Pin::Symbol","Solargraph/Pin/Symbol.html#method-c-new","(location, name)","<p>@param location [Solargraph::Location] @param name [String]\n"],["new","Solargraph::Pin::YardPin::Constant","Solargraph/Pin/YardPin/Constant.html#method-c-new","(code_object, closure = nil, spec = nil)",""],["new","Solargraph::Pin::YardPin::Method","Solargraph/Pin/YardPin/Method.html#method-c-new","(code_object, name = nil, scope = nil, visibility = nil, closure = nil, spec = nil)",""],["new","Solargraph::Pin::YardPin::Namespace","Solargraph/Pin/YardPin/Namespace.html#method-c-new","(code_object, spec)",""],["new","Solargraph::Position","Solargraph/Position.html#method-c-new","(line, character)","<p>@param line [Integer] @param character [Integer]\n"],["new","Solargraph::Range","Solargraph/Range.html#method-c-new","(start, ending)","<p>@param start [Position] @param ending [Position]\n"],["new","Solargraph::Source","Solargraph/Source.html#method-c-new","(code, filename = nil, version = 0)","<p>@param code [String] @param filename [String] @param version [Integer]\n"],["new","Solargraph::Source::Chain","Solargraph/Source/Chain.html#method-c-new","(links)","<p>@param links [Array&lt;Chain::Link&gt;]\n"],["new","Solargraph::Source::Chain::Call","Solargraph/Source/Chain/Call.html#method-c-new","(word, arguments = [], with_block = false)","<p>@param word [String] @param arguments [Array&lt;Chain&gt;]\n"],["new","Solargraph::Source::Chain::Constant","Solargraph/Source/Chain/Constant.html#method-c-new","(word)",""],["new","Solargraph::Source::Chain::Link","Solargraph/Source/Chain/Link.html#method-c-new","(word = '<undefined>')",""],["new","Solargraph::Source::Chain::Literal","Solargraph/Source/Chain/Literal.html#method-c-new","(type)","<p>@param type [String]\n"],["new","Solargraph::Source::Chain::Or","Solargraph/Source/Chain/Or.html#method-c-new","(links)","<p>@param type [String]\n"],["new","Solargraph::Source::Change","Solargraph/Source/Change.html#method-c-new","(range, new_text)","<p>@param range [Range] The starting and ending positions of the change.\n\n<pre>If nil, the original text will be ...</pre>\n"],["new","Solargraph::Source::Cursor","Solargraph/Source/Cursor.html#method-c-new","(source, position)","<p>@param source [Source] @param position [Position, Array(Integer, Integer)]\n"],["new","Solargraph::Source::NodeChainer","Solargraph/Source/NodeChainer.html#method-c-new","(node, filename = nil, in_block = false)","<p>@param node [Parser::AST::Node] @param filename [String]\n"],["new","Solargraph::Source::SourceChainer","Solargraph/Source/SourceChainer.html#method-c-new","(source, position)","<p>@param source [Source] @param position [Position]\n"],["new","Solargraph::Source::Updater","Solargraph/Source/Updater.html#method-c-new","(filename, version, changes)","<p>@param filename [String] The file to update. @param version [Integer] A\nversion number associated with …\n"],["new","Solargraph::SourceMap","Solargraph/SourceMap.html#method-c-new","(source, pins, locals)","<p>@param source [Source] @param pins [Array&lt;Pin::Base&gt;] @param locals\n[Array&lt;Pin::Base&gt;]\n"],["new","Solargraph::SourceMap::Clip","Solargraph/SourceMap/Clip.html#method-c-new","(api_map, cursor)","<p>@param api_map [ApiMap] @param cursor [Source::Cursor]\n"],["new","Solargraph::SourceMap::Completion","Solargraph/SourceMap/Completion.html#method-c-new","(pins, range)","<p>@param pins [Array&lt;Solargraph::Pin::Base&gt;] @param range\n[Solargraph::Range]\n"],["new","Solargraph::SourceMap::NodeProcessor::Base","Solargraph/SourceMap/NodeProcessor/Base.html#method-c-new","(node, region, pins, locals)","<p>@param node [Parser::AST::Node] @param region [Region] @param pins\n[Array&lt;Pin::Base&gt;]\n"],["new","Solargraph::SourceMap::Region","Solargraph/SourceMap/Region.html#method-c-new","(source: Solargraph::Source.load_string(''), closure: nil, scope: nil, visibility: :public)","<p>@param source [Source] @param namespace [String] @param scope [Symbol]\n@param visibility [Symbol]\n"],["new","Solargraph::TypeChecker","Solargraph/TypeChecker.html#method-c-new","(filename, api_map: nil)","<p>@param filename [String] @param api_map [ApiMap]\n"],["new","Solargraph::TypeChecker::ParamDef","Solargraph/TypeChecker/ParamDef.html#method-c-new","(name, type)",""],["new","Solargraph::TypeChecker::Problem","Solargraph/TypeChecker/Problem.html#method-c-new","(location, message, pin: nil, suggestion: nil)","<p>@param location [Solargraph::Location] @param message [String] @param pin\n[Solargraph::Pin::Base, nil] …\n"],["new","Solargraph::Workspace","Solargraph/Workspace.html#method-c-new","(directory = '', config = nil)","<p>@param directory [String] @param config [Config, nil]\n"],["new","Solargraph::Workspace::Config","Solargraph/Workspace/Config.html#method-c-new","(directory = '')","<p>@param directory [String]\n"],["new","Solargraph::YardMap","Solargraph/YardMap.html#method-c-new","(required: [], gemset: {}, with_dependencies: true)","<p>@param required [Array&lt;String&gt;] @param gemset [Hash{String =&gt;\nString}] @param with_dependencies …\n"],["new","Solargraph::YardMap::Cache","Solargraph/YardMap/Cache.html#method-c-new","()",""],["new","Solargraph::YardMap::Mapper","Solargraph/YardMap/Mapper.html#method-c-new","(code_objects, spec = nil)","<p>@param code_objects [Array&lt;YARD::CodeObjects::Base&gt;] @param spec\n[Gem::Specification]\n"],["nil_assignment?","Solargraph::Pin::BaseVariable","Solargraph/Pin/BaseVariable.html#method-i-nil_assignment-3F","()",""],["nil_type?","Solargraph::ComplexType::TypeMethods","Solargraph/ComplexType/TypeMethods.html#method-i-nil_type-3F","()","<p>@return [Boolean]\n"],["node_at","Solargraph::Source","Solargraph/Source.html#method-i-node_at","(line, column)","<p>Get the nearest node that contains the specified index.\n<p>@param line [Integer] @param column [Integer] …\n"],["node_position","Solargraph::Source::Cursor","Solargraph/Source/Cursor.html#method-i-node_position","()","<p>@return [Position]\n"],["normalize","Solargraph::Position","Solargraph/Position.html#method-c-normalize","(object)","<p>A helper method for generating positions from arrays of integers. The\noriginal parameter is returned …\n"],["normalize","Solargraph::Source::EncodingFixes","Solargraph/Source/EncodingFixes.html#method-i-normalize","(string)","<p>Convert strings to normalized UTF-8.\n<p>@param string [String] @return [String]\n"],["normalize_indentation","Solargraph::Pin::Documenting","Solargraph/Pin/Documenting.html#method-i-normalize_indentation","(text)","<p>@param text [String] @return [String]\n"],["normalize_separators","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-normalize_separators","(path)","<p>@param path [String] @return [String]\n"],["object_location","Solargraph::Pin::YardPin::YardMixin","Solargraph/Pin/YardPin/YardMixin.html#method-i-object_location","()","<p>@return [Solargraph::Location, nil]\n"],["offense_ending_position","Solargraph::Diagnostics::Rubocop","Solargraph/Diagnostics/Rubocop.html#method-i-offense_ending_position","(off)","<p>@param off [Hash] @return [Position]\n"],["offense_range","Solargraph::Diagnostics::Rubocop","Solargraph/Diagnostics/Rubocop.html#method-i-offense_range","(off)","<p>@param off [Hash] @return [Range]\n"],["offense_start_position","Solargraph::Diagnostics::Rubocop","Solargraph/Diagnostics/Rubocop.html#method-i-offense_start_position","(off)","<p>@param off [Hash] @return [Position]\n"],["offense_to_diagnostic","Solargraph::Diagnostics::Rubocop","Solargraph/Diagnostics/Rubocop.html#method-i-offense_to_diagnostic","(off)","<p>Convert a RuboCop offense to an LSP diagnostic\n<p>@param off [Hash] Offense received from Rubocop @return …\n"],["offset","Solargraph::Source::Cursor","Solargraph/Source/Cursor.html#method-i-offset","()","<p>@return [Integer]\n"],["offset","Solargraph::Source::SourceChainer","Solargraph/Source/SourceChainer.html#method-i-offset","()","<p>@return [Integer]\n"],["open","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-open","(uri, text, version)","<p>Open the specified file in the library.\n<p>@param uri [String] The file uri. @param text [String] The contents …\n"],["open","Solargraph::LanguageServer::Host::Sources","Solargraph/LanguageServer/Host/Sources.html#method-i-open","(uri, text, version)","<p>Open a source.\n<p>@param uri [String] @param text [String] @param version [Integer] @return\n[Source]\n"],["open?","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-open-3F","(uri)","<p>True if the specified file is currently open in the library.\n<p>@param uri [String] @return [Boolean]\n"],["open?","Solargraph::Library","Solargraph/Library.html#method-i-open-3F","(filename)",""],["open_from_disk","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-open_from_disk","(uri)","<p>@param uri [String] @return [void]\n"],["open_from_disk","Solargraph::LanguageServer::Host::Sources","Solargraph/LanguageServer/Host/Sources.html#method-i-open_from_disk","(uri)",""],["open_source_hash","Solargraph::LanguageServer::Host::Sources","Solargraph/LanguageServer/Host/Sources.html#method-i-open_source_hash","()","<p>@return [Array&lt;Source&gt;]\n"],["opening","Solargraph::LanguageServer::Transport::Adapter","Solargraph/LanguageServer/Transport/Adapter.html#method-i-opening","()",""],["options","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-options","()","<p>@return [Hash]\n"],["overloads","Solargraph::Pin::Method","Solargraph/Pin/Method.html#method-i-overloads","()","<p>@return [Array&lt;Pin::Method&gt;]\n"],["pack_name","Solargraph::Source::NodeMethods","Solargraph/Source/NodeMethods.html#method-i-pack_name","(node)","<p>@param node [Parser::AST::Node] @return [Array&lt;String&gt;]\n"],["package_completions","Solargraph::SourceMap::Clip","Solargraph/SourceMap/Clip.html#method-i-package_completions","(result)","<p>@param result [Array&lt;Pin::Base&gt;] @return [Completion]\n"],["param_tag","Solargraph::Pin::Parameter","Solargraph/Pin/Parameter.html#method-i-param_tag","()","<p>@return [YARD::Tags::Tag]\n"],["param_tags_from","Solargraph::TypeChecker","Solargraph/TypeChecker.html#method-i-param_tags_from","(pin)","<p>@param pin [Pin::Base] @return [Hash]\n"],["param_type_problems","Solargraph::TypeChecker","Solargraph/TypeChecker.html#method-i-param_type_problems","()","<p>Param type problems indicate that a method does not specify a type in a\n`@param` tag for one or more …\n"],["parameter_names","Solargraph::Pin::BaseMethod","Solargraph/Pin/BaseMethod.html#method-i-parameter_names","()","<p>@return [Array&lt;String&gt;]\n"],["parameter_names","Solargraph::Pin::Block","Solargraph/Pin/Block.html#method-i-parameter_names","()","<p>@return [Array&lt;String&gt;]\n"],["parameter_names","Solargraph::Pin::Method","Solargraph/Pin/Method.html#method-i-parameter_names","()","<p>@return [Array&lt;String&gt;]\n"],["parameters","Solargraph::Pin::BaseMethod","Solargraph/Pin/BaseMethod.html#method-i-parameters","()","<p>@return [Array&lt;String&gt;]\n"],["parameters","Solargraph::Pin::Block","Solargraph/Pin/Block.html#method-i-parameters","()","<p>@return [Array&lt;String&gt;]\n"],["parameters","Solargraph::Pin::YardPin::Method","Solargraph/Pin/YardPin/Method.html#method-i-parameters","()",""],["parameters?","Solargraph::ComplexType::TypeMethods","Solargraph/ComplexType/TypeMethods.html#method-i-parameters-3F","()","<p>@return [Boolean]\n"],["parse","Solargraph::ComplexType","Solargraph/ComplexType.html#method-c-parse","(*strings, partial: false)","<p>Parse type strings into a ComplexType.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ComplexType</span>.<span class=\"ruby-identifier\">parse</span> <span class=\"ruby-string\">&#39;String&#39;</span>, <span class=\"ruby-string\">&#39;Foo&#39;</span>, <span class=\"ruby-string\">&#39;nil&#39;</span> <span class=\"ruby-comment\">#=&gt; [String, Foo, ...</span>\n</pre>\n"],["parse","Solargraph::Source","Solargraph/Source.html#method-c-parse","(code, filename = nil, line = 0)","<p>@param code [String] @param filename [String, nil] @param line [Integer]\n@return [Parser::AST::Node] …\n"],["parse_comments","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-parse_comments","()","<p>@return [void]\n"],["parse_docstring","Solargraph::Source","Solargraph/Source.html#method-c-parse_docstring","(comments)","<p>@param comments [String] @return [YARD::DocstringParser]\n"],["parse_message_from_buffer","Solargraph::LanguageServer::Transport::DataReader","Solargraph/LanguageServer/Transport/DataReader.html#method-i-parse_message_from_buffer","()",""],["parse_with_comments","Solargraph::Source","Solargraph/Source.html#method-c-parse_with_comments","(code, filename = nil)","<p>@param code [String] @param filename [String] @return\n[Array(Parser::AST::Node, Array&lt;Parser::Source::Comment&gt;)] …\n"],["parsed?","Solargraph::Source","Solargraph/Source.html#method-i-parsed-3F","()","<p>@return [Boolean]\n"],["parser","Solargraph::Source","Solargraph/Source.html#method-c-parser","()","<p>@return [Parser::Base]\n"],["path","Solargraph::Pin::Attribute","Solargraph/Pin/Attribute.html#method-i-path","()",""],["path","Solargraph::Pin::BaseMethod","Solargraph/Pin/BaseMethod.html#method-i-path","()",""],["path","Solargraph::Pin::Common","Solargraph/Pin/Common.html#method-i-path","()",""],["path","Solargraph::Pin::Constant","Solargraph/Pin/Constant.html#method-i-path","()",""],["path","Solargraph::Pin::MethodAlias","Solargraph/Pin/MethodAlias.html#method-i-path","()",""],["path","Solargraph::Pin::Namespace","Solargraph/Pin/Namespace.html#method-i-path","()",""],["path","Solargraph::Pin::Symbol","Solargraph/Pin/Symbol.html#method-i-path","()",""],["path_macros","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-path_macros","()","<p>@return [Hash]\n"],["path_pin","Solargraph::YardMap","Solargraph/YardMap.html#method-i-path_pin","(path)","<p>@param path [String] @return [Pin::Base]\n"],["path_pin_hash","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-path_pin_hash","()",""],["path_pins","Solargraph::Library","Solargraph/Library.html#method-i-path_pins","(path)","<p>@param path [String] @return [Array&lt;Solargraph::Pin::Base&gt;]\n"],["pending_requests","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-pending_requests","()","<p>Get a list of IDs for server requests that are waiting for responses from\nthe client.\n<p>@return [Array&lt;Integer&gt;] …\n"],["phrase","Solargraph::Source::SourceChainer","Solargraph/Source/SourceChainer.html#method-i-phrase","()","<p>@return [String]\n"],["pin_description","Solargraph::Shell","Solargraph/Shell.html#method-i-pin_description","(pin)","<p>@param pin [Solargraph::Pin::Base] @return [String]\n"],["pins","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-pins","()","<p>@return [Array&lt;Solargraph::Pin::Base&gt;]\n"],["pins","Solargraph::SourceMap::Mapper","Solargraph/SourceMap/Mapper.html#method-i-pins","()","<p>@return [Array&lt;Solargraph::Pin::Base&gt;]\n"],["pins","Solargraph::YardMap","Solargraph/YardMap.html#method-i-pins","()","<p>@return [Array&lt;Solargraph::Pin::Base&gt;]\n"],["post_initialize","Solargraph::LanguageServer::Message::Base","Solargraph/LanguageServer/Message/Base.html#method-i-post_initialize","()","<p>@return [void]\n"],["post_initialize","Solargraph::LanguageServer::Message::TextDocument::Base","Solargraph/LanguageServer/Message/TextDocument/Base.html#method-i-post_initialize","()",""],["prefer_non_nil_variables","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-prefer_non_nil_variables","(pins)","<p>Sort an array of pins to put nil or undefined variables last.\n<p>@param pins [Array&lt;Solargraph::Pin::Base&gt;] …\n"],["prepare","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-prepare","(directory, name = nil)","<p>Prepare a library for the specified directory.\n<p>@param directory [String] @param name [String, nil] @return …\n"],["prepare_folders","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-prepare_folders","(array)","<p>Prepare multiple folders.\n<p>@param array [Array&lt;Hash{String =&gt; String}&gt;] @return [void]\n"],["prepare_rename?","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-prepare_rename-3F","()",""],["prepare_to_parse_message","Solargraph::LanguageServer::Transport::DataReader","Solargraph/LanguageServer/Transport/DataReader.html#method-i-prepare_to_parse_message","()",""],["probe","Solargraph::Pin::Attribute","Solargraph/Pin/Attribute.html#method-i-probe","(api_map)",""],["probe","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-probe","(api_map)","<p>Infer the pin&#39;s return type via static code analysis.\n<p>@param api_map [ApiMap] @return [ComplexType] …\n"],["probe","Solargraph::Pin::BaseVariable","Solargraph/Pin/BaseVariable.html#method-i-probe","(api_map)",""],["probe","Solargraph::Pin::Method","Solargraph/Pin/Method.html#method-i-probe","(api_map)",""],["probe","Solargraph::Pin::Parameter","Solargraph/Pin/Parameter.html#method-i-probe","(api_map)",""],["probed?","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-probed-3F","()",""],["process","Solargraph::Convention::Base","Solargraph/Convention/Base.html#method-i-process","()","<p>@return [Environ]\n"],["process","Solargraph::LanguageServer::Message::Base","Solargraph/LanguageServer/Message/Base.html#method-i-process","()","<p>@return [void]\n"],["process","Solargraph::LanguageServer::Message::CancelRequest","Solargraph/LanguageServer/Message/CancelRequest.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::Client::RegisterCapability","Solargraph/LanguageServer/Message/Client/RegisterCapability.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::CompletionItem::Resolve","Solargraph/LanguageServer/Message/CompletionItem/Resolve.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::ExitNotification","Solargraph/LanguageServer/Message/ExitNotification.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::Extended::CheckGemVersion","Solargraph/LanguageServer/Message/Extended/CheckGemVersion.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::Extended::Document","Solargraph/LanguageServer/Message/Extended/Document.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::Extended::DocumentGems","Solargraph/LanguageServer/Message/Extended/DocumentGems.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::Extended::DownloadCore","Solargraph/LanguageServer/Message/Extended/DownloadCore.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::Extended::Environment","Solargraph/LanguageServer/Message/Extended/Environment.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::Extended::Search","Solargraph/LanguageServer/Message/Extended/Search.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::Initialize","Solargraph/LanguageServer/Message/Initialize.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::Initialized","Solargraph/LanguageServer/Message/Initialized.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::MethodNotFound","Solargraph/LanguageServer/Message/MethodNotFound.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::MethodNotImplemented","Solargraph/LanguageServer/Message/MethodNotImplemented.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::Shutdown","Solargraph/LanguageServer/Message/Shutdown.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::TextDocument::CodeAction","Solargraph/LanguageServer/Message/TextDocument/CodeAction.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::TextDocument::Completion","Solargraph/LanguageServer/Message/TextDocument/Completion.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::TextDocument::Definition","Solargraph/LanguageServer/Message/TextDocument/Definition.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::TextDocument::DidChange","Solargraph/LanguageServer/Message/TextDocument/DidChange.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::TextDocument::DidClose","Solargraph/LanguageServer/Message/TextDocument/DidClose.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::TextDocument::DidOpen","Solargraph/LanguageServer/Message/TextDocument/DidOpen.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::TextDocument::DidSave","Solargraph/LanguageServer/Message/TextDocument/DidSave.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::TextDocument::DocumentSymbol","Solargraph/LanguageServer/Message/TextDocument/DocumentSymbol.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::TextDocument::FoldingRange","Solargraph/LanguageServer/Message/TextDocument/FoldingRange.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::TextDocument::Formatting","Solargraph/LanguageServer/Message/TextDocument/Formatting.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::TextDocument::Hover","Solargraph/LanguageServer/Message/TextDocument/Hover.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::TextDocument::OnTypeFormatting","Solargraph/LanguageServer/Message/TextDocument/OnTypeFormatting.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::TextDocument::PrepareRename","Solargraph/LanguageServer/Message/TextDocument/PrepareRename.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::TextDocument::References","Solargraph/LanguageServer/Message/TextDocument/References.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::TextDocument::Rename","Solargraph/LanguageServer/Message/TextDocument/Rename.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::TextDocument::SignatureHelp","Solargraph/LanguageServer/Message/TextDocument/SignatureHelp.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::Workspace::DidChangeConfiguration","Solargraph/LanguageServer/Message/Workspace/DidChangeConfiguration.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::Workspace::DidChangeWatchedFiles","Solargraph/LanguageServer/Message/Workspace/DidChangeWatchedFiles.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::Workspace::DidChangeWorkspaceFolders","Solargraph/LanguageServer/Message/Workspace/DidChangeWorkspaceFolders.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Message::Workspace::WorkspaceSymbol","Solargraph/LanguageServer/Message/Workspace/WorkspaceSymbol.html#method-i-process","()",""],["process","Solargraph::LanguageServer::Request","Solargraph/LanguageServer/Request.html#method-i-process","(result)","<p>@param result [Object] @return [void]\n"],["process","Solargraph::LanguageServer::Transport::Adapter","Solargraph/LanguageServer/Transport/Adapter.html#method-i-process","(request)","<p>@param request [String] @return [void]\n"],["process","Solargraph::SourceMap::NodeProcessor","Solargraph/SourceMap/NodeProcessor.html#method-c-process","(node, region = Region.new, pins = [], locals = [])","<p>@param node [Parser::AST::Node] @param region [Region] @param pins\n[Array&lt;Pin::Base&gt;] @return [Array(Array&lt;Pin::Base&gt;, …\n"],["process","Solargraph::SourceMap::NodeProcessor::AliasNode","Solargraph/SourceMap/NodeProcessor/AliasNode.html#method-i-process","()",""],["process","Solargraph::SourceMap::NodeProcessor::ArgsNode","Solargraph/SourceMap/NodeProcessor/ArgsNode.html#method-i-process","()",""],["process","Solargraph::SourceMap::NodeProcessor::Base","Solargraph/SourceMap/NodeProcessor/Base.html#method-i-process","()","<p>Subclasses should override this method to generate new pins.\n<p>@return [void]\n"],["process","Solargraph::SourceMap::NodeProcessor::BeginNode","Solargraph/SourceMap/NodeProcessor/BeginNode.html#method-i-process","()",""],["process","Solargraph::SourceMap::NodeProcessor::BlockNode","Solargraph/SourceMap/NodeProcessor/BlockNode.html#method-i-process","()",""],["process","Solargraph::SourceMap::NodeProcessor::CasgnNode","Solargraph/SourceMap/NodeProcessor/CasgnNode.html#method-i-process","()",""],["process","Solargraph::SourceMap::NodeProcessor::CvasgnNode","Solargraph/SourceMap/NodeProcessor/CvasgnNode.html#method-i-process","()",""],["process","Solargraph::SourceMap::NodeProcessor::DefNode","Solargraph/SourceMap/NodeProcessor/DefNode.html#method-i-process","()",""],["process","Solargraph::SourceMap::NodeProcessor::DefsNode","Solargraph/SourceMap/NodeProcessor/DefsNode.html#method-i-process","()",""],["process","Solargraph::SourceMap::NodeProcessor::GvasgnNode","Solargraph/SourceMap/NodeProcessor/GvasgnNode.html#method-i-process","()",""],["process","Solargraph::SourceMap::NodeProcessor::IvasgnNode","Solargraph/SourceMap/NodeProcessor/IvasgnNode.html#method-i-process","()",""],["process","Solargraph::SourceMap::NodeProcessor::LvasgnNode","Solargraph/SourceMap/NodeProcessor/LvasgnNode.html#method-i-process","()",""],["process","Solargraph::SourceMap::NodeProcessor::NamespaceNode","Solargraph/SourceMap/NodeProcessor/NamespaceNode.html#method-i-process","()",""],["process","Solargraph::SourceMap::NodeProcessor::OrasgnNode","Solargraph/SourceMap/NodeProcessor/OrasgnNode.html#method-i-process","()",""],["process","Solargraph::SourceMap::NodeProcessor::ResbodyNode","Solargraph/SourceMap/NodeProcessor/ResbodyNode.html#method-i-process","()",""],["process","Solargraph::SourceMap::NodeProcessor::SclassNode","Solargraph/SourceMap/NodeProcessor/SclassNode.html#method-i-process","()",""],["process","Solargraph::SourceMap::NodeProcessor::SendNode","Solargraph/SourceMap/NodeProcessor/SendNode.html#method-i-process","()",""],["process","Solargraph::SourceMap::NodeProcessor::SymNode","Solargraph/SourceMap/NodeProcessor/SymNode.html#method-i-process","()",""],["process_alias_method","Solargraph::SourceMap::NodeProcessor::SendNode","Solargraph/SourceMap/NodeProcessor/SendNode.html#method-i-process_alias_method","()","<p>@return [void]\n"],["process_attribute","Solargraph::SourceMap::NodeProcessor::SendNode","Solargraph/SourceMap/NodeProcessor/SendNode.html#method-i-process_attribute","()","<p>@return [void]\n"],["process_children","Solargraph::SourceMap::NodeProcessor::Base","Solargraph/SourceMap/NodeProcessor/Base.html#method-i-process_children","(subregion = region)","<p>@param subregion [Region] @return [void]\n"],["process_comment","Solargraph::SourceMap::Mapper","Solargraph/SourceMap/Mapper.html#method-i-process_comment","(source_position, comment_position, comment)",""],["process_comment_directives","Solargraph::SourceMap::Mapper","Solargraph/SourceMap/Mapper.html#method-i-process_comment_directives","()","<p>@return [void]\n"],["process_directive","Solargraph::Source::Chain::Call","Solargraph/Source/Chain/Call.html#method-i-process_directive","(pin, api_map, context, locals)",""],["process_directive","Solargraph::SourceMap::Mapper","Solargraph/SourceMap/Mapper.html#method-i-process_directive","(source_position, comment_position, directive)","<p>@param position [Position] @param directive [YARD::Tags::Directive]\n"],["process_exclusions","Solargraph::Workspace::Config","Solargraph/Workspace/Config.html#method-i-process_exclusions","(globs)","<p>Modify the included files based on excluded directories and get an array of\nadditional files to exclude. …\n"],["process_extend","Solargraph::SourceMap::NodeProcessor::SendNode","Solargraph/SourceMap/NodeProcessor/SendNode.html#method-i-process_extend","()","<p>@return [void]\n"],["process_globs","Solargraph::Workspace::Config","Solargraph/Workspace/Config.html#method-i-process_globs","(globs)","<p>Get an array of files from the provided globs.\n<p>@param globs [Array&lt;String&gt;] @return [Array&lt;String&gt;] …\n"],["process_include","Solargraph::SourceMap::NodeProcessor::SendNode","Solargraph/SourceMap/NodeProcessor/SendNode.html#method-i-process_include","()","<p>@return [void]\n"],["process_macro","Solargraph::Source::Chain::Call","Solargraph/Source/Chain/Call.html#method-i-process_macro","(pin, api_map, context, locals)","<p>@param pin [Pin::Method] @param api_map [ApiMap] @param context\n[ComplexType] @return [Pin::Base]\n"],["process_module_function","Solargraph::SourceMap::NodeProcessor::SendNode","Solargraph/SourceMap/NodeProcessor/SendNode.html#method-i-process_module_function","()","<p>@return [void]\n"],["process_private_class_method","Solargraph::SourceMap::NodeProcessor::SendNode","Solargraph/SourceMap/NodeProcessor/SendNode.html#method-i-process_private_class_method","()","<p>@return [Boolean]\n"],["process_private_constant","Solargraph::SourceMap::NodeProcessor::SendNode","Solargraph/SourceMap/NodeProcessor/SendNode.html#method-i-process_private_constant","()","<p>@return [void]\n"],["process_require","Solargraph::SourceMap::NodeProcessor::SendNode","Solargraph/SourceMap/NodeProcessor/SendNode.html#method-i-process_require","()","<p>@return [void]\n"],["process_requires","Solargraph::YardMap","Solargraph/YardMap.html#method-i-process_requires","()","<p>@return [void]\n"],["process_stdlib","Solargraph::YardMap","Solargraph/YardMap.html#method-i-process_stdlib","(required_namespaces)","<p>@param required_namespaces [Array&lt;YARD::CodeObjects::Namespace&gt;]\n@return [Array&lt;Solargraph::Pin::Base&gt;] …\n"],["process_yardoc","Solargraph::YardMap","Solargraph/YardMap.html#method-i-process_yardoc","(y, spec = nil)","<p>@param y [String, nil] @return [Array&lt;Pin::Base&gt;]\n"],["proxied?","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-proxied-3F","()",""],["proxy","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-proxy","(return_type)","<p>Return a proxy for this pin with the specified return type. Other than the\nreturn type and the #proxied? …\n"],["qualify","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-qualify","(namespace, context = '')","<p>Get a fully qualified namespace name. This method will start the search in\nthe specified context until …\n"],["qualify","Solargraph::ComplexType","Solargraph/ComplexType.html#method-i-qualify","(api_map, context = '')","<p>@param api_map [ApiMap] @param context [String] @return [ComplexType]\n"],["qualify","Solargraph::ComplexType::TypeMethods","Solargraph/ComplexType/TypeMethods.html#method-i-qualify","(api_map, context = '')","<p>Generate a ComplexType that fully qualifies this type&#39;s namespaces.\n<p>@param api_map [ApiMap] The ApiMap …\n"],["qualify_lower","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-qualify_lower","(namespace, context)","<p>@param namespace [String] @param context [String] @return [String]\n"],["query_symbols","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-query_symbols","(query)","<p>Get an array of all symbols in the workspace that match the query.\n<p>@param query [String] @return [Array&lt;Pin::Base&gt;] …\n"],["query_symbols","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-query_symbols","(query)","<p>@param query [String] @return [Array&lt;Solargraph::Pin::Base&gt;]\n"],["query_symbols","Solargraph::Library","Solargraph/Library.html#method-i-query_symbols","(query)","<p>Get an array of all symbols in the workspace that match the query.\n<p>@param query [String] @return [Array&lt;Pin::Base&gt;] …\n"],["query_symbols","Solargraph::SourceMap","Solargraph/SourceMap.html#method-i-query_symbols","(query)","<p>@param query [String] @return [Array&lt;Pin::Base&gt;]\n"],["queue","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-queue","(message)","<p>Queue a message to be sent to the client.\n<p>@param message [String] The message to send. @return [void] …\n"],["queue","Solargraph::LanguageServer::Host::Sources","Solargraph/LanguageServer/Host/Sources.html#method-i-queue","()","<p>An array of source URIs that are waiting to finish synchronizing.\n<p>@return [Array&lt;String&gt;]\n"],["rake_yard","Solargraph::ApiMap::SourceToYard","Solargraph/ApiMap/SourceToYard.html#method-i-rake_yard","(store)","<p>@param store [ApiMap::Store] ApiMap pin store @return [void]\n"],["range","Solargraph::Source::Cursor","Solargraph/Source/Cursor.html#method-i-range","()","<p>The range of the word at the current position.\n<p>@return [Range]\n"],["rdoc","Solargraph::Shell","Solargraph/Shell.html#method-i-rdoc","(gem, version = '>= 0')",""],["read","Solargraph::Library","Solargraph/Library.html#method-i-read","(filename)","<p>Get the source for an open file or create a new source if the file exists\non disk. Sources created from …\n"],["read_config","Solargraph::Workspace::Config","Solargraph/Workspace/Config.html#method-i-read_config","(config_path = '')","<p>Read a .solargraph yaml config\n<p>@param directory [String] @return [Hash]\n"],["read_text","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-read_text","(uri)","<p>@param uri [String] @return [String]\n"],["read_text","Solargraph::Library","Solargraph/Library.html#method-i-read_text","(filename)","<p>Get the current text of a file in the library.\n<p>@param filename [String] @return [String]\n"],["realize","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-realize","(api_map)","<p>@param api_map [ApiMap] @return [self]\n"],["rebind","Solargraph::Pin::Block","Solargraph/Pin/Block.html#method-i-rebind","(context)",""],["rebind_block","Solargraph::Source::Chain","Solargraph/Source/Chain.html#method-i-rebind_block","(pin, api_map, locals)",""],["rebound?","Solargraph::Pin::Block","Solargraph/Pin/Block.html#method-i-rebound-3F","()",""],["receive","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-receive","(request)","<p>Start processing a request from the client. After the message is processed,\nthe transport is responsible …\n"],["receive","Solargraph::LanguageServer::Transport::DataReader","Solargraph/LanguageServer/Transport/DataReader.html#method-i-receive","(data)","<p>Process raw data received from the client. The data will be parsed into\nmessages based on the JSON-RPC …\n"],["receiver","Solargraph::Source::Cursor","Solargraph/Source/Cursor.html#method-i-receiver","()",""],["receiver_defined?","Solargraph::ApiMap::Cache","Solargraph/ApiMap/Cache.html#method-i-receiver_defined-3F","(path)",""],["receiving","Solargraph::LanguageServer::Transport::Adapter","Solargraph/LanguageServer/Transport/Adapter.html#method-i-receiving","(data)","<p>@param data [String]\n"],["recipient","Solargraph::Source::Cursor","Solargraph/Source/Cursor.html#method-i-recipient","()","<p>Get a cursor pointing to the method that receives the current statement as\nan argument.\n<p>@return [Cursor, …\n"],["recipient_node","Solargraph::Source::Cursor","Solargraph/Source/Cursor.html#method-i-recipient_node","()","<p>@return [Parser::AST::Node, nil]\n"],["recurse_namespace_object","Solargraph::YardMap","Solargraph/YardMap.html#method-i-recurse_namespace_object","(ns)","<p>@param ns [YARD::CodeObjects::Namespace] @return\n[Array&lt;YARD::CodeObjects::Base&gt;]\n"],["redirect_stdout","Solargraph::Diagnostics::Rubocop","Solargraph/Diagnostics/Rubocop.html#method-i-redirect_stdout","()","<p>@todo This is a smelly way to redirect output, but the RuboCop specs do\n\n<pre>the same thing.</pre>\n<p>@return [String] …\n"],["reduce_class","Solargraph::ComplexType","Solargraph/ComplexType.html#method-i-reduce_class","(dst)","<p>@todo This is a quick and dirty hack that forces `self` keywords\n\n<pre>to reference an instance of their class ...</pre>\n"],["reduce_to_value_nodes","Solargraph::Source::NodeMethods::DeepInference","Solargraph/Source/NodeMethods/DeepInference.html#method-c-reduce_to_value_nodes","(nodes)",""],["references","Solargraph::Source","Solargraph/Source.html#method-i-references","(name)","<p>@param name [String] @return [Array&lt;Location&gt;]\n"],["references","Solargraph::SourceMap","Solargraph/SourceMap.html#method-i-references","(name)","<p>@param name [String] @return [Array&lt;Location&gt;]\n"],["references_from","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-references_from","(uri, line, column, strip: true)","<p>@param uri [String] @param line [Integer] @param column [Integer] @param\nstrip [Boolean] Strip special …\n"],["references_from","Solargraph::Library","Solargraph/Library.html#method-i-references_from","(filename, line, column, strip: false)","<p>@param filename [String] @param line [Integer] @param column [Integer]\n@param strip [Boolean] Strip special …\n"],["register","Solargraph::Convention","Solargraph/Convention.html#method-c-register","(convention)","<p>@param convention [Class&lt;Convention::Base&gt;] @return\n[Convention::Base]\n"],["register","Solargraph::Diagnostics","Solargraph/Diagnostics.html#method-c-register","(name, klass)","<p>Add a reporter with a name to identify it in .solargraph.yml files.\n<p>@param name [String] The name @param …\n"],["register","Solargraph::LanguageServer::Message","Solargraph/LanguageServer/Message.html#method-c-register","(path, message_class)","<p>Register a method name and message for handling by the language server.\n<p>@example\n\n<pre>Message.register &#39;initialize&#39;, ...</pre>\n"],["register","Solargraph::SourceMap::NodeProcessor","Solargraph/SourceMap/NodeProcessor.html#method-c-register","(type, cls)","<p>Register a processor for a node type.\n<p>@param type [Symbol] @param cls [Class&lt;NodeProcessor::Base&gt;] …\n"],["register_capabilities","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-register_capabilities","(methods)","<p>Register the methods as capabilities with the client. This method will\navoid duplicating registrations …\n"],["register_from_options","Solargraph::LanguageServer::Message::Workspace::DidChangeConfiguration","Solargraph/LanguageServer/Message/Workspace/DidChangeConfiguration.html#method-i-register_from_options","()",""],["registered?","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-registered-3F","(method)","<p>True if the specified method has been registered.\n<p>@param method [String] The method name, e.g.,\n&#39;textDocument/completion&#39; …\n"],["remember_or_probe","Solargraph::Source::Chain","Solargraph/Source/Chain.html#method-i-remember_or_probe","(pin, api_map)",""],["remove","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-remove","(directory)","<p>Remove a directory.\n<p>@param directory [String] @return [void]\n"],["remove","Solargraph::Workspace","Solargraph/Workspace.html#method-i-remove","(filename)","<p>Remove a source from the workspace. The source will not be removed if its\nfile exists and the workspace …\n"],["remove_folders","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-remove_folders","(array)","<p>@param array [Array&lt;Hash&gt;] @return [void]\n"],["remove_folders","Solargraph::LanguageServer::Message::Workspace::DidChangeWorkspaceFolders","Solargraph/LanguageServer/Message/Workspace/DidChangeWorkspaceFolders.html#method-i-remove_folders","()",""],["remove_inline_comment_hashes","Solargraph::SourceMap::Mapper","Solargraph/SourceMap/Mapper.html#method-i-remove_inline_comment_hashes","(comment)",""],["remove_odd_spaces","Solargraph::Pin::Documenting","Solargraph/Pin/Documenting.html#method-i-remove_odd_spaces","(line)","<p>@param line [String] @return [String]\n"],["render","Solargraph::Page","Solargraph/Page.html#method-i-render","(template, layout: true, locals: {})","<p>@param template [String] @param layout [Boolean] @param locals [Hash]\n@return [String]\n"],["repair","Solargraph::Source::Change","Solargraph/Source/Change.html#method-i-repair","(text)","<p>Repair an update by replacing the new text with similarly formatted\nwhitespace.\n<p>@param text [String]  …\n"],["repair","Solargraph::Source::Updater","Solargraph/Source/Updater.html#method-i-repair","(text)","<p>@return [String]\n"],["repaired?","Solargraph::Source","Solargraph/Source.html#method-i-repaired-3F","()",""],["report_location?","Solargraph::TypeChecker","Solargraph/TypeChecker.html#method-i-report_location-3F","(location)","<p>@param location [Location, nil]\n"],["reporter","Solargraph::Diagnostics","Solargraph/Diagnostics.html#method-c-reporter","(name)","<p>Find a reporter by name.\n<p>@param name [String] The name with which the reporter was registered\n@return …\n"],["reporter_hash","Solargraph::Diagnostics","Solargraph/Diagnostics.html#method-c-reporter_hash","()","<p>@return [Hash]\n"],["reporters","Solargraph::Diagnostics","Solargraph/Diagnostics.html#method-c-reporters","()","<p>Get an array of reporter names.\n<p>@return [Array&lt;String&gt;]\n"],["reporters","Solargraph::Shell","Solargraph/Shell.html#method-i-reporters","()",""],["reporters","Solargraph::Workspace::Config","Solargraph/Workspace/Config.html#method-i-reporters","()","<p>An array of reporters to use for diagnostics.\n<p>@return [Array&lt;String&gt;]\n"],["requests","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-requests","()","<p>A hash of client requests by ID. The host uses this to keep track of\npending responses.\n<p>@return [Hash{Integer …\n"],["require_error","Solargraph::Diagnostics::RequireNotFound","Solargraph/Diagnostics/RequireNotFound.html#method-i-require_error","(path, location)","<p>@param path [String] @param location [Location] @return [Hash]\n"],["require_from_bundle","Solargraph::ApiMap::BundlerMethods","Solargraph/ApiMap/BundlerMethods.html#method-i-require_from_bundle","(directory)",""],["require_location","Solargraph::LanguageServer::Message::TextDocument::Definition","Solargraph/LanguageServer/Message/TextDocument/Definition.html#method-i-require_location","()",""],["require_minimum","Solargraph::YardMap::CoreDocs","Solargraph/YardMap/CoreDocs.html#method-c-require_minimum","()","<p>Ensure installation of minimum documentation.\n<p>@return [void]\n"],["require_paths","Solargraph::Workspace","Solargraph/Workspace.html#method-i-require_paths","()","<p>The require paths associated with the workspace.\n<p>@return [Array&lt;String&gt;]\n"],["require_paths","Solargraph::Workspace::Config","Solargraph/Workspace/Config.html#method-i-require_paths","()","<p>An array of load paths for required paths.\n<p>@return [Array&lt;String&gt;]\n"],["require_reference","Solargraph::YardMap","Solargraph/YardMap.html#method-i-require_reference","(path)","<p>Get the location of a file referenced by a require path.\n<p>@param path [String] @return [Location]\n"],["require_reference_at","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-require_reference_at","(location)","<p>@param location [Location] @return [Location]\n"],["required","Solargraph::Workspace::Config","Solargraph/Workspace/Config.html#method-i-required","()","<p>An array of required paths to add to the workspace.\n<p>@return [Array&lt;String&gt;]\n"],["requires","Solargraph::SourceMap","Solargraph/SourceMap.html#method-i-requires","()","<p>@return [Array&lt;Pin::Reference::Require&gt;]\n"],["reset_conversions","Solargraph::Pin::Conversions","Solargraph/Pin/Conversions.html#method-i-reset_conversions","()",""],["reset_require_from_bundle","Solargraph::ApiMap::BundlerMethods","Solargraph/ApiMap/BundlerMethods.html#method-i-reset_require_from_bundle","()",""],["resolve","Solargraph::Source::Chain::BlockVariable","Solargraph/Source/Chain/BlockVariable.html#method-i-resolve","(api_map, name_pin, locals)",""],["resolve","Solargraph::Source::Chain::Call","Solargraph/Source/Chain/Call.html#method-i-resolve","(api_map, name_pin, locals)","<p>@param api_map [ApiMap] @param name_pin [Pin::Base] @param locals\n[Array&lt;Pin::Base&gt;]\n"],["resolve","Solargraph::Source::Chain::ClassVariable","Solargraph/Source/Chain/ClassVariable.html#method-i-resolve","(api_map, name_pin, locals)",""],["resolve","Solargraph::Source::Chain::Constant","Solargraph/Source/Chain/Constant.html#method-i-resolve","(api_map, name_pin, locals)",""],["resolve","Solargraph::Source::Chain::GlobalVariable","Solargraph/Source/Chain/GlobalVariable.html#method-i-resolve","(api_map, name_pin, locals)",""],["resolve","Solargraph::Source::Chain::Head","Solargraph/Source/Chain/Head.html#method-i-resolve","(api_map, name_pin, locals)",""],["resolve","Solargraph::Source::Chain::InstanceVariable","Solargraph/Source/Chain/InstanceVariable.html#method-i-resolve","(api_map, name_pin, locals)",""],["resolve","Solargraph::Source::Chain::Link","Solargraph/Source/Chain/Link.html#method-i-resolve","(api_map, name_pin, locals)","<p>@param api_map [ApiMap] @param name_pin [Pin::Base] @param locals\n[Array&lt;Pin::Base&gt;] @return [Array&lt;Pin::Base&gt;] …\n"],["resolve","Solargraph::Source::Chain::Literal","Solargraph/Source/Chain/Literal.html#method-i-resolve","(api_map, name_pin, locals)",""],["resolve","Solargraph::Source::Chain::Or","Solargraph/Source/Chain/Or.html#method-i-resolve","(api_map, name_pin, locals)",""],["resolve","Solargraph::Source::Chain::Variable","Solargraph/Source/Chain/Variable.html#method-i-resolve","(api_map, name_pin, locals)",""],["resolve_completion_item","Solargraph::Pin::Conversions","Solargraph/Pin/Conversions.html#method-i-resolve_completion_item","()","<p>@return [Hash]\n"],["resolve_method_alias","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-resolve_method_alias","(pin)","<p>@param pin [Pin::MethodAlias, Pin::Base] @return [Pin::BaseMethod]\n"],["resolve_method_aliases","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-resolve_method_aliases","(pins, visibility = [:public, :private, :protected])","<p>@param pins [Array&lt;Pin::Base&gt;] @param visibility\n[Array&lt;Symbol&gt;] @return [Array&lt;Pin::Base&gt;] …\n"],["resolve_node_signature","Solargraph::Source::NodeMethods","Solargraph/Source/NodeMethods.html#method-i-resolve_node_signature","(node)","<p>Get a call signature from a node. The result should be a string in the form\nof a method path, e.g.,  …\n"],["resolve_reference","Solargraph::Pin::BaseMethod","Solargraph/Pin/BaseMethod.html#method-i-resolve_reference","(ref, api_map)","<p>@param ref [String] @param api_map [ApiMap] @return [ComplexType]\n"],["resolve_reference","Solargraph::Pin::Parameter","Solargraph/Pin/Parameter.html#method-i-resolve_reference","(ref, api_map, skip)","<p>@param ref [String] @param api_map [ApiMap] @param skip [Array] @return\n[Array&lt;YARD::Tags::Tag&gt;, …\n"],["respond_to_missing?","Solargraph::ComplexType","Solargraph/ComplexType.html#method-i-respond_to_missing-3F","(name, include_private = false)",""],["return_type","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-return_type","()","<p>The pin&#39;s return type.\n<p>@return [ComplexType]\n"],["return_type","Solargraph::Pin::BaseMethod","Solargraph/Pin/BaseMethod.html#method-i-return_type","()",""],["return_type","Solargraph::Pin::BaseVariable","Solargraph/Pin/BaseVariable.html#method-i-return_type","()",""],["return_type","Solargraph::Pin::Common","Solargraph/Pin/Common.html#method-i-return_type","()",""],["return_type","Solargraph::Pin::Namespace","Solargraph/Pin/Namespace.html#method-i-return_type","()",""],["return_type","Solargraph::Pin::Parameter","Solargraph/Pin/Parameter.html#method-i-return_type","()",""],["return_type","Solargraph::Pin::Symbol","Solargraph/Pin/Symbol.html#method-i-return_type","()",""],["return_type_problems","Solargraph::TypeChecker","Solargraph/TypeChecker.html#method-i-return_type_problems","()","<p>Return type problems indicate that a method does not specify a type in a\n`@return` tag or the specified …\n"],["returns_from","Solargraph::Source::NodeMethods","Solargraph/Source/NodeMethods.html#method-i-returns_from","(node)","<p>Find all the nodes within the provided node that potentially return a\nvalue.\n<p>The node parameter typically …\n"],["root_code_object","Solargraph::ApiMap::SourceToYard","Solargraph/ApiMap/SourceToYard.html#method-i-root_code_object","()","<p>@return [YARD::CodeObjects::RootObject]\n"],["rooted?","Solargraph::ComplexType::TypeMethods","Solargraph/ComplexType/TypeMethods.html#method-i-rooted-3F","()",""],["ruby_to_html","Solargraph::Page::Binder","Solargraph/Page/Binder.html#method-i-ruby_to_html","(code)","<p>@param code [String] @return [String]\n"],["run","Solargraph::YardMap::RdocToYard","Solargraph/YardMap/RdocToYard.html#method-c-run","(spec)","<p>@param spec [Gem::Specification]\n"],["scan","Solargraph::Shell","Solargraph/Shell.html#method-i-scan","()",""],["schedule","Solargraph::LanguageServer::Host::Diagnoser","Solargraph/LanguageServer/Host/Diagnoser.html#method-i-schedule","(uri)","<p>Schedule a file to be diagnosed.\n<p>@param uri [String] @return [void]\n"],["scope","Solargraph::ComplexType::TypeMethods","Solargraph/ComplexType/TypeMethods.html#method-i-scope","()","<p>@return [Symbol] :class or :instance\n"],["scope","Solargraph::Pin::InstanceVariable","Solargraph/Pin/InstanceVariable.html#method-i-scope","()",""],["scope","Solargraph::Pin::Namespace","Solargraph/Pin/Namespace.html#method-i-scope","()",""],["search","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-search","(query)","<p>Get a list of documented paths that match the query.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">api_map</span>.<span class=\"ruby-identifier\">query</span>(<span class=\"ruby-string\">&#39;str&#39;</span>) <span class=\"ruby-comment\"># Results will include ...</span>\n</pre>\n"],["search","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-search","(query)","<p>@param query [String] @return [Array&lt;String&gt;]\n"],["search","Solargraph::Library","Solargraph/Library.html#method-i-search","(query)","<p>@param query [String] @return [Array&lt;String&gt;]\n"],["see_reference","Solargraph::Pin::BaseMethod","Solargraph/Pin/BaseMethod.html#method-i-see_reference","(api_map)","<p>@param api_map [ApiMap] @return [ComplexType, nil]\n"],["see_reference","Solargraph::Pin::Parameter","Solargraph/Pin/Parameter.html#method-i-see_reference","(heredoc, api_map, skip = [])","<p>@param heredoc [YARD::Docstring] @param api_map [ApiMap] @param skip\n[Array] @return [Array&lt;YARD::Tags::Tag&gt;] …\n"],["select","Solargraph::ComplexType","Solargraph/ComplexType.html#method-i-select","(&block)",""],["select","Solargraph::LanguageServer::Message","Solargraph/LanguageServer/Message.html#method-c-select","(path)","<p>@param path [String] @return\n[Class&lt;Solargraph::LanguageServer::Message::Base&gt;]\n"],["select_template","Solargraph::Page","Solargraph/Page.html#method-c-select_template","(directories, name)","<p>@param directories [Array&lt;String&gt;] @param name [String] @return\n[String]\n"],["self_to","Solargraph::ComplexType","Solargraph/ComplexType.html#method-i-self_to","(dst)","<p>@param dst [String] @return [ComplexType]\n"],["self_to","Solargraph::ComplexType::UniqueType","Solargraph/ComplexType/UniqueType.html#method-i-self_to","(dst)",""],["selfy?","Solargraph::ComplexType","Solargraph/ComplexType.html#method-i-selfy-3F","()",""],["selfy?","Solargraph::ComplexType::UniqueType","Solargraph/ComplexType/UniqueType.html#method-i-selfy-3F","()",""],["send_notification","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-send_notification","(method, params)","<p>Send a notification to the client.\n<p>@param method [String] The message method @param params [Hash] The …\n"],["send_request","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-send_request","(method, params, &block)","<p>Send a request to the client and execute the provided block to process the\nresponse. If an ID is not …\n"],["send_response","Solargraph::LanguageServer::Message::Base","Solargraph/LanguageServer/Message/Base.html#method-i-send_response","()","<p>@return [void]\n"],["send_response","Solargraph::LanguageServer::Request","Solargraph/LanguageServer/Request.html#method-i-send_response","()",""],["sending","Solargraph::LanguageServer::Transport::Adapter","Solargraph/LanguageServer/Transport/Adapter.html#method-i-sending","(data)","<p>@todo Temporary alias to avoid problems due to a breaking change in\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">the</span> <span class=\"ruby-constant\">Backport</span> <span class=\"ruby-constant\">API</span>\n</pre>\n"],["set_constants","Solargraph::ApiMap::Cache","Solargraph/ApiMap/Cache.html#method-i-set_constants","(namespace, context, value)",""],["set_error","Solargraph::LanguageServer::Message::Base","Solargraph/LanguageServer/Message/Base.html#method-i-set_error","(code, message)","<p>@param code [Integer] See Solargraph::LanguageServer::ErrorCodes @param\nmessage [String] @return [void] …\n"],["set_message_handler","Solargraph::LanguageServer::Transport::DataReader","Solargraph/LanguageServer/Transport/DataReader.html#method-i-set_message_handler","(&block)","<p>Declare a block to be executed for each message received from the client.\n<p>@yieldparam [Hash] The message …\n"],["set_methods","Solargraph::ApiMap::Cache","Solargraph/ApiMap/Cache.html#method-i-set_methods","(fqns, scope, visibility, deep, value)",""],["set_path_pins","Solargraph::YardMap::Cache","Solargraph/YardMap/Cache.html#method-i-set_path_pins","(path, pins)",""],["set_qualified_namespace","Solargraph::ApiMap::Cache","Solargraph/ApiMap/Cache.html#method-i-set_qualified_namespace","(name, context, value)",""],["set_receiver_definition","Solargraph::ApiMap::Cache","Solargraph/ApiMap/Cache.html#method-i-set_receiver_definition","(path, pin)",""],["set_result","Solargraph::LanguageServer::Message::Base","Solargraph/LanguageServer/Message/Base.html#method-i-set_result","(data)","<p>@param data [Hash, Array, nil] @return [void]\n"],["show_message","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-show_message","(text, type = LanguageServer::MessageTypes::INFO)","<p>Send a notification to the client.\n<p>@param text [String] @param type [Integer] A MessageType constant @return …\n"],["show_message_request","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-show_message_request","(text, type, actions, &block)","<p>Send a notification with optional responses.\n<p>@param text [String] @param type [Integer] A MessageType …\n"],["shutdown","Solargraph::LanguageServer::Transport::Adapter","Solargraph/LanguageServer/Transport/Adapter.html#method-i-shutdown","()",""],["signature","Solargraph::Pin::BaseVariable","Solargraph/Pin/BaseVariable.html#method-i-signature","()",""],["signature_data","Solargraph::Source::SourceChainer","Solargraph/Source/SourceChainer.html#method-i-signature_data","()",""],["signature_help","Solargraph::Pin::Conversions","Solargraph/Pin/Conversions.html#method-i-signature_help","()","<p>@return [Hash]\n"],["signatures_at","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-signatures_at","(uri, line, column)","<p>@param uri [String] @param line [Integer] @param column [Integer] @return\n[Array&lt;Solargraph::Pin::Base&gt;] …\n"],["signatures_at","Solargraph::Library","Solargraph/Library.html#method-i-signatures_at","(filename, line, column)","<p>Get signature suggestions for the method at the specified file and\nlocation.\n<p>@param filename [String] …\n"],["signify","Solargraph::SourceMap::Clip","Solargraph/SourceMap/Clip.html#method-i-signify","()","<p>@return [Array&lt;Pin::Base&gt;]\n"],["skippable_block_receivers","Solargraph::Source::Chain","Solargraph/Source/Chain.html#method-i-skippable_block_receivers","(api_map)",""],["socket","Solargraph::Shell","Solargraph/Shell.html#method-i-socket","()",""],["source","Solargraph::Workspace","Solargraph/Workspace.html#method-i-source","(filename)","<p>Get a source by its filename.\n<p>@param filename [String] @return [Solargraph::Source]\n"],["source_hash","Solargraph::Workspace","Solargraph/Workspace.html#method-i-source_hash","()","<p>@return [Hash{String =&gt; Solargraph::Source}]\n"],["source_map","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-source_map","(filename)","<p>Get a source map by filename.\n<p>@param filename [String] @return [SourceMap]\n"],["source_map","Solargraph::SourceMap::Clip","Solargraph/SourceMap/Clip.html#method-i-source_map","()","<p>@return [SourceMap]\n"],["source_map_hash","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-source_map_hash","()","<p>A hash of source maps with filename keys.\n<p>@return [Hash{String =&gt; SourceMap}]\n"],["source_maps","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-source_maps","()","<p>@return [Array&lt;SourceMap&gt;]\n"],["sources","Solargraph::Bundle","Solargraph/Bundle.html#method-i-sources","()","<p>@return [Array&lt;Source&gt;]\n"],["sources","Solargraph::LanguageServer::Host::Dispatch","Solargraph/LanguageServer/Host/Dispatch.html#method-i-sources","()","<p>@return [Sources]\n"],["sources","Solargraph::Workspace","Solargraph/Workspace.html#method-i-sources","()","<p>@return [Array&lt;Solargraph::Source&gt;]\n"],["spec_for_require","Solargraph::YardMap","Solargraph/YardMap.html#method-i-spec_for_require","(path)",""],["specs_from_bundle","Solargraph::Documentor","Solargraph/Documentor.html#method-c-specs_from_bundle","(directory)",""],["start","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-start","()","<p>Start asynchronous process handling.\n<p>@return [void]\n"],["start","Solargraph::LanguageServer::Host::Cataloger","Solargraph/LanguageServer/Host/Cataloger.html#method-i-start","()","<p>Start the catalog thread.\n<p>@return [void]\n"],["start","Solargraph::LanguageServer::Host::Diagnoser","Solargraph/LanguageServer/Host/Diagnoser.html#method-i-start","()","<p>Start the diagnosis thread.\n<p>@return [self]\n"],["start","Solargraph::LanguageServer::Host::Sources","Solargraph/LanguageServer/Host/Sources.html#method-i-start","()","<p>@return [void]\n"],["start_of_constant?","Solargraph::Source::Cursor","Solargraph/Source/Cursor.html#method-i-start_of_constant-3F","()","<p>@return [Boolean]\n"],["start_of_word","Solargraph::Source::Cursor","Solargraph/Source/Cursor.html#method-i-start_of_word","()","<p>The part of the word before the current position. Given the text `foo.bar`,\nthe start_of_word at position(0, …\n"],["start_synchronize","Solargraph::Source","Solargraph/Source.html#method-i-start_synchronize","(updater)","<p>Start synchronizing the source. This method updates the code without\nparsing a new AST. The resulting …\n"],["start_word_pattern","Solargraph::Source::Cursor","Solargraph/Source/Cursor.html#method-i-start_word_pattern","()","<p>A regular expression to find the start of a word from an offset.\n<p>@return [Regexp]\n"],["static_code_action","Solargraph::LanguageServer::Message::Initialize","Solargraph/LanguageServer/Message/Initialize.html#method-i-static_code_action","()",""],["static_completion","Solargraph::LanguageServer::Message::Initialize","Solargraph/LanguageServer/Message/Initialize.html#method-i-static_completion","()",""],["static_definitions","Solargraph::LanguageServer::Message::Initialize","Solargraph/LanguageServer/Message/Initialize.html#method-i-static_definitions","()",""],["static_document_formatting","Solargraph::LanguageServer::Message::Initialize","Solargraph/LanguageServer/Message/Initialize.html#method-i-static_document_formatting","()",""],["static_document_symbols","Solargraph::LanguageServer::Message::Initialize","Solargraph/LanguageServer/Message/Initialize.html#method-i-static_document_symbols","()",""],["static_folding_range","Solargraph::LanguageServer::Message::Initialize","Solargraph/LanguageServer/Message/Initialize.html#method-i-static_folding_range","()",""],["static_hover","Solargraph::LanguageServer::Message::Initialize","Solargraph/LanguageServer/Message/Initialize.html#method-i-static_hover","()",""],["static_on_type_formatting","Solargraph::LanguageServer::Message::Initialize","Solargraph/LanguageServer/Message/Initialize.html#method-i-static_on_type_formatting","()",""],["static_references","Solargraph::LanguageServer::Message::Initialize","Solargraph/LanguageServer/Message/Initialize.html#method-i-static_references","()",""],["static_rename","Solargraph::LanguageServer::Message::Initialize","Solargraph/LanguageServer/Message/Initialize.html#method-i-static_rename","()",""],["static_signature_help","Solargraph::LanguageServer::Message::Initialize","Solargraph/LanguageServer/Message/Initialize.html#method-i-static_signature_help","()",""],["static_workspace_symbols","Solargraph::LanguageServer::Message::Initialize","Solargraph/LanguageServer/Message/Initialize.html#method-i-static_workspace_symbols","()",""],["stdio","Solargraph::Shell","Solargraph/Shell.html#method-i-stdio","()",""],["stop","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-stop","()","<p>@return [void]\n"],["stop","Solargraph::LanguageServer::Host::Cataloger","Solargraph/LanguageServer/Host/Cataloger.html#method-i-stop","()","<p>Stop the catalog thread.\n<p>@return [void]\n"],["stop","Solargraph::LanguageServer::Host::Diagnoser","Solargraph/LanguageServer/Host/Diagnoser.html#method-i-stop","()","<p>Stop the diagnosis thread.\n<p>@return [void]\n"],["stop","Solargraph::LanguageServer::Host::Sources","Solargraph/LanguageServer/Host/Sources.html#method-i-stop","()","<p>@return [void]\n"],["stopped?","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-stopped-3F","()",""],["stopped?","Solargraph::LanguageServer::Host::Cataloger","Solargraph/LanguageServer/Host/Cataloger.html#method-i-stopped-3F","()","<p>True if the cataloger is stopped.\n<p>@return [Boolean]\n"],["stopped?","Solargraph::LanguageServer::Host::Diagnoser","Solargraph/LanguageServer/Host/Diagnoser.html#method-i-stopped-3F","()","<p>True is the diagnoser is stopped.\n<p>@return [Boolean]\n"],["stopped?","Solargraph::LanguageServer::Host::Sources","Solargraph/LanguageServer/Host/Sources.html#method-i-stopped-3F","()",""],["store","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-store","()","<p>@return [ApiMap::Store]\n"],["strict_type_problems","Solargraph::TypeChecker","Solargraph/TypeChecker.html#method-i-strict_type_problems","()","<p>Strict type problems indicate that a `@return` type or a `@param` type does\nnot match the type inferred …\n"],["string?","Solargraph::Source::Cursor","Solargraph/Source/Cursor.html#method-i-string-3F","()","<p>@return [Boolean]\n"],["string?","Solargraph::Source::SourceChainer","Solargraph/Source/SourceChainer.html#method-i-string-3F","()","<p>True if the current offset is inside a string.\n<p>@return [Boolean]\n"],["string_at?","Solargraph::Source","Solargraph/Source.html#method-i-string_at-3F","(position)","<p>@param position [Position] @return [Boolean]\n"],["string_nodes","Solargraph::Source","Solargraph/Source.html#method-i-string_nodes","()","<p>@return [Array&lt;Parser::AST::Node&gt;]\n"],["string_nodes_in","Solargraph::Source","Solargraph/Source.html#method-i-string_nodes_in","(n)","<p>@param n [Parser::AST::Node] @return [Array&lt;Parser::AST::Node&gt;]\n"],["string_value","Solargraph::Source::FlawedBuilder","Solargraph/Source/FlawedBuilder.html#method-i-string_value","(token)",""],["stringified_comments","Solargraph::Source","Solargraph/Source.html#method-i-stringified_comments","()","<p>A hash of line numbers and their associated comments.\n<p>@return [Hash{Integer =&gt; Array&lt;String&gt;}] …\n"],["stringify_comment_array","Solargraph::Source","Solargraph/Source.html#method-i-stringify_comment_array","(comments)","<p>Get a string representation of an array of comments.\n<p>@param comments [Array&lt;Parser::Source::Comment&gt;] …\n"],["super_and_sub?","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-super_and_sub-3F","(sup, sub)","<p>Check if a class is a superclass of another class.\n<p>@param sup [String] The superclass @param sub [String] …\n"],["super_pins","Solargraph::Source::Chain::Head","Solargraph/Source/Chain/Head.html#method-i-super_pins","(api_map, name_pin)","<p>@param api_map [ApiMap] @param name_pin [Pin::Base] @return\n[Array&lt;Pin::Base&gt;]\n"],["superclass_references","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-superclass_references","()",""],["support_workspace_folders?","Solargraph::LanguageServer::Message::Initialize","Solargraph/LanguageServer/Message/Initialize.html#method-i-support_workspace_folders-3F","()",""],["symbol_kind","Solargraph::Pin::Attribute","Solargraph/Pin/Attribute.html#method-i-symbol_kind","()",""],["symbol_kind","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-symbol_kind","()","<p>@return [Integer]\n"],["symbol_kind","Solargraph::Pin::BaseVariable","Solargraph/Pin/BaseVariable.html#method-i-symbol_kind","()","<p>@return [Integer]\n"],["symbol_kind","Solargraph::Pin::Constant","Solargraph/Pin/Constant.html#method-i-symbol_kind","()","<p>@return [Integer]\n"],["symbol_kind","Solargraph::Pin::Method","Solargraph/Pin/Method.html#method-i-symbol_kind","()",""],["symbol_kind","Solargraph::Pin::Namespace","Solargraph/Pin/Namespace.html#method-i-symbol_kind","()","<p>@return [Integer]\n"],["symbols","Solargraph::ApiMap::Store","Solargraph/ApiMap/Store.html#method-i-symbols","()","<p>@return [Array&lt;Solargraph::Pin::Symbol&gt;]\n"],["synchronize","Solargraph::Source","Solargraph/Source.html#method-i-synchronize","(updater)","<p>Synchronize the Source with an update. This method applies changes to the\ncode, parses the new code&#39;s …\n"],["synchronize!","Solargraph::Workspace","Solargraph/Workspace.html#method-i-synchronize-21","(updater)","<p>Synchronize the workspace from the provided updater.\n<p>@param updater [Source::Updater] @return [void]\n"],["synchronized?","Solargraph::Library","Solargraph/Library.html#method-i-synchronized-3F","()","<p>True if the ApiMap is up to date with the library&#39;s workspace and open\nfiles.\n<p>@return [Boolean]\n"],["synchronized?","Solargraph::Source","Solargraph/Source.html#method-i-synchronized-3F","()",""],["synchronizing?","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-synchronizing-3F","()",""],["tick","Solargraph::LanguageServer::Host::Cataloger","Solargraph/LanguageServer/Host/Cataloger.html#method-i-tick","()","<p>Perform cataloging.\n<p>@return [void]\n"],["tick","Solargraph::LanguageServer::Host::Diagnoser","Solargraph/LanguageServer/Host/Diagnoser.html#method-i-tick","()","<p>Perform diagnoses.\n<p>@return [void]\n"],["tick","Solargraph::LanguageServer::Host::Sources","Solargraph/LanguageServer/Host/Sources.html#method-i-tick","()","<p>@return [void]\n"],["to_hash","Solargraph::Location","Solargraph/Location.html#method-i-to_hash","()","<p>@return [Hash]\n"],["to_hash","Solargraph::Position","Solargraph/Position.html#method-i-to_hash","()","<p>Get a hash of the position. This representation is suitable for use in the\nlanguage server protocol. …\n"],["to_hash","Solargraph::Range","Solargraph/Range.html#method-i-to_hash","()","<p>Get a hash of the range. This representation is suitable for use in the\nlanguage server protocol.\n<p>@return …\n"],["to_offset","Solargraph::Position","Solargraph/Position.html#method-c-to_offset","(text, position)","<p>Get a numeric offset for the specified text and position.\n<p>@param text [String] @param position [Position] …\n"],["to_s","Solargraph::ComplexType","Solargraph/ComplexType.html#method-i-to_s","()",""],["to_s","Solargraph::ComplexType::UniqueType","Solargraph/ComplexType/UniqueType.html#method-i-to_s","()",""],["to_s","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-to_s","()",""],["tree_at","Solargraph::Source","Solargraph/Source.html#method-i-tree_at","(line, column)","<p>Get an array of nodes containing the specified index, starting with the\nnearest node and ending with …\n"],["try_merge!","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-try_merge-21","(pin)","<p>Try to merge data from another pin. Merges are only possible if the pins\nare near matches (see the #nearly? …\n"],["try_merge!","Solargraph::Pin::BaseVariable","Solargraph/Pin/BaseVariable.html#method-i-try_merge-21","(pin)",""],["try_merge!","Solargraph::Pin::InstanceVariable","Solargraph/Pin/InstanceVariable.html#method-i-try_merge-21","(pin)",""],["try_merge!","Solargraph::Pin::LocalVariable","Solargraph/Pin/LocalVariable.html#method-i-try_merge-21","(pin)",""],["try_merge!","Solargraph::Pin::Method","Solargraph/Pin/Method.html#method-i-try_merge-21","(pin)",""],["try_merge!","Solargraph::Pin::Parameter","Solargraph/Pin/Parameter.html#method-i-try_merge-21","(pin)",""],["try_merge!","Solargraph::SourceMap","Solargraph/SourceMap.html#method-i-try_merge-21","(other_map)","<p>@param other_map [SourceMap] @return [Boolean]\n"],["try_parse","Solargraph::ComplexType","Solargraph/ComplexType.html#method-c-try_parse","(*strings)","<p>@param strings [Array&lt;String&gt;] @return [ComplexType]\n"],["typecheck","Solargraph::Shell","Solargraph/Shell.html#method-i-typecheck","(*files)",""],["typify","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-typify","(api_map)","<p>Get a fully qualified type from the pin&#39;s return type.\n<p>The relative type is determined from YARD documentation …\n"],["typify","Solargraph::Pin::BaseMethod","Solargraph/Pin/BaseMethod.html#method-i-typify","(api_map)",""],["typify","Solargraph::Pin::Namespace","Solargraph/Pin/Namespace.html#method-i-typify","(api_map)",""],["typify","Solargraph::Pin::Parameter","Solargraph/Pin/Parameter.html#method-i-typify","(api_map)","<p>@param api_map [ApiMap]\n"],["typify_block_param","Solargraph::Pin::Parameter","Solargraph/Pin/Parameter.html#method-i-typify_block_param","(api_map)","<p>@param api_map [ApiMap] @return [ComplexType]\n"],["typify_from_super","Solargraph::Pin::BaseMethod","Solargraph/Pin/BaseMethod.html#method-i-typify_from_super","(api_map)","<p>@param api_map [ApiMap] @return [ComplexType, nil]\n"],["typify_method_param","Solargraph::Pin::Parameter","Solargraph/Pin/Parameter.html#method-i-typify_method_param","(api_map)","<p>@param api_map [ApiMap] @return [ComplexType]\n"],["uncache","Solargraph::Shell","Solargraph/Shell.html#method-i-uncache","(*gems)",""],["undefined?","Solargraph::ComplexType::TypeMethods","Solargraph/ComplexType/TypeMethods.html#method-i-undefined-3F","()",""],["undefined?","Solargraph::Source::Chain","Solargraph/Source/Chain.html#method-i-undefined-3F","()",""],["undefined?","Solargraph::Source::Chain::Link","Solargraph/Source/Chain/Link.html#method-i-undefined-3F","()",""],["unmap","Solargraph::SourceMap::Mapper","Solargraph/SourceMap/Mapper.html#method-i-unmap","(filename, code)","<p>@param filename [String] @param code [String] @return [Array]\n"],["unpack_name","Solargraph::Source::NodeMethods","Solargraph/Source/NodeMethods.html#method-i-unpack_name","(node)","<p>@param node [Parser::AST::Node] @return [String]\n"],["unregister_capabilities","Solargraph::LanguageServer::Host","Solargraph/LanguageServer/Host.html#method-i-unregister_capabilities","(methods)","<p>Unregister the methods with the client. This method will avoid duplicating\nunregistrations and ignore …\n"],["unresolved_requires","Solargraph::YardMap","Solargraph/YardMap.html#method-i-unresolved_requires","()","<p>@return [Array&lt;String&gt;]\n"],["update","Solargraph::LanguageServer::Host::Sources","Solargraph/LanguageServer/Host/Sources.html#method-i-update","(uri, updater)","<p>Update an existing source.\n<p>@raise [FileNotFoundError] if the URI does not match an open source.\n<p>@param …\n"],["update","Solargraph::LanguageServer::Transport::Adapter","Solargraph/LanguageServer/Transport/Adapter.html#method-i-update","()",""],["update","Solargraph::SourceMap::Region","Solargraph/SourceMap/Region.html#method-i-update","(closure: nil, scope: nil, visibility: nil)","<p>Generate a new Region with the provided attribute changes.\n<p>@param closure [Pin::Closure, nil] @param scope …\n"],["update_libraries","Solargraph::LanguageServer::Host::Dispatch","Solargraph/LanguageServer/Host/Dispatch.html#method-i-update_libraries","(uri)","<p>The Sources observer callback that merges a source into the host&#39;s\nlibraries when it gets updated. …\n"],["uri_to_file","Solargraph::LanguageServer::UriHelpers","Solargraph/LanguageServer/UriHelpers.html#method-i-uri_to_file","(uri)","<p>Convert a file URI to a path.\n<p>@param uri [String] @return [String]\n"],["valid?","Solargraph::YardMap::CoreDocs","Solargraph/YardMap/CoreDocs.html#method-c-valid-3F","(ver)","<p>True if core documentation is installed for the specified version number.\n<p>@param ver [String] The version …\n"],["value_types","Solargraph::ComplexType::TypeMethods","Solargraph/ComplexType/TypeMethods.html#method-i-value_types","()","<p>@return [Array&lt;ComplexType&gt;]\n"],["variable?","Solargraph::Pin::Base","Solargraph/Pin/Base.html#method-i-variable-3F","()","<p>@return [Boolean]\n"],["variable?","Solargraph::Pin::BaseVariable","Solargraph/Pin/BaseVariable.html#method-i-variable-3F","()",""],["version","Solargraph::Shell","Solargraph/Shell.html#method-i-version","()",""],["versions","Solargraph::YardMap::CoreDocs","Solargraph/YardMap/CoreDocs.html#method-c-versions","()","<p>Get a list of version numbers for currently installed core documentation.\n<p>@return [Array&lt;String&gt;] …\n"],["visibility","Solargraph::Pin::MethodAlias","Solargraph/Pin/MethodAlias.html#method-i-visibility","()",""],["visibility","Solargraph::Pin::Symbol","Solargraph/Pin/Symbol.html#method-i-visibility","()",""],["visible_at?","Solargraph::Pin::Localized","Solargraph/Pin/Localized.html#method-i-visible_at-3F","(other_loc)","<p>@param other_loc [Location]\n"],["visible_from?","Solargraph::Pin::Localized","Solargraph/Pin/Localized.html#method-i-visible_from-3F","(other, position)","<p>@param other [Pin::Base] The caller&#39;s block @param position [Position,\nArray(Integer, Integer)]  …\n"],["void?","Solargraph::ComplexType::TypeMethods","Solargraph/ComplexType/TypeMethods.html#method-i-void-3F","()",""],["with_block?","Solargraph::Source::Chain::Call","Solargraph/Source/Chain/Call.html#method-i-with_block-3F","()",""],["with_dependencies?","Solargraph::YardMap","Solargraph/YardMap.html#method-i-with_dependencies-3F","()",""],["word","Solargraph::Source::Chain::Literal","Solargraph/Source/Chain/Literal.html#method-i-word","()",""],["word","Solargraph::Source::Chain::Or","Solargraph/Source/Chain/Or.html#method-i-word","()",""],["word","Solargraph::Source::Cursor","Solargraph/Source/Cursor.html#method-i-word","()","<p>The whole word at the current position. Given the text `foo.bar`, the word\nat position(0,6) is `bar`. …\n"],["workspace_config_path","Solargraph::Workspace::Config","Solargraph/Workspace/Config.html#method-i-workspace_config_path","()","<p>@return [String]\n"],["workspace_filenames","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-workspace_filenames","()","<p>@return [Array&lt;String&gt;]\n"],["workspaced?","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-workspaced-3F","(filename)","<p>True if the specified file is included in the workspace.\n<p>@param filename [String]\n"],["would_merge?","Solargraph::Workspace","Solargraph/Workspace.html#method-i-would_merge-3F","(filename)","<p>Determine whether a file would be merged into the workspace.\n<p>@param filename [String] @return [Boolean] …\n"],["would_require?","Solargraph::Workspace","Solargraph/Workspace.html#method-i-would_require-3F","(path)","<p>True if the path resolves to a file in the workspace&#39;s require paths.\n<p>@param path [String] @return …\n"],["write","Solargraph::Source::Change","Solargraph/Source/Change.html#method-i-write","(text, nullable = false)","<p>Write the change to the specified text.\n<p>@param text [String] The text to be changed. @param nullable [Boolean] …\n"],["write","Solargraph::Source::Updater","Solargraph/Source/Updater.html#method-i-write","(text, nullable = false)","<p>@return [String]\n"],["yard_map","Solargraph::ApiMap","Solargraph/ApiMap.html#method-i-yard_map","()","<p>@return [YardMap]\n"],["yardoc_file","Solargraph::YardMap::CoreDocs","Solargraph/YardMap/CoreDocs.html#method-c-yardoc_file","(ver = best_match)","<p>Get the path to a yardoc file for Ruby core documentation.\n<p>@param ver [String] The version number (best …\n"],["yardoc_file_for_spec","Solargraph::YardMap","Solargraph/YardMap.html#method-i-yardoc_file_for_spec","(spec)",""],["yardoc_stdlib_file","Solargraph::YardMap::CoreDocs","Solargraph/YardMap/CoreDocs.html#method-c-yardoc_stdlib_file","(ver = best_match)","<p>Get the path to a yardoc file for Ruby stdlib documentation.\n<p>@param ver [String] The version number (best …\n"],["yardocs","Solargraph::YardMap","Solargraph/YardMap.html#method-i-yardocs","()","<p>@return [Array&lt;String&gt;]\n"],["yielded_self_pins","Solargraph::SourceMap::Clip","Solargraph/SourceMap/Clip.html#method-i-yielded_self_pins","()","<p>@return [Array&lt;Pin::Base&gt;]\n"]]}}